[{"title":"使用 ARouter 实现登录拦截","url":"/2020/06/05/Android-ARouter-Login-Interceptor/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>使用 ARouter 路由框架优雅地实现登录拦截功能。</p>\n<span id=\"more\"></span>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>一个应用中有许多页面，有些页面是无需登录的（游客模式），有些页面是需要登录才能看的，当我们进行页面跳转时会先判断用户是否登录。如果已经登录，则正常跳转；如果没有登录，则跳转到登录页面先登录。这样的操作，大家应该都很熟悉吧。一般情况下，我们的逻辑是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (TextUtils.isEmpty(token)) &#123;  <span class=\"comment\">// 还没登录，先跳转登录页面</span></span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, LoginActivity.class);</span><br><span class=\"line\">    startActivity(intent);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 已经登录了，跳转订单页面</span></span><br><span class=\"line\">    Intent intent = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, OrderActivity.class);</span><br><span class=\"line\">    startActivity(intent);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的做法需要在每一个目标页面重复做登录检查，这样设计的扩展性并不友好。在这里介绍阿里的 ARouter 路由框架，可以更加优雅地实现登录拦截功能。</p>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><h2 id=\"SDK-初始化\"><a href=\"#SDK-初始化\" class=\"headerlink\" title=\"SDK 初始化\"></a>SDK 初始化</h2><p>SDK 集成步骤：<a href=\"https://github.com/alibaba/ARouter\">ARouter</a>。</p>\n<h2 id=\"拦截器的使用\"><a href=\"#拦截器的使用\" class=\"headerlink\" title=\"拦截器的使用\"></a>拦截器的使用</h2><h3 id=\"登录拦截器\"><a href=\"#登录拦截器\" class=\"headerlink\" title=\"登录拦截器\"></a>登录拦截器</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 在跳转过程中处理登录事件，这样就不需要在目标页重复做登录检查</span></span><br><span class=\"line\"><span class=\"comment\"> * 拦截器会在跳转之间执行，多个拦截器会按优先级顺序依次执行</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> lishide</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020/5/30</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Interceptor(name = &quot;login&quot;, priority = 3)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginInterceptorImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IInterceptor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(Postcard postcard, InterceptorCallback callback)</span> </span>&#123;</span><br><span class=\"line\">        String path = postcard.getPath();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isNotLogin()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果没有登录</span></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (path) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 不需要登录的直接进入这个页面</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> RouterHub.PATH_LOGIN:</span><br><span class=\"line\">                <span class=\"keyword\">case</span> RouterHub.PATH_MAIN:</span><br><span class=\"line\">                    callback.onContinue(postcard);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 需要登录的直接拦截下来</span></span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    callback.onInterrupt(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果已经登录不拦截</span></span><br><span class=\"line\">            callback.onContinue(postcard);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//此方法只会走一次</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNotLogin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &lt;判断是否登录&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"路由跳转的回调\"><a href=\"#路由跳转的回调\" class=\"headerlink\" title=\"路由跳转的回调\"></a>路由跳转的回调</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 路由跳转的回调</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> lishide</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020/5/30</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginNavigationCallbackImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">NavigationCallback</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 找到了</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFound</span><span class=\"params\">(Postcard postcard)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 找不到了</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLost</span><span class=\"params\">(Postcard postcard)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 跳转成功了</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onArrival</span><span class=\"params\">(Postcard postcard)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onInterrupt</span><span class=\"params\">(Postcard postcard)</span> </span>&#123;</span><br><span class=\"line\">        String path = postcard.getPath();</span><br><span class=\"line\">        Bundle bundle = postcard.getExtras();</span><br><span class=\"line\">        <span class=\"comment\">// 被登录拦截了下来了</span></span><br><span class=\"line\">        <span class=\"comment\">// 需要调转到登录页面，把参数跟被登录拦截下来的路径传递给登录页面，登录成功后再进行跳转被拦截的页面</span></span><br><span class=\"line\">        ARouter.getInstance().build(RouterHub.PATH_LOGIN)</span><br><span class=\"line\">                .with(bundle)</span><br><span class=\"line\">                .withString(RouterHub.PATH, path)</span><br><span class=\"line\">                .navigation();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动-Activity\"><a href=\"#启动-Activity\" class=\"headerlink\" title=\"启动 Activity\"></a>启动 Activity</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ARouter.getInstance().build(RoutePath.PATH_SECOND)</span><br><span class=\"line\">        .withString(<span class=\"string\">&quot;msg&quot;</span>, <span class=\"string\">&quot;ARouter 传递过来的需要登录的参数 msg&quot;</span>)</span><br><span class=\"line\">        .navigation(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> LoginNavigationCallbackImpl());</span><br></pre></td></tr></table></figure>\n<p>这样就能实现页面的登录拦截了。</p>\n","tags":["Android","ARouter"]},{"title":"Kotlin 使用 Parcelize 注解简化 Parcelable 的书写","url":"/2019/07/06/Android-Kotlin-Parcelize/","content":"<p>Parcelize 是 Kotlin 在 1.1.4 中新增加的功能。</p>\n<span id=\"more\"></span>\n<h1 id=\"Parcelize-注解\"><a href=\"#Parcelize-注解\" class=\"headerlink\" title=\"Parcelize 注解\"></a>Parcelize 注解</h1><p>在新版的 Kotlin 插件中，包含了一个自动 <code>Parcelable</code> 实现生成器。只需要在主函数中，声明序列化的属性并添加一个 <code>@Parcelize</code> 注解，它将自动为我们创建 <code>writeToParcel()</code> 和 <code>createFromParcel()</code> 等模板代码。</p>\n<p>编译完以后，实际上是跟以前实现方式的结果是一致的。</p>\n<p>其实并没有什么高深的地方，但是这一点可以节约我们的代码量，而且提高开发效率。</p>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"Kotlin-版本\"><a href=\"#Kotlin-版本\" class=\"headerlink\" title=\"Kotlin 版本\"></a>Kotlin 版本</h2><p><code>1.1.4</code> 及以上</p>\n<h2 id=\"Gradle-配置\"><a href=\"#Gradle-配置\" class=\"headerlink\" title=\"Gradle 配置\"></a>Gradle 配置</h2><p><code>@Parcelize</code> 是一个实验室功能，所以还需要在 <code>Gradle</code> 中，增加 <code>experimental</code> 配置。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">androidExtensions &#123;</span><br><span class=\"line\">    experimental = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决-Lint-错误\"><a href=\"#解决-Lint-错误\" class=\"headerlink\" title=\"解决 Lint 错误\"></a>解决 Lint 错误</h2><p>直接使用 <code>@Parcelize</code> 你将面临一个 Lint 的错误提示，只需要增加 <code>@SuppressLint(&quot;ParcelCreator&quot;)</code> 忽略它就可以了。</p>\n<blockquote>\n<p>新版本已经支持。</p>\n</blockquote>\n<h1 id=\"示例：数据类\"><a href=\"#示例：数据类\" class=\"headerlink\" title=\"示例：数据类\"></a>示例：数据类</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Parcelize</span></span><br><span class=\"line\"><span class=\"function\">data class <span class=\"title\">User</span><span class=\"params\">(val name: String, val age: Int)</span> : Parcelable</span></span><br></pre></td></tr></table></figure>\n","tags":["Android","Kotlin","Parcelize"]},{"title":"【团队分享】Kotlin 及设计模式实践（一）","url":"/2018/03/19/Android-Kotlin-dp1/","content":"<p>今天给大家分享 Kotlin 入门的一些基本语法概念以及其独特的优秀特性和最近一段时间在实际开发中使用到的一些习惯用法。有 Java 开发基础，甚至说有某一种开发语言的基础，都是比较容易上手的。通过下面的几点分享，大家先领略一下 Kotlin 的简洁和优雅。结合一种较为常用且简单的设计模式——建造者模式进行本次的讲解。<br>希望我们团队能够固定有这样的分享学习活动，激活团队的氛围，传递更多的知识与技能。</p>\n<span id=\"more\"></span>\n<h1 id=\"1-Kotlin\"><a href=\"#1-Kotlin\" class=\"headerlink\" title=\"1. Kotlin\"></a>1. Kotlin</h1><h2 id=\"1-1-定义变量\"><a href=\"#1-1-定义变量\" class=\"headerlink\" title=\"1.1 定义变量\"></a>1.1 定义变量</h2><p>只读局部变量使用关键字 <code>val</code> 定义。只能为其赋值一次。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//sampleStart</span></span><br><span class=\"line\">    val a: Int = <span class=\"number\">1</span>  <span class=\"comment\">// 立即赋值</span></span><br><span class=\"line\">    val b = <span class=\"number\">2</span>   <span class=\"comment\">// 自动推断出 `Int` 类型</span></span><br><span class=\"line\">    val c: Int  <span class=\"comment\">// 如果没有初始值类型不能省略</span></span><br><span class=\"line\">    c = <span class=\"number\">3</span>       <span class=\"comment\">// 明确赋值</span></span><br><span class=\"line\"><span class=\"comment\">//sampleEnd</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;a = $a, b = $b, c = $c&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>可重新赋值的变量使用 <code>var</code> 关键字：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//sampleStart</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">5</span> <span class=\"comment\">// 自动推断出 `Int` 类型</span></span><br><span class=\"line\">    x += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\">//sampleEnd</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;x = $x&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>顶层变量：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//sampleStart</span></span><br><span class=\"line\">val PI = <span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">incrementX</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    x += <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//sampleEnd</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">fun <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;x = $x; PI = $PI&quot;</span>)</span><br><span class=\"line\">    incrementX()</span><br><span class=\"line\">    println(<span class=\"string\">&quot;incrementX()&quot;</span>)</span><br><span class=\"line\">    println(<span class=\"string\">&quot;x = $x; PI = $PI&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"1-2-if-表达式\"><a href=\"#1-2-if-表达式\" class=\"headerlink\" title=\"1.2 if 表达式\"></a>1.2 if 表达式</h2><p>在 Kotlin 中， <code>if</code> 是一个表达式，即它会返回一个值。 因此就不需要三元运算符（条件 ? 然后 : 否则） ，因为普通的 <code>if</code> 就能胜任这个角色。</p>\n<h3 id=\"1-2-1-用法\"><a href=\"#1-2-1-用法\" class=\"headerlink\" title=\"1.2.1 用法\"></a>1.2.1 用法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统用法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> max = a</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &lt; b) max = b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带 else</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> max: Int</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">\tmax = a</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tmax = b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作为表达式</span></span><br><span class=\"line\">val max = <span class=\"keyword\">if</span> (a &gt; b) a <span class=\"keyword\">else</span> b</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-2-if-的分支可以是代码块，最后的表达式作为该块的值：\"><a href=\"#1-2-2-if-的分支可以是代码块，最后的表达式作为该块的值：\" class=\"headerlink\" title=\"1.2.2 if 的分支可以是代码块，最后的表达式作为该块的值：\"></a>1.2.2 if 的分支可以是代码块，最后的表达式作为该块的值：</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val max = <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">\tprintln(<span class=\"string\">&quot;Choose a&quot;</span>)</span><br><span class=\"line\">\ta</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tprintln(<span class=\"string\">&quot;Choose b&quot;</span>)</span><br><span class=\"line\">\tb</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你使用 <code>if</code> 作为表达式而不是语句（例如：返回它的值或者把它赋给变量） ，该表达式需要有 <code>else</code> 分支。</p>\n<h2 id=\"1-3-when-表达式\"><a href=\"#1-3-when-表达式\" class=\"headerlink\" title=\"1.3 when 表达式\"></a>1.3 when 表达式</h2><p><code>when</code> 取代了类 C 语言的 <code>switch</code> 操作符。</p>\n<h3 id=\"1-3-1-简单形式\"><a href=\"#1-3-1-简单形式\" class=\"headerlink\" title=\"1.3.1 简单形式\"></a>1.3.1 简单形式</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">when (x) &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span> -&gt; println(<span class=\"string\">&quot;x == 1&quot;</span>)</span><br><span class=\"line\">    <span class=\"number\">2</span> -&gt; println(<span class=\"string\">&quot;x == 2&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; &#123; <span class=\"comment\">// 注意这个块</span></span><br><span class=\"line\">    \tprintln(<span class=\"string\">&quot;x is neither 1 nor 2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-2-多分支用相同的方式处理\"><a href=\"#1-3-2-多分支用相同的方式处理\" class=\"headerlink\" title=\"1.3.2 多分支用相同的方式处理\"></a>1.3.2 多分支用相同的方式处理</h3><p>可以把多个分支条件放在一起，用逗号分隔：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">when (x) &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">1</span> -&gt; println(<span class=\"string\">&quot;x == 0 or x == 1&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; println(<span class=\"string\">&quot;otherwise&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-3-3-任意表达式（而不只是常量）-作为分支条件\"><a href=\"#1-3-3-任意表达式（而不只是常量）-作为分支条件\" class=\"headerlink\" title=\"1.3.3 任意表达式（而不只是常量） 作为分支条件\"></a>1.3.3 任意表达式（而不只是常量） 作为分支条件</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">whenExpressionTest(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">whenExpressionTest</span><span class=\"params\">(x: Int)</span> </span>&#123;</span><br><span class=\"line\">    val s = <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">    when (x) &#123;</span><br><span class=\"line\">        parseInt(s) -&gt; println(<span class=\"string\">&quot;s encodes x&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; println(<span class=\"string\">&quot;s does not encode x&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-4-when-也可以用来取代-if-else-if-链\"><a href=\"#1-3-4-when-也可以用来取代-if-else-if-链\" class=\"headerlink\" title=\"1.3.4 when 也可以用来取代 if - else if 链\"></a>1.3.4 <code>when</code> 也可以用来取代 <code>if - else if</code> 链</h3><p>如果不提供参数，所有的分支条件都是简单的布尔表达式，而当一个分支的条件为真时则执行该分支：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">whenNoParamTest</span><span class=\"params\">(x: String, y: Int)</span> </span>&#123;</span><br><span class=\"line\">    when &#123;</span><br><span class=\"line\">        x.isEmpty() -&gt; println(<span class=\"string\">&quot;x is empty&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// Kotlin 中，使用 str1 == str2，比较的只是字符串的内容，此处返回的是 true</span></span><br><span class=\"line\">        x == <span class=\"string\">&quot;test&quot;</span> -&gt; println(<span class=\"string\">&quot;x&#x27;s text is test&quot;</span>)</span><br><span class=\"line\">        y == -<span class=\"number\">1</span> -&gt; println(<span class=\"string\">&quot;y is -1&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span> -&gt; println(<span class=\"string\">&quot;otherwise&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\">whenNoParamTest(<span class=\"string\">&quot;test&quot;</span>, <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Q：如果上述调用的方法中参数改为<code>whenNoParamTest(&quot;test&quot;, -1)</code>，满足了多项条件，运行结果如何？为什么？<br>A：会执行满足条件了第一个，其他的不被执行。</p>\n</blockquote>\n<h2 id=\"1-4-for-循环\"><a href=\"#1-4-for-循环\" class=\"headerlink\" title=\"1.4 for 循环\"></a>1.4 for 循环</h2><h3 id=\"1-4-1-语法\"><a href=\"#1-4-1-语法\" class=\"headerlink\" title=\"1.4.1 语法\"></a>1.4.1 语法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (item in collection) print(item)</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-2-区间上迭代\"><a href=\"#1-4-2-区间上迭代\" class=\"headerlink\" title=\"1.4.2 区间上迭代\"></a>1.4.2 区间上迭代</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 整型区间</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i in <span class=\"number\">1.</span><span class=\"number\">.4</span>) print(i) <span class=\"comment\">// 输出“1234”</span></span><br><span class=\"line\"><span class=\"comment\">// 倒序迭代数字，步长为2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i in <span class=\"number\">8</span> downTo <span class=\"number\">1</span> step <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    println(i)  <span class=\"comment\">// 换行输出“8642”</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不包括其结束元素的区间</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i in <span class=\"number\">1</span> until <span class=\"number\">10</span>) &#123;   <span class=\"comment\">// i in [1, 10) 排除了 10</span></span><br><span class=\"line\">     println(i)  <span class=\"comment\">// 换行输出“123456789”</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>区间表达式</strong>在后期分享中详细说明。</p>\n</blockquote>\n<h3 id=\"1-4-3-通过索引遍历一个数组或者一个-list\"><a href=\"#1-4-3-通过索引遍历一个数组或者一个-list\" class=\"headerlink\" title=\"1.4.3 通过索引遍历一个数组或者一个 list\"></a>1.4.3 通过索引遍历一个数组或者一个 list</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val array = arrayOf(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i in array.indices) &#123;</span><br><span class=\"line\">    println(array[i])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-5-While-循环\"><a href=\"#1-5-While-循环\" class=\"headerlink\" title=\"1.5 While 循环\"></a>1.5 While 循环</h2><p><code>while</code> 和 <code>do .. while</code> 和其它语言没什么区别</p>\n<h2 id=\"1-6-空安全\"><a href=\"#1-6-空安全\" class=\"headerlink\" title=\"1.6 空安全\"></a>1.6 空安全</h2><p>许多编程语言（包括 Java）中最常见的异常之一，就是访问空引用的成员会导致空引用异常（<code>NullPointerException</code>）。Kotlin 的类型系统旨在消除来自代码空引用的危险。</p>\n<h3 id=\"1-6-1-可空类型与非空类型\"><a href=\"#1-6-1-可空类型与非空类型\" class=\"headerlink\" title=\"1.6.1 可空类型与非空类型\"></a>1.6.1 可空类型与非空类型</h3><p>Kotlin 类型系统区分一个引用可以容纳 <code>null</code> 还是不能容纳，如：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// String 类型的常规变量不能容纳 null</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a: String = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">a = <span class=\"keyword\">null</span> <span class=\"comment\">// 编译错误</span></span><br><span class=\"line\"><span class=\"comment\">// 允许为空，写作 String?</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b: String? = <span class=\"string\">&quot;abc&quot;</span></span><br><span class=\"line\">b = <span class=\"keyword\">null</span> <span class=\"comment\">// ok</span></span><br></pre></td></tr></table></figure><br>调用它的方法或访问它的属性：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val l = a.length <span class=\"comment\">// OK，不会导致 NPE</span></span><br><span class=\"line\">val l = b.length <span class=\"comment\">// 错误：变量“b”可能为空</span></span><br></pre></td></tr></table></figure><br>但是我们还是需要访问该属性，对吧？有几种方式可以做到，请看<strong>1.6.2 安全调用</strong>。</p>\n<h3 id=\"1-6-2-安全调用\"><a href=\"#1-6-2-安全调用\" class=\"headerlink\" title=\"1.6.2 安全调用\"></a>1.6.2 安全调用</h3><h4 id=\"1-6-2-1-在条件中检查-null\"><a href=\"#1-6-2-1-在条件中检查-null\" class=\"headerlink\" title=\"1.6.2.1 在条件中检查 null\"></a>1.6.2.1 在条件中检查 null</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val l = <span class=\"keyword\">if</span> (b != <span class=\"keyword\">null</span>) b.length <span class=\"keyword\">else</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-6-2-2-安全的调用\"><a href=\"#1-6-2-2-安全的调用\" class=\"headerlink\" title=\"1.6.2.2 安全的调用\"></a>1.6.2.2 安全的调用</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">b?.length</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-6-2-3-Elvis-操作符，写作\"><a href=\"#1-6-2-3-Elvis-操作符，写作\" class=\"headerlink\" title=\"1.6.2.3 Elvis 操作符，写作 ?:\"></a>1.6.2.3 Elvis 操作符，写作 <code>?:</code></h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val l = b?.length ?: -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-6-2-4-操作符（非空断言运算符）\"><a href=\"#1-6-2-4-操作符（非空断言运算符）\" class=\"headerlink\" title=\"1.6.2.4 !! 操作符（非空断言运算符）\"></a>1.6.2.4 <code>!!</code> 操作符（非空断言运算符）</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val l = b!!.length</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 如果值为空，就会抛出一个 NPE 异常</p>\n</blockquote>\n<p>另外还有通过<strong>安全的类型转换</strong>或其他方式来避免这些异常的发生，涉及到 Kotlin 的扩展函数，本次暂不做讲解。</p>\n<h2 id=\"1-7-（对-Android-开发而言）不用-findViewById，提高开发效率\"><a href=\"#1-7-（对-Android-开发而言）不用-findViewById，提高开发效率\" class=\"headerlink\" title=\"1.7 （对 Android 开发而言）不用 findViewById，提高开发效率\"></a>1.7 （对 Android 开发而言）不用 <code>findViewById</code>，提高开发效率</h2><p>可以直接使用控件的 id 进行操作，减少原先在 Java 中大量的 <code>findViewById</code> 的代码。<br><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;android.support.v7.widget.RecyclerView</span><br><span class=\"line\">    android:id=&quot;@+id/recyclerView&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;match_parent&quot; /&gt;</span><br></pre></td></tr></table></figure><br>IDE 提示导入类似这个包 <code>import kotlinx.android.synthetic.main.activity_main.*</code>，则可直接使用控件的 id 来操作。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">recyclerView.layoutManager = LinearLayoutManager(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">recyclerView.adapter = mAdapter</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"2-建造者模式\"><a href=\"#2-建造者模式\" class=\"headerlink\" title=\"2. 建造者模式\"></a>2. 建造者模式</h1><h2 id=\"2-1-定义\"><a href=\"#2-1-定义\" class=\"headerlink\" title=\"2.1 定义\"></a>2.1 定义</h2><p>建造者模式(Builder Pattern)：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<h2 id=\"2-2-结构\"><a href=\"#2-2-结构\" class=\"headerlink\" title=\"2.2 结构\"></a>2.2 结构</h2><p>Product：产品角色；<br>Director：指挥者，利用具体建造者创建产品；<br>AbstractBuilder：抽象建造者，定义抽象的建造方法；<br>ConcreteBuilder：具体建造者，实现建造方法；</p>\n<h2 id=\"2-3-Builder-模式的简单实现\"><a href=\"#2-3-Builder-模式的简单实现\" class=\"headerlink\" title=\"2.3 Builder 模式的简单实现\"></a>2.3 Builder 模式的简单实现</h2><p>以手机的组装为例，并把此过程简化为设置机型、设置操作系统、设置屏幕等几个部分，然后通过 Director 和具体的 Builder 来构建手机对象。示例如下：</p>\n<h3 id=\"2-3-1-手机抽象类，即-Product-角色\"><a href=\"#2-3-1-手机抽象类，即-Product-角色\" class=\"headerlink\" title=\"2.3.1 手机抽象类，即 Product 角色\"></a>2.3.1 手机抽象类，即 Product 角色</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mobile</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mBrand: String? = <span class=\"keyword\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mMemory: Int = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mScreen: Float = <span class=\"number\">1f</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">var</span> mOS: String? = <span class=\"keyword\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">setBrand</span><span class=\"params\">(brand: String)</span> </span>&#123;</span><br><span class=\"line\">        mBrand = brand</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">setMemory</span><span class=\"params\">(memory: Int)</span> </span>&#123;</span><br><span class=\"line\">        mMemory = memory</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">setScreen</span><span class=\"params\">(screen: Float)</span> </span>&#123;</span><br><span class=\"line\">        mScreen = screen</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> fun <span class=\"title\">setOS</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    override fun <span class=\"title\">toString</span><span class=\"params\">()</span>: String </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Mobile(mBrand=$mBrand, mMemory=$mMemory, mScreen=$mScreen, mOS=$mOS)&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-2-具体的-Mobile-类，Honor\"><a href=\"#2-3-2-具体的-Mobile-类，Honor\" class=\"headerlink\" title=\"2.3.2 具体的 Mobile 类，Honor\"></a>2.3.2 具体的 Mobile 类，Honor</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">class HonorMobile : Mobile() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">setOS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mOS = <span class=\"string\">&quot;Android 8.0&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-3-抽象-Builder-类\"><a href=\"#2-3-3-抽象-Builder-类\" class=\"headerlink\" title=\"2.3.3 抽象 Builder 类\"></a>2.3.3 抽象 Builder 类</h3><p>定义了5个抽象方法，用于设置产品属性及获取实例<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置品牌</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> fun <span class=\"title\">buildBrand</span><span class=\"params\">(brand: String)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 设置内存</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">abstract</span> fun <span class=\"title\">buildMemory</span><span class=\"params\">(memory: Int)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 设置屏幕</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">abstract</span> fun <span class=\"title\">buildScreen</span><span class=\"params\">(screen: Float)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 设置系统</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">abstract</span> fun <span class=\"title\">buildOS</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"comment\">// 创建 Mobile</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">abstract</span> fun <span class=\"title\">create</span><span class=\"params\">()</span>: Mobile</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-4-具体的-Builder-类\"><a href=\"#2-3-4-具体的-Builder-类\" class=\"headerlink\" title=\"2.3.4 具体的 Builder 类\"></a>2.3.4 具体的 Builder 类</h3><p>HonorBuilder，实现产品的创建<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">class HonorBuilder : Builder() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> val mMobile = HonorMobile()</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">buildBrand</span><span class=\"params\">(brand: String)</span> </span>&#123;</span><br><span class=\"line\">        mMobile.setBrand(brand)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">buildMemory</span><span class=\"params\">(memory: Int)</span> </span>&#123;</span><br><span class=\"line\">        mMobile.setMemory(memory)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">buildScreen</span><span class=\"params\">(screen: Float)</span> </span>&#123;</span><br><span class=\"line\">        mMobile.setScreen(screen)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">buildOS</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mMobile.setOS()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">create</span><span class=\"params\">()</span>: Mobile </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mMobile</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-5-Director-类\"><a href=\"#2-3-5-Director-类\" class=\"headerlink\" title=\"2.3.5 Director 类\"></a>2.3.5 Director 类</h3><p>负责构造 Mobile，通过设置的建造者，创建产品实例<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Director(builder: Builder) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mBuilder: Builder? = <span class=\"keyword\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    init &#123;</span><br><span class=\"line\">        mBuilder = builder</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构建对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">construct</span><span class=\"params\">(brand: String, memory: Int, screen: Float)</span> </span>&#123;</span><br><span class=\"line\">        mBuilder?.buildBrand(brand)</span><br><span class=\"line\">        mBuilder?.buildMemory(memory)</span><br><span class=\"line\">        mBuilder?.buildScreen(screen)</span><br><span class=\"line\">        mBuilder?.buildOS()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-6-具体建造者\"><a href=\"#2-3-6-具体建造者\" class=\"headerlink\" title=\"2.3.6 具体建造者\"></a>2.3.6 具体建造者</h3><p>build，实现产品的创建<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val build = HonorBuilder()</span><br><span class=\"line\">val aDirector: Director = Director(build)</span><br><span class=\"line\">aDirector.construct(<span class=\"string\">&quot;Honor 9&quot;</span>, <span class=\"number\">4</span>, <span class=\"number\">5.15f</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">tvBuild2.setOnClickListener &#123;</span><br><span class=\"line\">    tvRes.text = build.create().toString()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：<br>现实开发中，Director 常会被省略，直接使用 Builder 来进行对象的组装（链式调用）,大致如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">build.buildBrand(<span class=\"string\">&quot;Honor V10&quot;</span>)</span><br><span class=\"line\">build.buildMemory(<span class=\"number\">6</span>)</span><br><span class=\"line\">build.buildScreen(<span class=\"number\">5.99f</span>)</span><br><span class=\"line\">build.buildOS()</span><br><span class=\"line\"></span><br><span class=\"line\">tvBuild2.setOnClickListener &#123;</span><br><span class=\"line\">    tvRes.text = build.create().toString()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>此次分享中的部分内容可能出现的有些突然，不太理解某些类及变量的声明等等，我会汇总大家的意见，在以后的讲解中继续分享。下次讲解关于类、函数、对象相关的知识。</p>\n<p>几点感悟：</p>\n<ul>\n<li>持续学习</li>\n<li>有计划地小结与分享</li>\n</ul>\n","tags":["Android","Kotlin","Design Patterns"]},{"title":"【团队分享】Kotlin 及设计模式实践（四）","url":"/2018/05/02/Android-Kotlin-dp4/","content":"<p>这篇文章搁置了太久，直到今天，还是没有完成。为了发布新文章，反复把这个文档移出，再还原。今天先发布出来，防止丢失，过几天再修改补全文章，不能再拖延啦。</p>\n<span id=\"more\"></span>\n<h1 id=\"2-适配器模式\"><a href=\"#2-适配器模式\" class=\"headerlink\" title=\"2. 适配器模式\"></a>2. 适配器模式</h1><h2 id=\"2-1-定义\"><a href=\"#2-1-定义\" class=\"headerlink\" title=\"2.1 定义\"></a>2.1 定义</h2><p>适配器模式(Adapter Pattern) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p>\n<h2 id=\"2-2-结构\"><a href=\"#2-2-结构\" class=\"headerlink\" title=\"2.2 结构\"></a>2.2 结构</h2><p>适配器模式包含如下角色：</p>\n<ul>\n<li>Target：目标抽象类</li>\n<li>Adapter：适配器类</li>\n<li>Adaptee：适配者类</li>\n<li>Client：客户类</li>\n</ul>\n<p>适配器模式有对象适配器和类适配器两种实现：<br>对象适配器：<br><img src=\"http://p6wpxhpqt.bkt.clouddn.com/img_dp_Adapter.jpg\" alt=\"对象适配器\"><br>类适配器：<br><img src=\"http://p6wpxhpqt.bkt.clouddn.com/img_dp_Adapter_classModel.jpg\" alt=\"类适配器\"></p>\n","tags":["Android","Kotlin","Design Patterns"]},{"title":"【团队分享】Kotlin 及设计模式实践（二）","url":"/2018/03/28/Android-Kotlin-dp2/","content":"<p>上一讲中以建造者模式开始，代码使用了 Kotlin 语言，有些写法可能不太理解，本讲先讲解一些常见的关于类与继承、属性和字段及修饰符等相关的知识，然后分享工厂方法模式的简单实现。</p>\n<span id=\"more\"></span>\n<h1 id=\"1-Kotlin\"><a href=\"#1-Kotlin\" class=\"headerlink\" title=\"1. Kotlin\"></a>1. Kotlin</h1><h2 id=\"1-1-类与继承\"><a href=\"#1-1-类与继承\" class=\"headerlink\" title=\"1.1 类与继承\"></a>1.1 类与继承</h2><h3 id=\"1-1-1-类\"><a href=\"#1-1-1-类\" class=\"headerlink\" title=\"1.1.1 类\"></a>1.1.1 类</h3><p>使用关键字 class 声明类，类声明由类名、类头（指定其类型参数、主构造函数等）以及由花括号包围的类体构成。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Empty</span></span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-1-2-构造函数\"><a href=\"#1-1-2-构造函数\" class=\"headerlink\" title=\"1.1.2 构造函数\"></a>1.1.2 构造函数</h3><p>类可以有一个主构造函数以及多个二级构造函数。主构造函数是类头的一部分：跟在类名后面(可以有可选的类型参数)。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Person constructor(firstName: String) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果主构造函数没有注解或可见性说明，则 <code>constructor</code> 关键字是可以省略</p>\n</blockquote>\n<p>主构造函数不能包含任意代码。初始化代码可以放在以 init 做前缀的初始化块内<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Customer(name: String) &#123;</span><br><span class=\"line\">    init &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Customer initialized with value $&#123;name&#125;&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>声明属性并在主构造函数中初始化,在 Kotlin 中有更简单的语法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Person(val firstName: String, val lastName: String, var age: Int) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>如果构造函数有注解或可见性声明，则 <code>constructor</code> 关键字是不可少的，并且可见性应该在前：<br><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Customer public @inject constructor (name: String) &#123;...&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-1-3-二级构造函数\"><a href=\"#1-1-3-二级构造函数\" class=\"headerlink\" title=\"1.1.3 二级构造函数\"></a>1.1.3 二级构造函数</h3><p>类也可以有二级构造函数，需要加前缀 <code>constructor</code>:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    constructor(parent: Person) &#123;</span><br><span class=\"line\">        parent.children.add(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-1-4-创建类的实例\"><a href=\"#1-1-4-创建类的实例\" class=\"headerlink\" title=\"1.1.4 创建类的实例\"></a>1.1.4 创建类的实例</h3><p>我们可以像使用普通函数那样使用构造函数创建类实例：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val test = Test()</span><br><span class=\"line\">val customer = Customer(<span class=\"string\">&quot;Jobs&quot;</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Kotlin 没有 new 关键字</p>\n</blockquote>\n<h3 id=\"1-1-5-类成员\"><a href=\"#1-1-5-类成员\" class=\"headerlink\" title=\"1.1.5 类成员\"></a>1.1.5 类成员</h3><p>类可以包含：<br>– 构造函数和初始化代码块<br>– 函数<br>– 属性<br>– 内部类<br>– 对象声明</p>\n<h3 id=\"1-1-6-继承\"><a href=\"#1-1-6-继承\" class=\"headerlink\" title=\"1.1.6 继承\"></a>1.1.6 继承</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Example</span> //　隐式继承于 <span class=\"title\">Any</span></span></span><br></pre></td></tr></table></figure>\n<p>声明一个明确的父类，需要在类头后加冒号再加父类<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">open class <span class=\"title\">Base</span><span class=\"params\">(p: Int)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">class <span class=\"title\">Derived</span><span class=\"params\">(p: Int)</span> : <span class=\"title\">Base</span><span class=\"params\">(p)</span></span></span><br></pre></td></tr></table></figure><br>如果类有主构造函数，则基类可以而且是必须在主构造函数中使用参数立即初始化。<br>如果类没有主构造函数，则必须在每一个构造函数中用 super 关键字初始化基类，或者在代理另一个构造函数做这件事。注意在这种情形中不同的二级构造函数可以调用基类不同的构造方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">class MyView : View &#123;</span><br><span class=\"line\">    constructor(ctx: Context) : <span class=\"keyword\">super</span>(ctx) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    constructor(ctx: Context, attrs: AttributeSet) : <span class=\"keyword\">super</span>(ctx,attrs) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-1-7-复写方法\"><a href=\"#1-1-7-复写方法\" class=\"headerlink\" title=\"1.1.7 复写方法\"></a>1.1.7 复写方法</h3><p>kotlin 需要把可以复写的成员都明确注解出来，并且重写它们：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">open <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">open fun <span class=\"title\">v</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">nv</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Derived() : Base() &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">v</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>标记为override的成员是open的，它可以在子类中被复写。如果你不想被重写就要加 final:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">open class <span class=\"title\">AnotherDerived</span><span class=\"params\">()</span> : <span class=\"title\">Base</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> override fun <span class=\"title\">v</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-1-8-复写属性\"><a href=\"#1-1-8-复写属性\" class=\"headerlink\" title=\"1.1.8 复写属性\"></a>1.1.8 复写属性</h3><p>复写属性与复写方法类似<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">open <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">  open val x: Int get &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Bar1 : Foo() &#123;</span><br><span class=\"line\">  override val x: Int = ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-1-9-抽象类\"><a href=\"#1-1-9-抽象类\" class=\"headerlink\" title=\"1.1.9 抽象类\"></a>1.1.9 抽象类</h3><p>一个类或一些成员可能被声明成 abstract 。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">open <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">open fun <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">abstract class Derived : Base() &#123;</span><br><span class=\"line\">    <span class=\"function\">override <span class=\"keyword\">abstract</span> fun <span class=\"title\">f</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"1-2-属性和字段\"><a href=\"#1-2-属性和字段\" class=\"headerlink\" title=\"1.2 属性和字段\"></a>1.2 属性和字段</h2><h3 id=\"1-2-1-属性声明\"><a href=\"#1-2-1-属性声明\" class=\"headerlink\" title=\"1.2.1 属性声明\"></a>1.2.1 属性声明</h3><p>使用 var 关键字声明可变属性，用 val 关键字声明只读属性<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name: String = ...</span><br><span class=\"line\">val result = ...</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-2-2-延迟初始化属性\"><a href=\"#1-2-2-延迟初始化属性\" class=\"headerlink\" title=\"1.2.2 延迟初始化属性\"></a>1.2.2 延迟初始化属性</h3><p>避免非空检查<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTest</span> </span>&#123;</span><br><span class=\"line\">    lateinit <span class=\"keyword\">var</span> subject: TestSubject</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SetUp</span> <span class=\"function\">fun <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        subject = TestSubject()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span> <span class=\"function\">fun <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        subject.method()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"1-3-可见性修饰词\"><a href=\"#1-3-可见性修饰词\" class=\"headerlink\" title=\"1.3 可见性修饰词\"></a>1.3 可见性修饰词</h2><p>类，对象，接口，构造函数，属性以及它们的 setter 方法都可以有可见性修饰词。( getter与对应的属性拥有相同的可见性)。在 Kotlin 中有四种修饰词：<code>private</code>,<code>protected</code>,<code>internal</code>,以及 <code>public</code> 。默认的修饰符是 <code>public</code>。</p>\n<p>…（常见，略）<br>internal —— 模块<br><code>internal</code> 修饰符是指成员的可见性是只在同一个模块中才可见的。</p>\n<h1 id=\"2-工厂方法模式\"><a href=\"#2-工厂方法模式\" class=\"headerlink\" title=\"2. 工厂方法模式\"></a>2. 工厂方法模式</h1><h2 id=\"2-1-定义\"><a href=\"#2-1-定义\" class=\"headerlink\" title=\"2.1 定义\"></a>2.1 定义</h2><p>工厂方法模式（Factory Method Pattern）又称为工厂模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p>\n<h2 id=\"2-2-结构\"><a href=\"#2-2-结构\" class=\"headerlink\" title=\"2.2 结构\"></a>2.2 结构</h2><p>Factory：抽象工厂角色，定义创建实例的抽象方法；<br>ConcreteFactory：具体工厂角色，负责创建特定实例；<br>Product：抽象产品角色，是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；<br>ConcreteProduct：具体产品角色，是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</p>\n<p><img src=\"http://p6wpxhpqt.bkt.clouddn.com/img_dp_FactoryMethod.jpg\" alt=\"工厂方法模式-类图\"></p>\n<h1 id=\"3-简单工厂模式\"><a href=\"#3-简单工厂模式\" class=\"headerlink\" title=\"3. 简单工厂模式\"></a>3. 简单工厂模式</h1><h2 id=\"3-1-定义\"><a href=\"#3-1-定义\" class=\"headerlink\" title=\"3.1 定义\"></a>3.1 定义</h2><p>简单工厂模式（Simple Factory Pattern）：又称为静态工厂方法（Static Factory Method）模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>\n<h2 id=\"3-2-结构\"><a href=\"#3-2-结构\" class=\"headerlink\" title=\"3.2 结构\"></a>3.2 结构</h2><p>Factory：工厂角色，负责实现创建所有实例的内部逻辑；<br>Product：抽象产品角色，是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；<br>ConcreteProduct：具体产品角色，是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。</p>\n<p><img src=\"http://p6wpxhpqt.bkt.clouddn.com/img_dp_SimpleFactory.jpg\" alt=\"简单工厂模式-类图\"></p>\n<h1 id=\"4-工厂模式的实现\"><a href=\"#4-工厂模式的实现\" class=\"headerlink\" title=\"4. 工厂模式的实现\"></a>4. 工厂模式的实现</h1><h2 id=\"4-1-Product\"><a href=\"#4-1-Product\" class=\"headerlink\" title=\"4.1 Product\"></a>4.1 Product</h2><p>定义了抽象产品角色，及抽象方法 print。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> fun <span class=\"title\">print</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-2-ConcreteProductA-与-ConcreteProductB\"><a href=\"#4-2-ConcreteProductA-与-ConcreteProductB\" class=\"headerlink\" title=\"4.2 ConcreteProductA 与 ConcreteProductB\"></a>4.2 ConcreteProductA 与 ConcreteProductB</h2><p>定义了两个具体产品角色，分别实现了 print 方法。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">class ConcreteProductA : Product() &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;print of ConcreteProductA&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConcreteProductB : Product() &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;print of ConcreteProductB&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-3-抽象-Factory\"><a href=\"#4-3-抽象-Factory\" class=\"headerlink\" title=\"4.3 抽象 Factory\"></a>4.3 抽象 Factory</h2><p>定义了抽象工厂角色，及抽象方法 factoryMethod。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Factory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> fun <span class=\"title\">factoryMethod</span><span class=\"params\">()</span>: Product</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-4-ConcreteFactoryA与ConcreteFactoryB\"><a href=\"#4-4-ConcreteFactoryA与ConcreteFactoryB\" class=\"headerlink\" title=\"4.4 ConcreteFactoryA与ConcreteFactoryB\"></a>4.4 ConcreteFactoryA与ConcreteFactoryB</h2><p>定义了两个具体工厂角色，分别实现了 factoryMethod 方法。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">class ConcreteFactoryA : Factory() &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">factoryMethod</span><span class=\"params\">()</span>: Product </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;具体工厂A: create ProductA&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConcreteProductA()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConcreteFactoryB : Factory() &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">factoryMethod</span><span class=\"params\">()</span>: Product </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;具体工厂B: create ProductB&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConcreteProductB()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-5-生产产品\"><a href=\"#4-5-生产产品\" class=\"headerlink\" title=\"4.5 生产产品\"></a>4.5 生产产品</h2><p>不同的具体产品实例，用不同的具体工厂来创建。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> factory1: Factory = ConcreteFactoryA()</span><br><span class=\"line\"><span class=\"keyword\">var</span> product1 = factory1.factoryMethod()</span><br><span class=\"line\">product1.print()</span><br><span class=\"line\"></span><br><span class=\"line\">factory1 = ConcreteFactoryB()</span><br><span class=\"line\">product1 = factory1.factoryMethod()</span><br><span class=\"line\">product1.print()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-6-简单工厂\"><a href=\"#4-6-简单工厂\" class=\"headerlink\" title=\"4.6 简单工厂\"></a>4.6 简单工厂</h2><p>像这样拥有多个工厂的方式称之为多工厂方法模式，当工厂只有一个的时候，则可将其简化。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">createProduct</span><span class=\"params\">(tag: String)</span>: Product? </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> product: Product? = <span class=\"keyword\">null</span></span><br><span class=\"line\">        when (tag) &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;A&quot;</span> -&gt; &#123;</span><br><span class=\"line\">                product = ConcreteProductA()</span><br><span class=\"line\">                println(<span class=\"string\">&quot;create ProductA&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"string\">&quot;B&quot;</span> -&gt; &#123;</span><br><span class=\"line\">                product = ConcreteProductB()</span><br><span class=\"line\">                println(<span class=\"string\">&quot;create ProductB&quot;</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> -&gt; &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> product</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>简单工厂角色，实现了根据传入的参数来创建产品的功能。</p>\n<h2 id=\"4-7-简单工厂生产产品\"><a href=\"#4-7-简单工厂生产产品\" class=\"headerlink\" title=\"4.7 简单工厂生产产品\"></a>4.7 简单工厂生产产品</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val factory = SimpleFactory()</span><br><span class=\"line\"><span class=\"keyword\">var</span> product: Product? = factory.createProduct(<span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (product != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    product.print()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">product = factory.createProduct(<span class=\"string\">&quot;B&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (product != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    product.print()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">product = factory.createProduct(<span class=\"string\">&quot;C&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (product != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    product.print()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里加入了产品对象是否为 null 的判断，当用户传入错误的参数时是不能得到想要的产品的。</p>\n<h2 id=\"4-8-输出结果\"><a href=\"#4-8-输出结果\" class=\"headerlink\" title=\"4.8 输出结果\"></a>4.8 输出结果</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">----------工厂方法模式 start----------</span><br><span class=\"line\">具体工厂A: create ProductA</span><br><span class=\"line\"><span class=\"built_in\">print</span> of ConcreteProductA</span><br><span class=\"line\">具体工厂B: create ProductB</span><br><span class=\"line\"><span class=\"built_in\">print</span> of ConcreteProductB</span><br><span class=\"line\">----------工厂方法模式   end----------</span><br><span class=\"line\">----------简单工厂模式 start----------</span><br><span class=\"line\">create ProductA</span><br><span class=\"line\"><span class=\"built_in\">print</span> of ConcreteProductA</span><br><span class=\"line\">create ProductB</span><br><span class=\"line\"><span class=\"built_in\">print</span> of ConcreteProductB</span><br><span class=\"line\">----------简单工厂模式   end----------</span><br></pre></td></tr></table></figure>\n","tags":["Android","Kotlin","Design Patterns"]},{"title":"【团队分享】Kotlin 及设计模式实践（三）","url":"/2018/04/13/Android-Kotlin-dp3/","content":"<p>本讲的 Kotlin 知识部分主要讲解接口、数据类及常见函数的使用，第二部分讲解抽象工厂模式的简单实现。</p>\n<span id=\"more\"></span>\n<h1 id=\"1-Kotlin\"><a href=\"#1-Kotlin\" class=\"headerlink\" title=\"1. Kotlin\"></a>1. Kotlin</h1><h2 id=\"1-1-接口\"><a href=\"#1-1-接口\" class=\"headerlink\" title=\"1.1 接口\"></a>1.1 接口</h2><p>Kotlin 的接口与 Java 8 类似，既包含抽象方法的声明，也包含实现。与抽象类不同的是，接口无法保存状态。</p>\n<h3 id=\"1-1-1-接口定义\"><a href=\"#1-1-1-接口定义\" class=\"headerlink\" title=\"1.1.1 接口定义\"></a>1.1.1 接口定义</h3><p>使用关键字 <code>interface</code> 来定义接口<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">bar</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    fun <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 可选的方法体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-1-2-实现接口\"><a href=\"#1-1-2-实现接口\" class=\"headerlink\" title=\"1.1.2 实现接口\"></a>1.1.2 实现接口</h3><p>一个类或者对象可以实现一个或多个接口。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">class Child : MyInterface &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-1-3-接口中的属性\"><a href=\"#1-1-3-接口中的属性\" class=\"headerlink\" title=\"1.1.3 接口中的属性\"></a>1.1.3 接口中的属性</h3><p>可以在接口中定义属性。在接口中声明的属性要么是抽象的，要么提供访问器的实现。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyInterface</span> </span>&#123;</span><br><span class=\"line\">    val prop: Int <span class=\"comment\">// 抽象的</span></span><br><span class=\"line\"></span><br><span class=\"line\">    val propertyWithImplementation: String</span><br><span class=\"line\">        get() = <span class=\"string\">&quot;foo&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        print(prop)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Child : MyInterface &#123;</span><br><span class=\"line\">    override val prop: Int = <span class=\"number\">28</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-1-4-解决覆盖冲突\"><a href=\"#1-1-4-解决覆盖冲突\" class=\"headerlink\" title=\"1.1.4 解决覆盖冲突\"></a>1.1.4 解决覆盖冲突</h3><p>实现多个接口时，可能会遇到同一方法继承多个实现的问题。例如<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123; print(<span class=\"string\">&quot;A&quot;</span>) &#125;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">bar</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">interface B </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123; print(<span class=\"string\">&quot;B&quot;</span>) &#125;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123; print(<span class=\"string\">&quot;bar&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C : A &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123; print(<span class=\"string\">&quot;bar&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class D : A, B &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>&lt;A&gt;.foo()</span><br><span class=\"line\">        <span class=\"keyword\">super</span>&lt;B&gt;.foo()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>&lt;B&gt;.bar()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>上例中，接口 A 和 B 都定义了方法 <code>foo()</code> 和 <code>bar()</code>。 两者都实现了 <code>foo()</code>, 但是只有 B 实现了 <code>bar()</code> (<code>bar()</code> 在 A 中没有标记为抽象， 因为<strong>没有方法体时默认为抽象</strong>）。因为 C 是一个实现了 A 的具体类，所以必须要重写 <code>bar()</code> 并实现这个抽象方法。<br>然而，如果我们从 A 和 B 派生 D，我们需要实现我们从多个接口继承的所有方法，并指明 D 应该如何实现它们。这一规则既适用于继承单个实现（<code>bar()</code>）的方法也适用于继承多个实现（<code>foo()</code>）的方法。</p>\n<h2 id=\"1-2-数据类\"><a href=\"#1-2-数据类\" class=\"headerlink\" title=\"1.2 数据类\"></a>1.2 数据类</h2><h3 id=\"1-2-1-定义\"><a href=\"#1-2-1-定义\" class=\"headerlink\" title=\"1.2.1 定义\"></a>1.2.1 定义</h3><p>只保存数据的类，用 data 标注:<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">data class <span class=\"title\">User</span><span class=\"params\">(val name: String, val age: Int)</span></span></span><br></pre></td></tr></table></figure><br>编译器会自动根据主构造函数中声明的所有属性添加如下方法：</p>\n<ul>\n<li><code>equals()</code>/<code>hashCode</code> 函数</li>\n<li><code>toString</code> 格式是 “User(name=john, age=42)”</li>\n<li><a href=\"http://kotlinlang.org/docs/reference/multi-declarations.html\">compontN()functions</a> 对应按声明顺序出现的所有属性</li>\n<li><code>copy()</code> 函数</li>\n</ul>\n<blockquote>\n<p>如果在类中明确声明或从基类继承了这些方法，编译器不会自动生成。</p>\n</blockquote>\n<p>为确保这些生成代码的一致性，并实现有意义的行为，数据类要满足下面的要求：</p>\n<ul>\n<li>注意如果构造函数参数中没有 <code>val</code> 或者 <code>var</code> ，就不会在这些函数中出现；</li>\n<li>主构造函数应该至少有一个参数；</li>\n<li>主构造函数的所有参数必须标注为 <code>val</code> 或者 <code>var</code> ；</li>\n<li>数据类不能是 abstract，open，sealed，或者 inner ；</li>\n<li>从1.1开始数据类可以继承其它类</li>\n<li>在 JVM 中如果构造函数是无参的，则所有的属性必须有默认的值;<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">data class <span class=\"title\">User</span><span class=\"params\">(val name: String = <span class=\"string\">&quot;&quot;</span>, val age: Int = <span class=\"number\">0</span>)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"1-2-2-复制\"><a href=\"#1-2-2-复制\" class=\"headerlink\" title=\"1.2.2 复制\"></a>1.2.2 复制</h3><p>对一些属性做修改但想要其他部分不变。<br>实现（编译器自动添加的 copy 函数）：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">copy</span><span class=\"params\">(name: String = <span class=\"keyword\">this</span>.name, age: Int = <span class=\"keyword\">this</span>.age)</span> </span>= User(name, age)</span><br></pre></td></tr></table></figure><br>使用：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val kotlin = User(name = <span class=\"string\">&quot;kotlin&quot;</span>, age = <span class=\"number\">1</span>)</span><br><span class=\"line\">val olderKotlin = kotlin.copy(age = <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"1-3-函数\"><a href=\"#1-3-函数\" class=\"headerlink\" title=\"1.3 函数\"></a>1.3 函数</h2><h3 id=\"1-3-1-函数声明\"><a href=\"#1-3-1-函数声明\" class=\"headerlink\" title=\"1.3.1 函数声明\"></a>1.3.1 函数声明</h3><p>使用 <code>fun</code> 关键字声明函数：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">sum</span><span class=\"params\">(x: Int)</span>: Int </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * x</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-3-2-函数用法\"><a href=\"#1-3-2-函数用法\" class=\"headerlink\" title=\"1.3.2 函数用法\"></a>1.3.2 函数用法</h3><p>调用函数使用传统的方法：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val result = sum(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-2-1-参数\"><a href=\"#1-3-2-1-参数\" class=\"headerlink\" title=\"1.3.2.1 参数\"></a>1.3.2.1 参数</h4><p>使用 <code>name: type</code> 表示法定义，参数用逗号隔开，每个参数必须有显式类型：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">powerOf</span><span class=\"params\">(x: Int, y: Int)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//……</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-2-2-默认参数\"><a href=\"#1-3-2-2-默认参数\" class=\"headerlink\" title=\"1.3.2.2 默认参数\"></a>1.3.2.2 默认参数</h4><p>函数参数可以有默认值，当省略相应的参数时使用默认值。与其他语言相比，这可以减少重载数量：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">read</span><span class=\"params\">(b: Array&lt;Byte&gt;, off: Int = <span class=\"number\">0</span>, len: Int = b.size)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//……</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>默认值通过类型后面的 = 及给出的值来定义。<br>覆盖方法总是使用与基类型方法相同的默认参数值。 当覆盖一个带有默认参数值的方法时，必须从签名中省略默认参数值：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">open <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">open fun <span class=\"title\">foo</span><span class=\"params\">(i: Int = <span class=\"number\">10</span>)</span> </span>&#123; …… &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class B : A() &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">foo</span><span class=\"params\">(i: Int)</span> </span>&#123; …… &#125;  <span class=\"comment\">// 不能有默认值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>如果一个默认参数在一个无默认值的参数之前，那么该默认值只能通过使用<strong>命名参数</strong>调用该函数来使用：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">foo</span><span class=\"params\">(bar: Int = <span class=\"number\">0</span>, baz: Int)</span> </span>&#123; <span class=\"comment\">/* …… */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo(baz = <span class=\"number\">1</span>) <span class=\"comment\">// 使用默认值 bar = 0</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-2-3-命名参数\"><a href=\"#1-3-2-3-命名参数\" class=\"headerlink\" title=\"1.3.2.3 命名参数\"></a>1.3.2.3 命名参数</h4><p>可以在调用函数时使用命名的函数参数。当一个函数有大量的参数或默认参数时会非常方便。<br>给定以下函数：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">reformat</span><span class=\"params\">(str: String,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             isA: Boolean = <span class=\"keyword\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             isB: Boolean = <span class=\"keyword\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             isC: Boolean = <span class=\"keyword\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             word: Char = <span class=\"string\">&#x27; &#x27;</span>)</span> </span>&#123;</span><br><span class=\"line\">……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>我们可以使用默认参数来调用它：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">reformat(str)</span><br></pre></td></tr></table></figure><br>然而，当使用非默认参数调用它时，该调用看起来就像：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">reformat(str, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>, <span class=\"string\">&#x27;_&#x27;</span>)</span><br></pre></td></tr></table></figure><br>使用命名参数我们可以使代码更具有可读性：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">reformat(str,</span><br><span class=\"line\">    isA = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    isB = <span class=\"keyword\">true</span>,</span><br><span class=\"line\">    isC = <span class=\"keyword\">false</span>,</span><br><span class=\"line\">    word = <span class=\"string\">&#x27;_&#x27;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure><br>并且如果我们不需要所有的参数：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">reformat(str, word = <span class=\"string\">&#x27;_&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-2-4-返回-Unit-的函数\"><a href=\"#1-3-2-4-返回-Unit-的函数\" class=\"headerlink\" title=\"1.3.2.4 返回 Unit 的函数\"></a>1.3.2.4 返回 Unit 的函数</h4><p>如果一个函数不返回任何有用的值，它的返回类型是 <code>Unit</code>。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">printHello</span><span class=\"params\">(name: String?)</span>: Unit </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        println(<span class=\"string\">&quot;Hello $&#123;name&#125;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        println(<span class=\"string\">&quot;Hi there!&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// `return Unit` 或者 `return` 是可选的</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>Unit 返回类型声明也是可选的。上面的代码等同于：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">printHello</span><span class=\"params\">(name: String?)</span> </span>&#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-3-2-5-单表达式函数\"><a href=\"#1-3-2-5-单表达式函数\" class=\"headerlink\" title=\"1.3.2.5 单表达式函数\"></a>1.3.2.5 单表达式函数</h4><p>当函数返回单个表达式时，可以省略花括号并且在 = 符号之后指定代码体即可：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">sum</span><span class=\"params\">(x: Int)</span>: Int </span>= x * <span class=\"number\">2</span></span><br></pre></td></tr></table></figure><br>当返回值类型可由编译器推断时，显式声明返回类型是可选的：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">sum</span><span class=\"params\">(x: Int)</span> </span>= x * <span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"1-3-3-函数作用域\"><a href=\"#1-3-3-函数作用域\" class=\"headerlink\" title=\"1.3.3 函数作用域\"></a>1.3.3 函数作用域</h3><p>在 Kotlin 中函数可以在文件顶层声明，这意味着你不需要像一些语言如 Java、C# 或 Scala 那样创建一个类来保存一个函数。此外除了顶层函数，Kotlin 中函数也可以声明在局部作用域、作为成员函数以及扩展函数。</p>\n<h4 id=\"1-3-3-1-局部函数\"><a href=\"#1-3-3-1-局部函数\" class=\"headerlink\" title=\"1.3.3.1 局部函数\"></a>1.3.3.1 局部函数</h4><p>Kotlin 支持局部函数，即一个函数在另一个函数内部。</p>\n<h4 id=\"1-3-3-2-成员函数\"><a href=\"#1-3-3-2-成员函数\" class=\"headerlink\" title=\"1.3.3.2 成员函数\"></a>1.3.3.2 成员函数</h4><p>成员函数是在类或对象内部定义的函数：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sample</span>() </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">fun <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123; print(<span class=\"string\">&quot;Foo&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>成员函数以点表示法调用：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sample().foo() <span class=\"comment\">// 创建类 Sample 实例并调用 foo</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"2-抽象工厂模式\"><a href=\"#2-抽象工厂模式\" class=\"headerlink\" title=\"2. 抽象工厂模式\"></a>2. 抽象工厂模式</h1><h2 id=\"2-1-定义\"><a href=\"#2-1-定义\" class=\"headerlink\" title=\"2.1 定义\"></a>2.1 定义</h2><p>抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为 Kit 模式，属于对象创建型模式。</p>\n<h2 id=\"2-2-结构\"><a href=\"#2-2-结构\" class=\"headerlink\" title=\"2.2 结构\"></a>2.2 结构</h2><p>AbstractFactory：抽象工厂，定义创建实例的抽象方法；<br>ConcreteFactory：具体工厂，实现具体逻辑；<br>AbstractProduct：抽象产品，定义产品的抽象方法；<br>Product：具体产品，实现具体逻辑；</p>\n<p><img src=\"http://p6wpxhpqt.bkt.clouddn.com/img_dp_AbatractFactory.jpg\" alt=\"抽象工厂模式-类图\"></p>\n<h2 id=\"2-3-抽象工厂模式的简单实现\"><a href=\"#2-3-抽象工厂模式的简单实现\" class=\"headerlink\" title=\"2.3 抽象工厂模式的简单实现\"></a>2.3 抽象工厂模式的简单实现</h2><h3 id=\"2-3-1-AbstractProduct\"><a href=\"#2-3-1-AbstractProduct\" class=\"headerlink\" title=\"2.3.1 AbstractProduct\"></a>2.3.1 AbstractProduct</h3><p>定义两个抽象产品角色，分别有其抽象方法 print。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractProductA</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> fun <span class=\"title\">printA</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">abstract</span> class AbstractProductB </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> fun <span class=\"title\">printB</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-2-ConcreteProduct\"><a href=\"#2-3-2-ConcreteProduct\" class=\"headerlink\" title=\"2.3.2 ConcreteProduct\"></a>2.3.2 ConcreteProduct</h3><p>定义了四个具体产品角色，分别实现了父类对应的 printA 和 printB 方法。</p>\n<p>A1 和 B1 属于同一个产品族的不同产品等级的两种产品，A2 和B2 类似。其中：</p>\n<p>产品等级——同一类产品的产品等级相同，如海尔冰箱、西门子冰箱等；</p>\n<p>产品族——同一家工厂生产的不同产品等级的产品，如海尔冰箱、海尔洗衣机等。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">class ConcreteProductA1 : AbstractProductA() &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">printA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;printA of ConcreteProductA1&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConcreteProductA2 : AbstractProductA() &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">printA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;printA of ConcreteProductA2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConcreteProductB1 : AbstractProductB() &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">printB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;printB of ConcreteProductB1&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConcreteProductB2 : AbstractProductB() &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">printB</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;printB of ConcreteProductB2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-3-AbstractFactory\"><a href=\"#2-3-3-AbstractFactory\" class=\"headerlink\" title=\"2.3.3 AbstractFactory\"></a>2.3.3 AbstractFactory</h3><p>定义抽象工厂角色，及抽象方法<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> fun <span class=\"title\">createProductA</span><span class=\"params\">()</span>: AbstractProductA</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">abstract</span> fun <span class=\"title\">createProductB</span><span class=\"params\">()</span>: AbstractProductB</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-4-ConcreteFactory\"><a href=\"#2-3-4-ConcreteFactory\" class=\"headerlink\" title=\"2.3.4 ConcreteFactory\"></a>2.3.4 ConcreteFactory</h3><p>定义了两个具体工厂角色，分别实现<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">class ConcreteFactory1 : AbstractFactory() &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">createProductA</span><span class=\"params\">()</span>: AbstractProductA </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;create ProductA1&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConcreteProductA1()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">createProductB</span><span class=\"params\">()</span>: AbstractProductB </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;create ProductB1&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConcreteProductB1()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConcreteFactory2 : AbstractFactory() &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">createProductA</span><span class=\"params\">()</span>: AbstractProductA </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;create ProductA2&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConcreteProductA2()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">createProductB</span><span class=\"params\">()</span>: AbstractProductB </span>&#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;create ProductB2&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConcreteProductB2()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-5-AbstractFactoryPattern\"><a href=\"#2-3-5-AbstractFactoryPattern\" class=\"headerlink\" title=\"2.3.5 AbstractFactoryPattern\"></a>2.3.5 AbstractFactoryPattern</h3><p>不同产品族的具体产品实例，用不同的具体工厂来创建。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> factory: AbstractFactory = ConcreteFactory1()</span><br><span class=\"line\"><span class=\"keyword\">var</span> productA = factory.createProductA()</span><br><span class=\"line\"><span class=\"keyword\">var</span> productB = factory.createProductB()</span><br><span class=\"line\">productA.printA()</span><br><span class=\"line\">productB.printB()</span><br><span class=\"line\"></span><br><span class=\"line\">factory = ConcreteFactory2()</span><br><span class=\"line\">productA = factory.createProductA()</span><br><span class=\"line\">productB = factory.createProductB()</span><br><span class=\"line\">productA.printA()</span><br><span class=\"line\">productB.printB()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-3-6-输出结果\"><a href=\"#2-3-6-输出结果\" class=\"headerlink\" title=\"2.3.6 输出结果\"></a>2.3.6 输出结果</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">----------抽象工厂模式 start----------</span><br><span class=\"line\">create ProductA1</span><br><span class=\"line\">create ProductB1</span><br><span class=\"line\">printA of ConcreteProductA1</span><br><span class=\"line\">printB of ConcreteProductB1</span><br><span class=\"line\">create ProductA2</span><br><span class=\"line\">create ProductB2</span><br><span class=\"line\">printA of ConcreteProductA2</span><br><span class=\"line\">printB of ConcreteProductB2</span><br><span class=\"line\">----------抽象工厂模式   end----------</span><br></pre></td></tr></table></figure>\n","tags":["Android","Kotlin","Design Patterns"]},{"title":"Kotlin-单例模式（Singleton Pattern）","url":"/2019/09/01/Android-Kotlin-dp6-singleton/","content":"<h1 id=\"单例模式-Singleton-Pattern\"><a href=\"#单例模式-Singleton-Pattern\" class=\"headerlink\" title=\"单例模式(Singleton Pattern)\"></a>单例模式(Singleton Pattern)</h1><p>单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。单例模式是一种对象创建型模式。</p>\n<span id=\"more\"></span>\n<h2 id=\"单例模式的要点\"><a href=\"#单例模式的要点\" class=\"headerlink\" title=\"单例模式的要点\"></a>单例模式的要点</h2><ul>\n<li>一是某个类只能有一个实例；</li>\n<li>二是它必须自行创建这个实例；</li>\n<li>三是它必须自行向整个系统提供这个实例。</li>\n</ul>\n<h2 id=\"单例模式的几种实现方式\"><a href=\"#单例模式的几种实现方式\" class=\"headerlink\" title=\"单例模式的几种实现方式\"></a>单例模式的几种实现方式</h2><ul>\n<li>饿汉式单例</li>\n<li>懒汉式单例</li>\n<li>线程安全的懒汉式单例</li>\n<li>DCL（double check lock）双重校验锁式单例</li>\n<li>静态内部类单例</li>\n<li>枚举单例</li>\n</ul>\n<h3 id=\"饿汉式单例\"><a href=\"#饿汉式单例\" class=\"headerlink\" title=\"饿汉式单例\"></a>饿汉式单例</h3><p>饿汉式单例模式是实现单例模式比较简单的一种方式，它有个特点就是不管需不需要该单例实例，该实例对象都会被实例化。</p>\n<h4 id=\"Kotlin-实现\"><a href=\"#Kotlin-实现\" class=\"headerlink\" title=\"Kotlin 实现\"></a>Kotlin 实现</h4><p>kotlin 中的饿汉式实现比较简单，只需要定义一个 <code>object 对象表达式</code> 即可，无需手动去设置构造器私有化和提供全局访问点，这一点 Kotlin 编译器全给你做好了。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> Singleton</span><br></pre></td></tr></table></figure>\n<h3 id=\"懒汉式单例\"><a href=\"#懒汉式单例\" class=\"headerlink\" title=\"懒汉式单例\"></a>懒汉式单例</h3><p>这种方式实现了懒加载，但是不是线程安全的，可能在多个线程中创建多个不同的实例。</p>\n<h4 id=\"Kotlin-实现-1\"><a href=\"#Kotlin-实现-1\" class=\"headerlink\" title=\"Kotlin 实现\"></a>Kotlin 实现</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KLazilySingleton</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do some thing&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mInstance: KLazilySingleton? = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> field ?: KLazilySingleton()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>: KLazilySingleton &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> requireNotNull(mInstance)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 Kotlin 中调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    KLazilySingleton.getInstance().doSomething()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程安全的懒汉式单例\"><a href=\"#线程安全的懒汉式单例\" class=\"headerlink\" title=\"线程安全的懒汉式单例\"></a>线程安全的懒汉式单例</h3><p>这种方式具备很好的懒加载，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。</p>\n<h4 id=\"Kotlin-实现-2\"><a href=\"#Kotlin-实现-2\" class=\"headerlink\" title=\"Kotlin 实现\"></a>Kotlin 实现</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KLazilySingleton</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span></span>() : Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do some thing&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mInstance: KLazilySingleton? = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"keyword\">get</span>() &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> field ?: KLazilySingleton()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">        <span class=\"meta\">@Synchronized</span>  <span class=\"comment\">// 添加 synchronized 同步锁</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>: KLazilySingleton &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> requireNotNull(mInstance)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 防止单例对象在反序列化时重新生成对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">readResolve</span><span class=\"params\">()</span></span>: Any &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> KLazilySingleton.getInstance()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 Kotlin 中调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    KLazilySingleton.getInstance().doSomething()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"DCL（double-check-lock）双重校验锁式单例\"><a href=\"#DCL（double-check-lock）双重校验锁式单例\" class=\"headerlink\" title=\"DCL（double check lock）双重校验锁式单例\"></a>DCL（double check lock）双重校验锁式单例</h3><p>我们知道线程安全的单例模式直接是使用 <code>synchronized</code> 同步锁，锁住 <code>getInstance</code> 方法，每一次调用该方法的时候都得获取锁，但是如果这个单例已经被初始化了，其实按道理就不需要申请同步锁了，直接返回这个单例类实例即可。于是就有了 DCL 实现单例方式。这种方式采用双锁机制，安全且在多线程情况下能保持高性能。</p>\n<h4 id=\"Kotlin-实现-3\"><a href=\"#Kotlin-实现-3\" class=\"headerlink\" title=\"Kotlin 实现\"></a>Kotlin 实现</h4><p>在 Kotlin 中有个天然特性可以支持线程安全 DCL 的单例，可以说也是非常非常简单，就仅仅 3 行代码左右，那就是 <code>Companion Object + lazy 属性代理</code>，一起来看下吧。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KLazilyDCLSingleton</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span></span>() : Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do some thing&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">readResolve</span><span class=\"params\">()</span></span>: Any &#123;  <span class=\"comment\">// 防止单例对象在反序列化时重新生成对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 通过 @JvmStatic 注解，使得在 Java 中调用 instance 直接是像调用静态函数一样，</span></span><br><span class=\"line\">        <span class=\"comment\">// 类似 KLazilyDCLSingleton.getInstance()，</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果不加注解，在 Java 中必须这样调用: KLazilyDCLSingleton.Companion.getInstance().</span></span><br><span class=\"line\">        <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">        <span class=\"comment\">// 使用 lazy 属性代理，并指定 LazyThreadSafetyMode 为SYNCHRONIZED 模式保证线程安全</span></span><br><span class=\"line\">        <span class=\"keyword\">val</span> instance: KLazilyDCLSingleton <span class=\"keyword\">by</span> lazy(LazyThreadSafetyMode.SYNCHRONIZED) &#123; KLazilyDCLSingleton() &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在 Kotlin 中调用，直接通过 KLazilyDCLSingleton 类名调用 instance</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    KLazilyDCLSingleton.instance.doSomething()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态内部类单例\"><a href=\"#静态内部类单例\" class=\"headerlink\" title=\"静态内部类单例\"></a>静态内部类单例</h3><p>DCL 虽然在一定程度上能解决资源消耗、多余 <code>synchronized</code> 同步、线程安全等问题，但是某些情况下还会存在 DCL 失效问题，尽管在 JDK1.5 之后通过具体化 volatile 原语来解决 DCL 失效问题，但是它始终并不是优雅一种解决方式，在多线程环境下一般不推荐 DCL 的单例模式。所以引出静态内部类单例实现，这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</p>\n<h4 id=\"Kotlin-实现-4\"><a href=\"#Kotlin-实现-4\" class=\"headerlink\" title=\"Kotlin 实现\"></a>Kotlin 实现</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KOptimizeSingleton</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span></span>() : Serializable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@JvmStatic</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>: KOptimizeSingleton &#123;  <span class=\"comment\">// 全局访问点</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> SingletonHolder.mInstance</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do some thing&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">object</span> SingletonHolder &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> mInstance: KOptimizeSingleton = KOptimizeSingleton()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">readResolve</span><span class=\"params\">()</span></span>: Any &#123;  <span class=\"comment\">// 防止单例对象在反序列化时重新生成对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> SingletonHolder.mInstance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 Kotlin 中调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    KOptimizeSingleton.getInstance().doSomething()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"枚举单例\"><a href=\"#枚举单例\" class=\"headerlink\" title=\"枚举单例\"></a>枚举单例</h3><p>其实细心的小伙伴就会观察到上面例子中我都会去实现 <code>Serializable</code> 接口，并且会去实现 <code>readResolve</code> 方法。这是为了反序列化会重新创建对象而使得原来的单例对象不再唯一。通过序列化一个单例对象将它写入到磁盘中，然后再从磁盘中读取出来，从而可以获得一个新的实例对象，即使构造器是私有的，反序列化会通过其他特殊途径创建单例类的新实例。然而为了让开发者能够控制反序列化，提供一个特殊的钩子方法那就是 <code>readResolve</code> 方法，这样一来我们只需要在 <code>readResolve</code> 直接返回原来的实例即可，就不会创建新的对象。<br>枚举单例实现，就是为了防止反序列化，因为我们都知道枚举类反序列化是不会创建新的对象实例的。 Java的序列化机制对枚举类型做了特殊处理，一般来说在序列枚举类型时，只会存储枚举类的引用和枚举常量名称，反序列化的过程中，这些信息被用来在运行时环境中查找存在的枚举类型对象，枚举类型的序列化机制保证只会查找已经存在的枚举类型实例，而不是创建新的实例。</p>\n<h4 id=\"Kotlin-实现-5\"><a href=\"#Kotlin-实现-5\" class=\"headerlink\" title=\"Kotlin 实现\"></a>Kotlin 实现</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KEnumSingleton</span> </span>&#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doSomeThing</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;do some thing&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 Kotlin 中调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    KEnumSingleton.INSTANCE.doSomeThing()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后补充一点，关于在 Kotlin 中使用单例模式的建议：一般大多数情况情况下直接使用 <code>object对象表达式</code> 即可，因为它比较简单，生成的字节码也相比于静态内部类那种方式要少得多；如果需要懒汉式加载的话还是比较建议使用 Kotlin 中的 <code>by lazy + Compaion Object</code> 那种方式。</p>\n","tags":["Kotlin","Design Patterns"]},{"title":"Kotlin 及设计模式实践（五）","url":"/2019/07/13/Android-Kotlin-dp5/","content":"<p>本讲的 Kotlin 知识部分记录区间/范围、类型检查和转换的简要笔记。</p>\n<span id=\"more\"></span>\n<h1 id=\"Kotlin\"><a href=\"#Kotlin\" class=\"headerlink\" title=\"Kotlin\"></a>Kotlin</h1><h2 id=\"区间-范围（Ranges）\"><a href=\"#区间-范围（Ranges）\" class=\"headerlink\" title=\"区间/范围（Ranges）\"></a>区间/范围（Ranges）</h2><p>range 表达式是通过 rangeTo 函数形成的。rangeTo 函数拥有形如 <code>..</code> 的操作符，该操作符是用 <code>in</code> 和 <code>!in</code> 实现的。 Range 可以对任何可比较的类型做操作，但对整数基本类型是优化过的。</p>\n<h3 id=\"基本写法\"><a href=\"#基本写法\" class=\"headerlink\" title=\"基本写法\"></a>基本写法</h3><ul>\n<li><code>0..100</code> 表示 [0,100]</li>\n<li><code>1 until 100</code> 表示 [0,100)</li>\n<li><code>i in 0..100</code> 判断 i 是否在区间 [0,100] 中</li>\n</ul>\n<h3 id=\"一些实用的函数\"><a href=\"#一些实用的函数\" class=\"headerlink\" title=\"一些实用的函数\"></a>一些实用的函数</h3><ul>\n<li><p><strong>rangeTo()</strong></p>\n<p><code>rangeTo()</code> 函数仅仅是调用 *Range 的构造函数</p>\n</li>\n<li><p><strong>downTo()</strong></p>\n<p>倒序迭代</p>\n</li>\n<li><p><strong>reversed()</strong></p>\n<p>返回反向的级数</p>\n</li>\n<li><p><strong>step()</strong></p>\n<p>使用指定步数的迭代</p>\n</li>\n<li><p><strong>until</strong></p>\n<p>不包括其结束元素的区间</p>\n</li>\n</ul>\n<h3 id=\"使用例子\"><a href=\"#使用例子\" class=\"headerlink\" title=\"使用例子\"></a>使用例子</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Checking if value of comparable is in range. Optimized for number primitives.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.10</span>) println(i)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x <span class=\"keyword\">in</span> <span class=\"number\">1.0</span>.<span class=\"number\">.3</span><span class=\"number\">.0</span>) println(x)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (str <span class=\"keyword\">in</span> <span class=\"string\">&quot;island&quot;</span>..<span class=\"string\">&quot;isle&quot;</span>) println(str)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Iterating over arithmetical progression of numbers. Optimized for number primitives (as indexed for-loop in Java).</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.4</span>) print(i) <span class=\"comment\">// prints &quot;1234&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">4.</span><span class=\"number\">.1</span>) print(i) <span class=\"comment\">// prints nothing</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">4</span> downTo <span class=\"number\">1</span>) print(i) <span class=\"comment\">// prints &quot;4321&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">1.</span><span class=\"number\">.4</span> step <span class=\"number\">2</span>) print(i) <span class=\"comment\">// prints &quot;13&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> (<span class=\"number\">1.</span><span class=\"number\">.4</span>).reversed()) print(i) <span class=\"comment\">// prints &quot;4321&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> (<span class=\"number\">1.</span><span class=\"number\">.4</span>).reversed() step <span class=\"number\">2</span>) print(i) <span class=\"comment\">// prints &quot;42&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> <span class=\"number\">4</span> downTo <span class=\"number\">1</span> step <span class=\"number\">2</span>) print(i) <span class=\"comment\">// prints &quot;42&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> <span class=\"number\">1.0</span>.<span class=\"number\">.2</span><span class=\"number\">.0</span>) print(<span class=\"string\">&quot;<span class=\"variable\">$x</span> &quot;</span>) <span class=\"comment\">// prints &quot;1.0 2.0 &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> <span class=\"number\">1.0</span>.<span class=\"number\">.2</span><span class=\"number\">.0</span> step <span class=\"number\">0.3</span>) print(<span class=\"string\">&quot;<span class=\"variable\">$x</span> &quot;</span>) <span class=\"comment\">// prints &quot;1.0 1.3 1.6 1.9 &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (x <span class=\"keyword\">in</span> <span class=\"number\">2.0</span> downTo <span class=\"number\">1.0</span> step <span class=\"number\">0.3</span>) print(<span class=\"string\">&quot;<span class=\"variable\">$x</span> &quot;</span>) <span class=\"comment\">// prints &quot;2.0 1.7 1.4 1.1 &quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (str <span class=\"keyword\">in</span> <span class=\"string\">&quot;island&quot;</span>..<span class=\"string\">&quot;isle&quot;</span>) println(str) <span class=\"comment\">// error: string range cannot be iterated over</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"类型检查和转换\"><a href=\"#类型检查和转换\" class=\"headerlink\" title=\"类型检查和转换\"></a>类型检查和转换</h2><h3 id=\"is-与-is-操作符\"><a href=\"#is-与-is-操作符\" class=\"headerlink\" title=\"is 与 !is 操作符\"></a><code>is</code> 与 <code>!is</code> 操作符</h3><p>Kotlin 在运行时通过使用 <code>is</code> 操作符或其否定形式 <code>!is</code> 来检查对象是否符合给定类型。</p>\n<p><code>is</code> 运算符类似 Java 中的 <code>instanceof</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;abc&quot;</span> <span class=\"keyword\">instanceof</span> String</span><br></pre></td></tr></table></figure>\n<p><code>is</code> 运算符可以检查对象 A 是否与特定的类型 X 兼容（此对象 A 是 X 类型或者派生于 X 类型），还可以用来检查一个对象（变量）是否属于某数据类型。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (obj <span class=\"keyword\">is</span> String) &#123;</span><br><span class=\"line\">    print(obj.length)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (obj !<span class=\"keyword\">is</span> String) &#123; <span class=\"comment\">// same as !(obj is String)</span></span><br><span class=\"line\">    print(<span class=\"string\">&quot;Not a String&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    print(obj.length)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"智能转换\"><a href=\"#智能转换\" class=\"headerlink\" title=\"智能转换\"></a>智能转换</h3><p>在大多数情况下，不需要在 Kotlin 中使用显式转换操作符，因为编译器跟踪不可变值的 <code>is</code> 检查，并在需要时自动插入（安全的）转换：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x <span class=\"keyword\">is</span> String) &#123;</span><br><span class=\"line\">  print(x.length) <span class=\"comment\">// x 自动转换为字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译器足够聪明，能够知道如果反向检查导致返回，那么该转换是安全的：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x !<span class=\"keyword\">is</span> String) <span class=\"keyword\">return</span></span><br><span class=\"line\">print(x.length) <span class=\"comment\">// x 自动转换为 String</span></span><br></pre></td></tr></table></figure>\n<p>或者在 <code>||</code> 和 <code>&amp;&amp;</code> 的右侧：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// `||` 右侧的 x 自动转换为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x !<span class=\"keyword\">is</span> String || x.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// `&amp;&amp;` 右侧的 x 自动转换为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (x <span class=\"keyword\">is</span> String &amp;&amp; x.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    print(x.length) <span class=\"comment\">// x 自动转换为字符串</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样的转换用于 <code>when 表达式</code> 和 <code>whie 循环</code> 中也一样：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">when</span> (x) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">is</span> <span class=\"built_in\">Int</span> -&gt; print(x + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">is</span> String -&gt; print(x.length + <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">is</span> Array&lt;<span class=\"built_in\">Int</span>&gt; -&gt; print(x.sum())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"“不安全的”转换操作符\"><a href=\"#“不安全的”转换操作符\" class=\"headerlink\" title=\"“不安全的”转换操作符\"></a>“不安全的”转换操作符</h3><p>如果转换是不可能的，转换操作符会抛出一个异常。因此，我们称之为<em>不安全的</em>。 Kotlin 中的不安全转换由中缀操作符 <strong><em>as</em></strong> 完成：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> x: String = y <span class=\"keyword\">as</span> String</span><br></pre></td></tr></table></figure>\n<p>注意，<strong><em>null</em></strong> 不能转换为 <code>String</code> 因该类型不是可空的， 即如果 <code>y</code> 为空，上面的代码会抛出一个异常。 为了匹配 Java 转换语义，我们必须在转换右边有可空类型，就像：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> x: String? = y <span class=\"keyword\">as</span> String?</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"“安全的”（可空）转换操作符\"><a href=\"#“安全的”（可空）转换操作符\" class=\"headerlink\" title=\"“安全的”（可空）转换操作符\"></a>“安全的”（可空）转换操作符</h3><p>为了避免抛出异常，可以使用<em>安全</em>转换操作符 <strong><em>as?</em></strong>，它可以在失败时返回 <strong><em>null</em></strong>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> x: String? = y <span class=\"keyword\">as</span>? String</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>请注意，尽管事实上 <strong><em>as?</em></strong> 的右边是一个非空类型的 <code>String</code>，但是其转换的结果是可空的。</p>\n","tags":["Android","Kotlin","Design Patterns"]},{"title":"Android 发布 Lib 到 JitPack","url":"/2018/03/01/Android-Lib-JitPack/","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><p>转载自 <a href=\"http://www.cnblogs.com/zhaoyanjun/p/5942616.html\">赵彦军博客</a></p>\n<p>最近封装了几个 Android 的  Library，想把它们放到仓库，方便在以后的项目中直接以依赖的方式引用。参考了几个博客，今天这篇博文<strong>总结</strong>和<strong>推荐</strong>一个最简单方便的方式 —— JitPack。<br><span id=\"more\"></span></p>\n<h1 id=\"2-步骤\"><a href=\"#2-步骤\" class=\"headerlink\" title=\"2. 步骤\"></a>2. 步骤</h1><h2 id=\"2-1-在-Android-Studio-里面配置-Jitpack-插件\"><a href=\"#2-1-在-Android-Studio-里面配置-Jitpack-插件\" class=\"headerlink\" title=\"2.1 在 Android Studio 里面配置 Jitpack 插件\"></a>2.1 在 Android Studio 里面配置 Jitpack 插件</h2><p>在项目的根目录下的 build.gradle 文件里面添加</p>\n<ul>\n<li><p>在 dependencies 下面添加</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">classpath <span class=\"string\">&#x27;com.github.dcendents:android-maven-gradle-plugin:1.5&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 repositories 下面添加</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">maven &#123; url <span class=\"string\">&quot;https://jitpack.io&quot;</span> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Ps：在配置 JitPack 插件的时候，需要用到插件的版本号，目前为止最新版是 1.5。<a href=\"https://github.com/dcendents/android-maven-gradle-plugin\">查看最新版本号，插件的 GitHub 仓库</a></p>\n<h2 id=\"2-2-配置-Library-Module-的-build-gradle\"><a href=\"#2-2-配置-Library-Module-的-build-gradle\" class=\"headerlink\" title=\"2.2 配置 Library Module 的 build.gradle\"></a>2.2 配置 Library Module 的 build.gradle</h2><p>在 Library module 的 build.gradle 文件里面添加<br><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;com.github.dcendents.android-maven&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>有的教程说还有这条，加了好像没有被用到 …<br><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">group = <span class=\"string\">&#x27;com.github.YourUsername&#x27;</span>  <span class=\"comment\">//替换成你的 Github 的用户名</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>Sync Now</strong></p>\n<h2 id=\"2-3-将项目提交到-GitHub-上\"><a href=\"#2-3-将项目提交到-GitHub-上\" class=\"headerlink\" title=\"2.3 将项目提交到 GitHub 上\"></a>2.3 将项目提交到 GitHub 上</h2><h2 id=\"2-4-登录-GitHub-发布一个发行版本\"><a href=\"#2-4-登录-GitHub-发布一个发行版本\" class=\"headerlink\" title=\"2.4 登录 GitHub 发布一个发行版本\"></a>2.4 登录 GitHub 发布一个发行版本</h2><p>点击 release -&gt; 点击创建新的 release 版本 -&gt; 书写版本号和 release 信息</p>\n<h2 id=\"2-5-获取引用方式\"><a href=\"#2-5-获取引用方式\" class=\"headerlink\" title=\"2.5 获取引用方式\"></a>2.5 获取引用方式</h2><p>进入 JitPack 网站 <a href=\"https://jitpack.io/\">https://jitpack.io/</a>，输入项目的 GitHub 地址：https: // github . com/ username / repo，点击 Look up，下面就显示出了所有的 release 版本。</p>\n<p>点击 Get it 查看引用方式。</p>\n<p>比如：<br><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&#x27;com.github.username:repo:v1.0.0&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>到此，就结束了，对，就是这么简单。</strong></p>\n","tags":["Android","GitHub","JitPack"]},{"title":"迁移被废弃的 kotlin-android-extensions 插件","url":"/2021/02/03/Android-Migrating-deprecated-kotlin-android-extensions-plugins/","content":"<p>在Kotlin 1.4.20-M2中，JetBrains废弃了Kotlin Android Extensions编译插件。</p>\n<p>在项目中受此影响的功能可能有：</p>\n<ol>\n<li>通过 kotlinx.android.synthetic 获取控件 Id</li>\n<li>@Parcelize</li>\n</ol>\n<p>问题 1 推荐的替代方案是使用 ViewBinding，之前我的项目中已经使用这种方式了。</p>\n<p>问题 2 解决方案：</p>\n<p>添加 kotlin-parcelize 插件</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    ..</span><br><span class=\"line\">    id <span class=\"string\">&#x27;kotlin-parcelize&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后更改旧的 import 语句，将：<code>import kotlinx.android.parcel.Parcelize</code> 改为：<code>import kotlinx.parcelize.Parcelize</code></p>\n<p>例子：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.os.Parcelable</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.parcelize.Parcelize</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Parcelize</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>): Parcelable</span><br></pre></td></tr></table></figure>\n<p>更多详细说明可见：<a href=\"https://weilu.blog.csdn.net/article/details/109557820\">https://weilu.blog.csdn.net/article/details/109557820</a></p>\n","tags":["Android","Kotlin","Gradle"]},{"title":"Android：解决 Mob-ShareSDK v3.7.4 资源冲突问题","url":"/2020/05/31/Android-fix-Mob-res-collided/","content":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>2020.05.29 下午 16 点多突然编译报错，提示资源冲突：</p>\n<p><code>Entry name &#39;res/drawable-xhdpi-v4/ssdk_country_back_arrow.png&#39; collided</code></p>\n<span id=\"more\"></span>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><p>原因是 ShareSdk 和 OneKeyShare 资源冲突，强制指定下使用的 SDK 版本，使用上一个版本。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">MobSDK &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    configurations.all &#123;</span><br><span class=\"line\">        resolutionStrategy.force <span class=\"string\">&#x27;cn.sharesdk:OneKeyShare:3.7.3&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MobSDK 是通过插件的形式接入的： <code>apply plugin: &#39;com.mob.sdk&#39;</code>，最新的编译都用到它的最新版本。希望 Mob 团队早点解决此问题，发布下个版本。</p>\n","tags":["Android","Mob-SDK"]},{"title":"Android-color-argb","url":"/2018/11/27/Android-color-argb/","content":"<p>Android 颜色值透明度，快速查询工具，转载备用。</p>\n<span id=\"more\"></span>\n<h1 id=\"版权声明\"><a href=\"#版权声明\" class=\"headerlink\" title=\"版权声明\"></a>版权声明</h1><p>作者：T9的第三个三角<br>来源：CSDN<br>原文：<a href=\"https://blog.csdn.net/dazhaodai/article/details/55804643\">https://blog.csdn.net/dazhaodai/article/details/55804643</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Android开发，每一个项目都不可避免的运用到不同颜色，设计MM提供的各种颜色的透明度，一般以5%为单位的，例如#ffffff,30%透明度，那么从5%到95%，全记住实在是浪费脑力，而且经常是碰到才各种google，百度，实在是麻烦，还好有万能的stackoverflow。</p>\n<h1 id=\"透明度值\"><a href=\"#透明度值\" class=\"headerlink\" title=\"透明度值\"></a>透明度值</h1><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">100% FF</span><br><span class=\"line\">99% FC</span><br><span class=\"line\">98% FA</span><br><span class=\"line\">97% F7</span><br><span class=\"line\">96% F5</span><br><span class=\"line\">95% F2</span><br><span class=\"line\">94% F0</span><br><span class=\"line\">93% ED</span><br><span class=\"line\">92% EB</span><br><span class=\"line\">91% E8</span><br><span class=\"line\">90% E6</span><br><span class=\"line\">89% E3</span><br><span class=\"line\">88% E0</span><br><span class=\"line\">87% DE</span><br><span class=\"line\">86% DB</span><br><span class=\"line\">85% D9</span><br><span class=\"line\">84% D6</span><br><span class=\"line\">83% D4</span><br><span class=\"line\">82% D1</span><br><span class=\"line\">81% CF</span><br><span class=\"line\">80% CC</span><br><span class=\"line\">79% C9</span><br><span class=\"line\">78% C7</span><br><span class=\"line\">77% C4</span><br><span class=\"line\">76% C2</span><br><span class=\"line\">75% BF</span><br><span class=\"line\">74% BD</span><br><span class=\"line\">73% BA</span><br><span class=\"line\">72% B8</span><br><span class=\"line\">71% B5</span><br><span class=\"line\">70% B3</span><br><span class=\"line\">69% B0</span><br><span class=\"line\">68% AD</span><br><span class=\"line\">67% AB</span><br><span class=\"line\">66% A8</span><br><span class=\"line\">65% A6</span><br><span class=\"line\">64% A3</span><br><span class=\"line\">63% A1</span><br><span class=\"line\">62% 9E</span><br><span class=\"line\">61% 9C</span><br><span class=\"line\">60% 99</span><br><span class=\"line\">59% 96</span><br><span class=\"line\">57% 94</span><br><span class=\"line\">56% 91</span><br><span class=\"line\">56% 8F</span><br><span class=\"line\">55% 8C</span><br><span class=\"line\">54% 8A</span><br><span class=\"line\">53% 87</span><br><span class=\"line\">52% 85</span><br><span class=\"line\">51% 82</span><br><span class=\"line\">50% 80</span><br><span class=\"line\">49% 7D</span><br><span class=\"line\">48% 7A</span><br><span class=\"line\">47% 78</span><br><span class=\"line\">46% 75</span><br><span class=\"line\">45% 73</span><br><span class=\"line\">44% 70</span><br><span class=\"line\">43% 6E</span><br><span class=\"line\">42% 6B</span><br><span class=\"line\">41% 69</span><br><span class=\"line\">40% 66</span><br><span class=\"line\">39% 63</span><br><span class=\"line\">38% 61</span><br><span class=\"line\">37% 5E</span><br><span class=\"line\">36% 5C</span><br><span class=\"line\">35% 59</span><br><span class=\"line\">34% 57</span><br><span class=\"line\">33% 54</span><br><span class=\"line\">32% 52</span><br><span class=\"line\">31% 4F</span><br><span class=\"line\">30% 4D</span><br><span class=\"line\">28% 4A</span><br><span class=\"line\">28% 47</span><br><span class=\"line\">27% 45</span><br><span class=\"line\">26% 42</span><br><span class=\"line\">25% 40</span><br><span class=\"line\">24% 3D</span><br><span class=\"line\">23% 3B</span><br><span class=\"line\">22% 38</span><br><span class=\"line\">21% 36</span><br><span class=\"line\">20% 33</span><br><span class=\"line\">19% 30</span><br><span class=\"line\">18% 2E</span><br><span class=\"line\">17% 2B</span><br><span class=\"line\">16% 29</span><br><span class=\"line\">15% 26</span><br><span class=\"line\">14% 24</span><br><span class=\"line\">13% 21</span><br><span class=\"line\">12% 1F</span><br><span class=\"line\">11% 1C</span><br><span class=\"line\">10% 1A</span><br><span class=\"line\">9% 17</span><br><span class=\"line\">8% 14</span><br><span class=\"line\">7% 12</span><br><span class=\"line\">6% 0F</span><br><span class=\"line\">5% 0D</span><br><span class=\"line\">4% 0A</span><br><span class=\"line\">3% 08</span><br><span class=\"line\">2% 05</span><br><span class=\"line\">1% 03</span><br><span class=\"line\">0% 00</span><br></pre></td></tr></table></figure>\n<p>感谢万能的<a href=\"http://stackoverflow.com/questions/5445085/understanding-colors-in-android-6-characters\">stackoverflow</a></p>\n","tags":["Android","ARGB"]},{"title":"Android：解决 RecyclerView 的 item 复用引起的布局错乱问题","url":"/2018/05/30/Android-fix-rv-item-view-overlap/","content":"<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>列表 item 中有个 View 是在某些情况下显示或隐藏的，在 <code>onBindViewHolder</code> 绑定的时候会根据数据对其处理，<code>View.VISIBLE</code> 和 <code>View.GONE</code> 都有写，看似没有问题。但是快速上下滑动的时候会发生 item 显示错乱：那个需要显示的控件会只显示一半，未完整撑开 item。item 的根布局是 <code>ConstraintLayout</code>。</p>\n<span id=\"more\"></span>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><h2 id=\"思路-1\"><a href=\"#思路-1\" class=\"headerlink\" title=\"思路 1\"></a>思路 1</h2><p><strong>RecyclerView</strong> 复用了前面的控件，如果使用了 <code>View.GONE</code> 把控件隐藏了，当复用的时候却找不到了，所以导致有些 item 不能正常显示。于是，在 bind 开始的时候，先将可能需要根据需要改变状态的控件做一下初始化设置：<code>View.VISIBLE</code>。</p>\n<p>一般地，这么设置后应该能解决问题了。</p>\n<blockquote>\n<p>然而，上面的思路并未解决我遇到的问题，还是一样的存在这个问题。</p>\n</blockquote>\n<h2 id=\"思路-2\"><a href=\"#思路-2\" class=\"headerlink\" title=\"思路 2\"></a>思路 2</h2><p>怀疑可能 item 布局有问题，反复检查了 <code>ConstraintLayout</code> 的控件约束关系，感觉都是正确的。就算存在那个会隐藏的控件的显示与否问题，但它并不影响到依赖它的控件（<code>ConstraintLayout</code>特性之一，某个控件隐藏会被解析为一个点，margin 变为 0，依赖它的控件位置不会错乱）。差点想要放弃了，改用传统的布局 <code>LinearLayout</code> 来进行布局了。改的过程中，发现用下面的方案解决了这个问题。</p>\n<p>在 <code>ConstraintLayout</code> 外层套了一个 <code>FrameLayout</code>，同样的手顺，快速上下滑动列表，不再复现之前的问题了，item 是期待的某些显示某些隐藏，高度自动完整撑开到完全显示的高度。</p>\n<p>我想，这是解决了。根布局是约束布局的情况下，高度未被改变，复用了隐藏某控件的情况下的高度。具体原理有待研究，但是在约束布局外层嵌套一个传统布局，可以做到高度改变的目的。</p>\n<h1 id=\"联想到的另一个可能问题\"><a href=\"#联想到的另一个可能问题\" class=\"headerlink\" title=\"联想到的另一个可能问题\"></a>联想到的另一个可能问题</h1><p>某些需要有单选或多选的列表，在滑动后，也有可能出现状态丢失的问题。以前的开发中遇到过此需求，解决方法是在实体类中增加一个 <code>isCheck</code> 变量，根据 <code>isCheck</code> 的值处理选中状态。</p>\n","tags":["Android","RecyclerView","ConstraintLayout"]},{"title":"Android 开发和调试常用命令","url":"/2019/06/07/Android-dev-common-term/","content":"<h1 id=\"Android-开发和调试常用命令\"><a href=\"#Android-开发和调试常用命令\" class=\"headerlink\" title=\"Android 开发和调试常用命令\"></a>Android 开发和调试常用命令</h1><p>Android 开发和调试中使用到的常用命令。</p>\n<span id=\"more\"></span>\n<h2 id=\"ADB\"><a href=\"#ADB\" class=\"headerlink\" title=\"ADB\"></a>ADB</h2><ul>\n<li><p>安装 APK</p>\n<p><code>adb install xxx.apk</code></p>\n</li>\n<li><p>清除已经安装的APK并安装新的APK</p>\n<p><code>adb install -r xxx.apk</code></p>\n</li>\n<li><p>卸载 APK</p>\n<p><code>adb uninstall [package_name]</code></p>\n</li>\n<li><p>adb pull - 将设备中的文件放到本地</p>\n<p><code>adb pull /sdcard/tmp.txt D:\\</code></p>\n</li>\n<li><p>adb push - 将本地文件放到设备中</p>\n<p><code>adb push D:\\tmp.txt /sdcard</code></p>\n</li>\n<li><p>adb shell screencap - 截屏操作</p>\n<p><code>adb shell screencap -p /sdcard/tmp.png</code></p>\n</li>\n<li><p>adb shell screenrecord - 录屏操作</p>\n<p><code>adb shell screenrecord /sdcard/tmp.mp4</code></p>\n</li>\n<li><p>adb logcat - 查看当前日志信息</p>\n<p><code>用法1：adb logcat -s tag</code></p>\n<p><code>用法2：adb logcat |findstr pname/pid/keyword</code></p>\n</li>\n<li><p>清除指定 APP 的缓存</p>\n<p><code>adb shell pm clear package_name</code></p>\n</li>\n<li><p>输出指定包名 APP 的安装位置</p>\n<p><code>adb shell pm path package_name</code></p>\n</li>\n<li><p>输出手机中所有的包名</p>\n<p><code>adb shell pm list packages</code></p>\n</li>\n<li><p>查看指定包名的内存信息</p>\n<p><code>adb shell dumpsys meminfo package_name</code></p>\n</li>\n</ul>\n<h2 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h2><p>Mac、Linux下是 <code>./gradlew</code>，windows下是 <code>gradlew</code></p>\n<ul>\n<li><p>删除 ProjectName/app 目录下的 build 文件夹</p>\n<p><code>./gradlew clean</code></p>\n</li>\n<li><p>检查依赖并编译打包</p>\n<p><code>./gradlew build</code></p>\n</li>\n<li><p>编译并打 Debug 包</p>\n<p><code>./gradlew assembleDebug</code></p>\n</li>\n<li><p>编译并打 Huawei 的 debug 包，其他类似</p>\n<p><code>./gradlew assembleHuaweiDebug</code></p>\n</li>\n<li><p>编译并打 Release 的包</p>\n<p><code>./gradlew assembleRelease</code></p>\n</li>\n<li><p>编译并打 Huawei 的 Release 包，其他类似</p>\n<p><code>./gradlew assembleHuaweiRelease</code></p>\n</li>\n<li><p>Release 模式打包并安装</p>\n<p><code>./gradlew installRelease</code></p>\n</li>\n<li><p>卸载 Release 模式包</p>\n<p><code>./gradlew uninstallRelease</code></p>\n</li>\n<li><p>指定 Module 打包<br>项目中有许多的可以直接独立运行的 Module，如果在 Gradle 中将签名文件配置好了，那么就不需要普通的手动点击 <code>Generate Signed APK</code>，使用 <code>Terminal</code>更加方便。</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./gradlew :&lt;ModuleName&gt;:assembleRelease</span><br><span class=\"line\">// 示例：</span><br><span class=\"line\">./gradlew :sampleApp:assembleRelease</span><br></pre></td></tr></table></figure>\n<p><code>[error]command not found</code>，通常是因为 gradle 没有加入到<code>PATH</code>中。将<code>gradle</code>改为<code>./gradlew</code>即可。( <code>./</code>表示同级目录）</p>\n</li>\n</ul>\n","tags":["Android","Gradle","ADB"]},{"title":"解决 Android 的 webview 不支持 input type=file 标签","url":"/2019/06/15/Android-fix-web-input-file/","content":"<h1 id=\"解决-Android-的-webview-不支持-input-type-file-标签\"><a href=\"#解决-Android-的-webview-不支持-input-type-file-标签\" class=\"headerlink\" title=\"解决 Android 的 webview 不支持 input type=file 标签\"></a>解决 Android 的 webview 不支持 <code>input type=file</code> 标签</h1><p>项目中遇到 H5 的 <code>input type=&quot;file&quot;</code> 标签在 Android 的 webview 中失效，查了一下是由于安全原因将其屏蔽了。重写 webview 的 WebChromeClient 可以解决。</p>\n<span id=\"more\"></span>\n<h2 id=\"WebView-设置-WebChromeClient\"><a href=\"#WebView-设置-WebChromeClient\" class=\"headerlink\" title=\"WebView 设置 WebChromeClient\"></a>WebView 设置 WebChromeClient</h2><p>重写 WebChromeClient 中关于文件选择的方法，onShowFileChooser 和 openFileChooser。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">mWebView.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// For 3.0+ Devices (Start)</span></span><br><span class=\"line\">    <span class=\"comment\">// onActivityResult attached before constructor</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">openFileChooser</span><span class=\"params\">(ValueCallback uploadMsg, String acceptType)</span> </span>&#123;</span><br><span class=\"line\">        mUploadMessage = uploadMsg;</span><br><span class=\"line\">        Intent i = <span class=\"keyword\">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class=\"line\">        i.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class=\"line\">        i.setType(<span class=\"string\">&quot;image/*&quot;</span>);</span><br><span class=\"line\">        startActivityForResult(Intent.createChooser(i, <span class=\"string\">&quot;File Browser&quot;</span>), FILE_CHOOSER_RESULT_CODE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// For Lollipop 5.0+ Devices</span></span><br><span class=\"line\">    <span class=\"meta\">@TargetApi(Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onShowFileChooser</span><span class=\"params\">(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, FileChooserParams fileChooserParams)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (uploadMessage != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            uploadMessage.onReceiveValue(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            uploadMessage = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        uploadMessage = filePathCallback;</span><br><span class=\"line\">        Intent intent = fileChooserParams.createIntent();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            startActivityForResult(intent, REQUEST_SELECT_FILE);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ActivityNotFoundException e) &#123;</span><br><span class=\"line\">            uploadMessage = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            Toast.makeText(getContext(), <span class=\"string\">&quot;Cannot Open File Chooser&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//For Android 4.1 only</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">openFileChooser</span><span class=\"params\">(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture)</span> </span>&#123;</span><br><span class=\"line\">        mUploadMessage = uploadMsg;</span><br><span class=\"line\">        Intent intent = <span class=\"keyword\">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class=\"line\">        intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class=\"line\">        intent.setType(<span class=\"string\">&quot;image/*&quot;</span>);</span><br><span class=\"line\">        startActivityForResult(Intent.createChooser(intent, <span class=\"string\">&quot;File Browser&quot;</span>), FILE_CHOOSER_RESULT_CODE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">openFileChooser</span><span class=\"params\">(ValueCallback&lt;Uri&gt; uploadMsg)</span> </span>&#123;</span><br><span class=\"line\">        mUploadMessage = uploadMsg;</span><br><span class=\"line\">        Intent i = <span class=\"keyword\">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class=\"line\">        i.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class=\"line\">        i.setType(<span class=\"string\">&quot;image/*&quot;</span>);</span><br><span class=\"line\">        startActivityForResult(Intent.createChooser(i, <span class=\"string\">&quot;File Chooser&quot;</span>), FILE_CHOOSER_RESULT_CODE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择结果的回调\"><a href=\"#选择结果的回调\" class=\"headerlink\" title=\"选择结果的回调\"></a>选择结果的回调</h2><p>在 onActivityResult 中获取对应的选取文件的返回结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (requestCode == REQUEST_SELECT_FILE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (uploadMessage == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            uploadMessage.onReceiveValue(WebChromeClient.FileChooserParams.parseResult(resultCode, data));</span><br><span class=\"line\">            uploadMessage = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (requestCode == FILE_CHOOSER_RESULT_CODE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == mUploadMessage) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Use MainActivity.RESULT_OK if you&#x27;re implementing WebView inside Fragment</span></span><br><span class=\"line\">        <span class=\"comment\">// Use RESULT_OK only if you&#x27;re implementing WebView inside an Activity</span></span><br><span class=\"line\">        Uri result = data == <span class=\"keyword\">null</span> || resultCode != WebActivity.RESULT_OK ? <span class=\"keyword\">null</span> : data.getData();</span><br><span class=\"line\">        mUploadMessage.onReceiveValue(result);</span><br><span class=\"line\">        mUploadMessage = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Toast.makeText(getContext(), <span class=\"string\">&quot;选择图片失败&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以解决 3.1、4.1、5.0 以上的版本的问题。</p>\n","tags":["Android","WebView"]},{"title":"Android 加快编译速度","url":"/2019/10/26/Android-gradle-speedup-build/","content":"<p>加快编译速度，做以下几点配置。</p>\n<span id=\"more\"></span>\n<h2 id=\"开启-gradle-并行编译，开启-daemon，调整-jvm-内存大小\"><a href=\"#开启-gradle-并行编译，开启-daemon，调整-jvm-内存大小\" class=\"headerlink\" title=\"开启 gradle 并行编译，开启 daemon，调整 jvm 内存大小\"></a>开启 gradle 并行编译，开启 daemon，调整 jvm 内存大小</h2><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"># When set to true the Gradle daemon is to run the build.</span><br><span class=\"line\">org.gradle.daemon=<span class=\"literal\">true</span></span><br><span class=\"line\"># Specifies the JVM arguments used for the daemon process.</span><br><span class=\"line\"># The setting is particularly useful for tweaking memory settings.</span><br><span class=\"line\"># Default value: -Xmx10248m -XX:MaxPermSize=256m</span><br><span class=\"line\">org.gradle.jvmargs=-Xmx4096m -<span class=\"attr\">XX:</span>MaxPermSize=<span class=\"number\">1024</span>m -<span class=\"attr\">XX:</span>+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF<span class=\"number\">-8</span></span><br><span class=\"line\"># When configured, Gradle will run in incubating parallel mode.</span><br><span class=\"line\"># This option should only be used with decoupled projects. More details, visit</span><br><span class=\"line\"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects</span><br><span class=\"line\">org.gradle.parallel=<span class=\"literal\">true</span></span><br><span class=\"line\"># Enables new incubating mode that makes Gradle selective when configuring projects.</span><br><span class=\"line\"># Only relevant projects are configured which results in faster builds for large multi-projects.</span><br><span class=\"line\"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:configuration_on_demand</span><br><span class=\"line\">org.gradle.configureondemand=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"开启-gradle-缓存\"><a href=\"#开启-gradle-缓存\" class=\"headerlink\" title=\"开启 gradle 缓存\"></a>开启 gradle 缓存</h2><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">org.gradle.caching=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"启用构建缓存\"><a href=\"#启用构建缓存\" class=\"headerlink\" title=\"启用构建缓存\"></a>启用构建缓存</h2><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 启用并设置「构建缓存」的目录 (使用 `./gradlew cleanBuildCache` 指令清除 cache 内容)</span><br><span class=\"line\">android.enableBuildCache=<span class=\"literal\">true</span></span><br><span class=\"line\">android.buildCacheDir=buildCacheDir/</span><br></pre></td></tr></table></figure>\n<p>Build Cache 默认的存储目录<code>~/.android/build-cache</code>。为了方便管理（如，缓存过多时手动清除），上述配置的第二行就自己指定了缓存的存储目录。</p>\n<p>将缓存目录添加到<code>.gitignore</code>：<br><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">buildCacheDir.lock</span><br><span class=\"line\">buildCacheDir/</span><br></pre></td></tr></table></figure></p>\n<p>关于更多 Build Cache 的内容请参考官方说明：<a href=\"https://developer.android.com/studio/build/build-cache.html\">https://developer.android.com/studio/build/build-cache.html</a><br>如果无法访问请看这里：<a href=\"https://developer.android.google.cn/studio/build/build-cache.html\">https://developer.android.google.cn/studio/build/build-cache.html</a></p>\n<h2 id=\"禁用-PNG-图片优化处理\"><a href=\"#禁用-PNG-图片优化处理\" class=\"headerlink\" title=\"禁用 PNG 图片优化处理\"></a>禁用 PNG 图片优化处理</h2><h3 id=\"在-Root-Project-的-build-gradle-文件中添加下面一个函数-来判断是否是打-debug-包-如下\"><a href=\"#在-Root-Project-的-build-gradle-文件中添加下面一个函数-来判断是否是打-debug-包-如下\" class=\"headerlink\" title=\"在 Root Project 的 build.gradle 文件中添加下面一个函数, 来判断是否是打 debug 包, 如下:\"></a>在 Root Project 的 build.gradle 文件中添加下面一个函数, 来判断是否是打 debug 包, 如下:</h3><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//是否是执行Debug相关task (通用函数, 可供子module调用)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> isDebug() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> taskNames = gradle.startParameter.taskNames</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (tn <span class=\"keyword\">in</span> taskNames) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((tn.contains(<span class=\"string\">&quot;install&quot;</span>) || tn.contains(<span class=\"string\">&quot;assemble&quot;</span>)) &amp;&amp; tn.contains(<span class=\"string\">&quot;Debug&quot;</span>)) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在主-module-的-build-gradle-文件中的-android-块中添加下面配置\"><a href=\"#在主-module-的-build-gradle-文件中的-android-块中添加下面配置\" class=\"headerlink\" title=\"在主 module 的 build.gradle 文件中的 android {} 块中添加下面配置:\"></a>在主 module 的 build.gradle 文件中的 android {} 块中添加下面配置:</h3><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 其他配置省略 ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果是构建debug包, 则禁用 &quot;png cruncher&quot; (默认cruncherEnabled=true, 禁用以加速构建)</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> enableCruncher = &#123; -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !isDebug()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    aaptOptions &#123; <span class=\"comment\">//禁用cruncher, 以加速编译</span></span><br><span class=\"line\">        cruncherEnabled = enableCruncher()</span><br><span class=\"line\">        cruncherProcesses = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Debug-关闭-crunchPng-优化\"><a href=\"#Debug-关闭-crunchPng-优化\" class=\"headerlink\" title=\"Debug 关闭 crunchPng 优化\"></a>Debug 关闭 crunchPng 优化</h3><p>buildTypes 的 debug 中增加<br><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">crunchPngs <span class=\"literal\">false</span> <span class=\"comment\">//关闭crunchPng优化, 以加快构建</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Dex-配置项优化\"><a href=\"#Dex-配置项优化\" class=\"headerlink\" title=\"Dex 配置项优化\"></a>Dex 配置项优化</h2><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 优化编译速度</span></span><br><span class=\"line\"><span class=\"comment\">// 优化`transformClassDexBuilderForDebug`的速度</span></span><br><span class=\"line\">dexOptions &#123;</span><br><span class=\"line\">    dexInProcess <span class=\"literal\">true</span></span><br><span class=\"line\">    preDexLibraries <span class=\"literal\">true</span></span><br><span class=\"line\">    maxProcessCount <span class=\"number\">8</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"开启增量编译\"><a href=\"#开启增量编译\" class=\"headerlink\" title=\"开启增量编译\"></a>开启增量编译</h2><p>compileOptions 中增加<br><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">incremental = <span class=\"literal\">true</span>  <span class=\"comment\">//开启增量编译</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"跳过-Tests-和-Lint-相关的-Task\"><a href=\"#跳过-Tests-和-Lint-相关的-Task\" class=\"headerlink\" title=\"跳过 Tests 和 Lint 相关的 Task\"></a>跳过 Tests 和 Lint 相关的 Task</h2><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//跳过 Lint 和 Test 相关的 task, 以加速编译</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isDebug()) &#123;</span><br><span class=\"line\">    gradle.taskGraph.whenReady &#123;</span><br><span class=\"line\">        tasks.each &#123; task -&gt;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (task.name.contains(<span class=\"string\">&quot;Test&quot;</span>) || task.name.contains(<span class=\"string\">&quot;Lint&quot;</span>)) &#123;</span><br><span class=\"line\">                task.enabled = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Kotlin-相关编译优化\"><a href=\"#Kotlin-相关编译优化\" class=\"headerlink\" title=\"Kotlin 相关编译优化\"></a>Kotlin 相关编译优化</h2><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 开启kotlin的增量和并行编译</span><br><span class=\"line\">kotlin.incremental=<span class=\"literal\">true</span></span><br><span class=\"line\">kotlin.incremental.java=<span class=\"literal\">true</span></span><br><span class=\"line\">kotlin.incremental.js=<span class=\"literal\">true</span></span><br><span class=\"line\">kotlin.caching.enabled=<span class=\"literal\">true</span></span><br><span class=\"line\"># 开启kotlin并行编译</span><br><span class=\"line\">kotlin.parallel.tasks.<span class=\"keyword\">in</span>.project=<span class=\"literal\">true</span></span><br><span class=\"line\"># 优化kapt</span><br><span class=\"line\"># 并行运行kapt1.2.60版本以上支持</span><br><span class=\"line\">kapt.use.worker.api=<span class=\"literal\">true</span></span><br><span class=\"line\"># 增量编译 kapt1.3.30版本以上支持</span><br><span class=\"line\">kapt.incremental.apt=<span class=\"literal\">true</span></span><br><span class=\"line\"># kapt avoiding 如果用kapt依赖的内容没有变化，会完全重用编译内容，省掉`app:kaptGenerateStubsDebugKotlin`的时间</span><br><span class=\"line\">kapt.include.compile.classpath=<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"主-Module-中添加-kapt-闭包\"><a href=\"#主-Module-中添加-kapt-闭包\" class=\"headerlink\" title=\"主 Module 中添加 kapt 闭包\"></a>主 Module 中添加 kapt 闭包</h2><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 优化编译速度 如果有用到kapt添加如下配置</span></span><br><span class=\"line\">kapt &#123;</span><br><span class=\"line\">    useBuildCache = <span class=\"literal\">true</span></span><br><span class=\"line\">    javacOptions &#123;</span><br><span class=\"line\">        option(<span class=\"string\">&quot;-Xmaxerrs&quot;</span>, <span class=\"number\">500</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此便完成了 Gradle 的编译速度的优化，包括 Kotlin 下编译，编译速度应该有一个很大的提升，希望你也可以通过设置提高工作效率。可能还有一些诸如 MultiDex 方面的优化，以后在优化中不断探索。</p>\n","tags":["Android","Kotlin","gradle"]},{"title":"Gradle：修改 .gradle 默认目录","url":"/2021/11/20/Android-gradle-dir/","content":"<p>Gradle：修改 .gradle 默认目录</p>\n<span id=\"more\"></span>\n<p>1、将 <code>C:\\Users\\xxx\\.gradle</code> 的默认目录复制到 <code>D:/目标文件夹/.gradle</code></p>\n<p>2、在 Windows 的环境变量中新建一个环境变量设置（如下），设置完成之后，点击确定，关闭设置窗口，重启计算机。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">变量名：GRADLE_USER_HOME</span><br><span class=\"line\">变量值：D:\\Toolbox\\.gradle</span><br></pre></td></tr></table></figure>\n","tags":["Android","gradle"]},{"title":"Android 自动化脚本多渠道打包","url":"/2019/12/12/Android-gradle-auto-multi-channel-packaging/","content":"<h1 id=\"Android-自动化脚本多渠道打包\"><a href=\"#Android-自动化脚本多渠道打包\" class=\"headerlink\" title=\"Android 自动化脚本多渠道打包\"></a>Android 自动化脚本多渠道打包</h1><h2 id=\"相关的参考技术文档\"><a href=\"#相关的参考技术文档\" class=\"headerlink\" title=\"相关的参考技术文档\"></a>相关的参考技术文档</h2><ul>\n<li><a href=\"https://juejin.im/post/5db037d4f265da4d2b34f557?utm_source\">Android 自动化脚本多渠道加固、打包</a></li>\n<li><a href=\"https://github.com/Tencent/VasDolly\">VasDolly</a></li>\n<li><a href=\"https://github.com/Tencent/VasDolly/blob/master/command/README.md\">VasDolly 命令行说明地址</a></li>\n<li><a href=\"https://github.com/Tencent/VasDolly/wiki/VasDolly%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">VasDolly 实现原理</a></li>\n</ul>\n<h2 id=\"技术方案\"><a href=\"#技术方案\" class=\"headerlink\" title=\"技术方案\"></a>技术方案</h2><ol>\n<li>使用 VasDolly 多渠道打包；</li>\n<li>其他市场直接上架，需要加固的市场让运营的同事手动加固一下。</li>\n</ol>\n<span id=\"more\"></span>\n<h2 id=\"集成-VasDolly\"><a href=\"#集成-VasDolly\" class=\"headerlink\" title=\"集成 VasDolly\"></a>集成 VasDolly</h2><h3 id=\"添加对-VasDolly-Plugin-的依赖\"><a href=\"#添加对-VasDolly-Plugin-的依赖\" class=\"headerlink\" title=\"添加对 VasDolly Plugin 的依赖\"></a>添加对 VasDolly Plugin 的依赖</h3><p>在根工程的 <code>build.gradle</code> 中，添加对打包 Plugin 的依赖：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    classpath <span class=\"string\">&#x27;com.leon.channel:plugin:2.0.3&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用-VasDolly-Plugin\"><a href=\"#引用-VasDolly-Plugin\" class=\"headerlink\" title=\"引用 VasDolly Plugin\"></a>引用 VasDolly Plugin</h3><p>在主 App 工程的 <code>build.gradle</code> 中，添加对 VasDolly Plugin 的引用：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;channel&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"添加对-VasDolly-helper-类库的依赖\"><a href=\"#添加对-VasDolly-helper-类库的依赖\" class=\"headerlink\" title=\"添加对 VasDolly helper 类库的依赖\"></a>添加对 VasDolly helper 类库的依赖</h3><p>在主 App 工程的 <code>build.gradle</code> 中，添加读取渠道信息的 helper 类库依赖：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    api <span class=\"string\">&#x27;com.leon.channel:helper:2.0.3&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下流程可略过，在下面的<strong>自动化脚本多渠道打包</strong>流程中一起操作。</p>\n</blockquote>\n<h3 id=\"配置渠道列表\"><a href=\"#配置渠道列表\" class=\"headerlink\" title=\"配置渠道列表\"></a>配置渠道列表</h3><p>指定渠道文件 <code>channel.txt</code>，一行一个渠道信息。</p>\n<h3 id=\"通过-Gradle-生成多渠道包\"><a href=\"#通过-Gradle-生成多渠道包\" class=\"headerlink\" title=\"通过 Gradle 生成多渠道包\"></a>通过 Gradle 生成多渠道包</h3><p>（略）</p>\n<h3 id=\"通过命令行生成渠道包、读取渠道信息\"><a href=\"#通过命令行生成渠道包、读取渠道信息\" class=\"headerlink\" title=\"通过命令行生成渠道包、读取渠道信息\"></a>通过命令行生成渠道包、读取渠道信息</h3><p>从 <code>V1.0.5</code> 版本开始支持命令行，具体使用文档可参考 <code>command</code> 目录下的 <a href=\"https://github.com/Tencent/VasDolly/blob/master/command/README.md\">README</a>。</p>\n<h4 id=\"读取渠道信息\"><a href=\"#读取渠道信息\" class=\"headerlink\" title=\"读取渠道信息\"></a>读取渠道信息</h4><p>通过 helper 类库中的 <code>ChannelReaderUtil</code> 类读取渠道信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String channel = ChannelReaderUtil.getChannel(getApplicationContext());</span><br></pre></td></tr></table></figure>\n<p>如果没有渠道信息，那么这里返回 <code>null</code>，开发者需要自己判断。</p>\n<blockquote>\n<p>更详细的集成文档和参数说明请查看 VasDolly 文档。</p>\n</blockquote>\n<h2 id=\"自动化脚本多渠道打包\"><a href=\"#自动化脚本多渠道打包\" class=\"headerlink\" title=\"自动化脚本多渠道打包\"></a>自动化脚本多渠道打包</h2><h3 id=\"新增目录结构\"><a href=\"#新增目录结构\" class=\"headerlink\" title=\"新增目录结构\"></a>新增目录结构</h3><p>在项目根目录下新增一个 <code>vasdolly</code> 文件夹，里面包含一下几个文件：</p>\n<ul>\n<li>channel.txt：指定渠道文件，一行一个渠道信息。</li>\n<li>multi-channel.gradle：多渠道打包命令脚本</li>\n<li>VasDolly.jar：命令行工具，可在 VasDolly 仓库中获取。</li>\n<li>README.md：本说明文档，非必须。</li>\n</ul>\n<h3 id=\"编辑-channel-txt\"><a href=\"#编辑-channel-txt\" class=\"headerlink\" title=\"编辑 channel.txt\"></a>编辑 channel.txt</h3><p>添加渠道信息，一行一个，例如：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">official</span><br><span class=\"line\">yingyongbao</span><br><span class=\"line\">huawei</span><br><span class=\"line\">xiaomi</span><br><span class=\"line\">ali</span><br><span class=\"line\">qihoo360</span><br><span class=\"line\">oppo</span><br><span class=\"line\">vivo</span><br></pre></td></tr></table></figure>\n<h3 id=\"multi-channel-gradle\"><a href=\"#multi-channel-gradle\" class=\"headerlink\" title=\"multi-channel.gradle\"></a>multi-channel.gradle</h3><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">ext &#123;</span><br><span class=\"line\">    jarPath = <span class=\"string\">&quot;$&#123;project.rootDir&#125;/vasdolly/VasDolly.jar&quot;</span></span><br><span class=\"line\">    channelsPath = <span class=\"string\">&quot;$&#123;project.rootDir&#125;/vasdolly/channel.txt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 从 app/build 文件夹中找出 release 文件</span></span><br><span class=\"line\"><span class=\"comment\">     * 只能匹配出以 apk 结尾并且包含 release 字符串的 apk 文件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    findReleaseApkPath = &#123; String appBuildOutputPath -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> appBuildOutput = <span class=\"keyword\">new</span> File(appBuildOutputPath)</span><br><span class=\"line\">        <span class=\"keyword\">def</span> apkFile = <span class=\"literal\">null</span></span><br><span class=\"line\">        appBuildOutput.eachFile &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it.name.endsWith(<span class=\"string\">&quot;.apk&quot;</span>) &amp;&amp; it.name.contains(<span class=\"string\">&quot;release&quot;</span>)) &#123;</span><br><span class=\"line\">                apkFile = it</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> apkFile</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 多渠道打包</span></span><br><span class=\"line\"><span class=\"comment\">     * apk -&gt; 原有 release 包的文件</span></span><br><span class=\"line\"><span class=\"comment\">     * outputPath -&gt; 多渠道打包后文件输出路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    buildMultipleChannels = &#123; File apk, File outputPath -&gt;</span><br><span class=\"line\">        println(outputPath)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (apk == <span class=\"literal\">null</span> || !apk.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> FileNotFoundException(<span class=\"string\">&quot;没有找到 APK 文件&quot;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!outputPath.exists()) &#123;</span><br><span class=\"line\">            outputPath.mkdirs()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">def</span> cmd = <span class=\"string\">&quot;java -jar $&#123;jarPath&#125; put -c $&#123;channelsPath&#125; $&#123;apk&#125; $&#123;outputPath&#125;&quot;</span></span><br><span class=\"line\">        println cmd</span><br><span class=\"line\">        cmd.execute().waitForProcessOutput(System.out, System.err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"app-的-build-gradle-中添加\"><a href=\"#app-的-build-gradle-中添加\" class=\"headerlink\" title=\"app 的 build.gradle 中添加\"></a>app 的 build.gradle 中添加</h3><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">from:</span> <span class=\"string\">&quot;../vasdolly/multi-channel.gradle&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 开启多渠道打包的任务</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个任务会依赖 assembleRelease 打出来的 apk 包</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">task assembleMultiChannelRelease() &#123;</span><br><span class=\"line\">    group <span class=\"string\">&#x27;multipleChannels&#x27;</span></span><br><span class=\"line\">    dependsOn(<span class=\"string\">&#x27;assembleRelease&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    doLast &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 路径根据你的项目实际情况改变，不一定都是 app，比如多 module 的项目</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> appBuildOutputPath = <span class=\"string\">&quot;$&#123;project.rootDir&#125;/app/build/outputs/apk/release/&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> outputChannelsFilePath = appBuildOutputPath + <span class=\"string\">&quot;channels/&quot;</span></span><br><span class=\"line\">        buildMultipleChannels(findReleaseApkPath(appBuildOutputPath), <span class=\"keyword\">new</span> File(outputChannelsFilePath))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>任务名 <code>assembleMultiChannelRelease</code> 和 apk 输出路径 <code>appBuildOutputPath</code> 可根据项目的实际情况改变，以避免在 <strong>多 module / 多 productFlavors</strong> 情况下出现的路径错误和冲突。</p>\n<h3 id=\"代码中获取渠道名称\"><a href=\"#代码中获取渠道名称\" class=\"headerlink\" title=\"代码中获取渠道名称\"></a>代码中获取渠道名称</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getChannelName</span><span class=\"params\">(ctx: <span class=\"type\">Activity</span>)</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        ChannelReaderUtil.getChannel(ctx.application)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">        e.printStackTrace()</span><br><span class=\"line\">        <span class=\"string\">&quot;official&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编译打包\"><a href=\"#编译打包\" class=\"headerlink\" title=\"编译打包\"></a>编译打包</h3><p>最终我们执行 <code>./gradlew assembleMultiChannelRelease</code></p>\n<p>记得打包前 clean：<code>./gradlew clean</code>。</p>\n<p>查看结果，在目标文件夹下即可找到生成的多渠道包。</p>\n<p>至此便完成了<strong>自动化脚本多渠道打包</strong>的功能，通过一个命令即可快速生成多渠道包。</p>\n","tags":["Android","gradle","VasDolly"]},{"title":"Android 端-华为云存储的集成与使用","url":"/2019/03/13/Android-huawei-cloud-storage-use/","content":"<p>Android 端-华为云存储的集成与使用</p>\n<span id=\"more\"></span>\n<h1 id=\"1-创建应用\"><a href=\"#1-创建应用\" class=\"headerlink\" title=\"1. 创建应用\"></a>1. 创建应用</h1><p>申请账号，创建应用，获得所需的 ak、sk 等相关 Key。</p>\n<h1 id=\"2-Android-端集成\"><a href=\"#2-Android-端集成\" class=\"headerlink\" title=\"2. Android 端集成\"></a>2. Android 端集成</h1><h2 id=\"2-1-UseCase-类\"><a href=\"#2-1-UseCase-类\" class=\"headerlink\" title=\"2.1 UseCase 类\"></a>2.1 UseCase 类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xxx.commonsdk.huawei;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> dagger.internal.Preconditions;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.reactivex.Observable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.reactivex.android.schedulers.AndroidSchedulers;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.reactivex.disposables.CompositeDisposable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.reactivex.disposables.Disposable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.reactivex.functions.Action;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.reactivex.functions.Consumer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.reactivex.schedulers.Schedulers;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseCase</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">Params</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> CompositeDisposable disposables;</span><br><span class=\"line\"></span><br><span class=\"line\">    UseCase() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.disposables = <span class=\"keyword\">new</span> CompositeDisposable();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Observable&lt;T&gt; <span class=\"title\">buildUseCaseObservable</span><span class=\"params\">(Params params)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Consumer&lt;? <span class=\"keyword\">super</span> T&gt; onNext, Consumer&lt;? <span class=\"keyword\">super</span> Throwable&gt; onError,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        Action onComplete, Params params)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Observable&lt;T&gt; observable = <span class=\"keyword\">this</span>.buildUseCaseObservable(params)</span><br><span class=\"line\">                .subscribeOn(Schedulers.io())</span><br><span class=\"line\">                .observeOn(AndroidSchedulers.mainThread());</span><br><span class=\"line\">        addDisposable(observable.subscribe(onNext, onError, onComplete));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispose</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!disposables.isDisposed()) &#123;</span><br><span class=\"line\">            disposables.dispose();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addDisposable</span><span class=\"params\">(Disposable disposable)</span> </span>&#123;</span><br><span class=\"line\">        Preconditions.checkNotNull(disposable);</span><br><span class=\"line\">        Preconditions.checkNotNull(disposables);</span><br><span class=\"line\">        disposables.add(disposable);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-2-文件上传类\"><a href=\"#2-2-文件上传类\" class=\"headerlink\" title=\"2.2 文件上传类\"></a>2.2 文件上传类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.xxx.commonsdk.huawei;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.obs.services.ObsClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.obs.services.model.PutObjectRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.obs.services.model.PutObjectResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.vea.atoms.mvp.commonsdk.http.Api;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.reactivex.Observable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> timber.log.Timber;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.inject.Inject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadFile</span> <span class=\"keyword\">extends</span> <span class=\"title\">UseCase</span>&lt;<span class=\"title\">PutObjectResult</span>, <span class=\"title\">UploadFile</span>.<span class=\"title\">Param</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ObsClient obsClient;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    UploadFile(ObsClient obsClient) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.obsClient = obsClient;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\">Observable&lt;PutObjectResult&gt; <span class=\"title\">buildUseCaseObservable</span><span class=\"params\">(Param param)</span> </span>&#123;</span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(param.getPath());</span><br><span class=\"line\">        PutObjectRequest request = <span class=\"keyword\">new</span> PutObjectRequest(Api.bucketName, file.getName());</span><br><span class=\"line\">        request.setFile(file);</span><br><span class=\"line\">        request.setProgressListener(status -&gt; &#123;</span><br><span class=\"line\">            Timber.i(<span class=\"string\">&quot;AverageSpeed:%s&quot;</span>, status.getAverageSpeed());</span><br><span class=\"line\">            Timber.i(<span class=\"string\">&quot;TransferPercentage:%s&quot;</span>, status.getTransferPercentage());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Observable.create(emitter -&gt; &#123;</span><br><span class=\"line\">            PutObjectResult result = obsClient.putObject(request);</span><br><span class=\"line\">            emitter.onNext(result);</span><br><span class=\"line\">            emitter.onComplete();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Param</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Param</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.path = path;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String path;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> path;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPath</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.path = path;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-初始化\"><a href=\"#2-3-初始化\" class=\"headerlink\" title=\"2.3 初始化\"></a>2.3 初始化</h1><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ActivityScope</span></span><br><span class=\"line\"><span class=\"meta\">@Provides</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> ObsClient <span class=\"title\">provideObsClient</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ObsConfiguration config = <span class=\"keyword\">new</span> ObsConfiguration();</span><br><span class=\"line\">    config.setSocketTimeout(<span class=\"number\">30000</span>);</span><br><span class=\"line\">    config.setConnectionTimeout(<span class=\"number\">10000</span>);</span><br><span class=\"line\">    config.setEndPoint(Api.endPoint);</span><br><span class=\"line\">    ObsClient obsClient = <span class=\"keyword\">new</span> ObsClient(Api.ak, Api.sk, config);</span><br><span class=\"line\">    ObsBucket obsBucket = <span class=\"keyword\">new</span> ObsBucket();</span><br><span class=\"line\">    obsBucket.setBucketName(Api.bucketName);</span><br><span class=\"line\">    <span class=\"comment\">// 设置日志的级别。默认为LogConfigurator.WARN</span></span><br><span class=\"line\">    LogConfigurator.setLogLevel(LogConfigurator.DEBUG);</span><br><span class=\"line\">    <span class=\"comment\">// 设置保留日志文件的个数。默认为10</span></span><br><span class=\"line\">    LogConfigurator.setLogFileRolloverCount(<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置每个日志文件的大小，单位:字节。默认为不限制</span></span><br><span class=\"line\">    LogConfigurator.setLogFileSize(<span class=\"number\">1024</span> * <span class=\"number\">1024</span> * <span class=\"number\">10</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置日志文件存放的目录。默认存放在SD卡的logs目录下</span></span><br><span class=\"line\">    LogConfigurator.setLogFileDir(Environment.getExternalStorageDirectory().getAbsolutePath());</span><br><span class=\"line\">    <span class=\"comment\">// 开启日志</span></span><br><span class=\"line\">    LogConfigurator.enableLog();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obsClient;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>华为云存储相关 Key<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 华为云存储相关 Key</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">String endPoint = <span class=\"string\">&quot;https://url&quot;</span>;</span><br><span class=\"line\">String ak = <span class=\"string\">&quot;AKAKAKAKAKAKAKAK&quot;</span>;</span><br><span class=\"line\">String sk = <span class=\"string\">&quot;sksksksksksksksksksksksksksk&quot;</span>;</span><br><span class=\"line\">String bucketName = <span class=\"string\">&quot;bucketName-resource-1&quot;</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-4-使用\"><a href=\"#2-4-使用\" class=\"headerlink\" title=\"2.4 使用\"></a>2.4 使用</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadAvatar</span><span class=\"params\">(String path)</span> </span>&#123;</span><br><span class=\"line\">    uploadFile.execute(o -&gt; &#123;</span><br><span class=\"line\">        <span class=\"comment\">//o 为： PutObjectResult</span></span><br><span class=\"line\">        <span class=\"comment\">// o.getObjectUrl() 为上传后的文件名，继续后续的操作，如提交到服务器等</span></span><br><span class=\"line\">        editUser(<span class=\"string\">&quot;&quot;</span>, o.getObjectUrl());</span><br><span class=\"line\">    &#125;, Throwable::printStackTrace, () -&gt; &#123;</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">new</span> UploadFile.Param(path));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>感觉华为云存储文档不是太好，当时做的时候遇到了许多坑，还请教了别人。做个记录，以备参考使用。</p>\n"},{"title":"2018 年 8 月 Android 面试总结（亲历）","url":"/2018/08/18/Android-interview-201808/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在这个酷热的 8 月，笔者经历了一次找工作。整理一下遇到的一些面试题，由于记忆比较零散，有一些也忘记了，这里记录其中的两家的面试题，各家问的有重复的问题，就不一一列举了。</p>\n<blockquote>\n<p>相关题目的答案会在后期逐渐完善</p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h1><h2 id=\"丁香园-丁香医生高级-Android-开发面经（2018-07-31）\"><a href=\"#丁香园-丁香医生高级-Android-开发面经（2018-07-31）\" class=\"headerlink\" title=\"丁香园-丁香医生高级 Android 开发面经（2018.07.31）\"></a>丁香园-丁香医生高级 Android 开发面经（2018.07.31）</h2><ul>\n<li><p>自我介绍，之前项目介绍</p>\n</li>\n<li><p>离职原因</p>\n</li>\n<li><p>kotlin语言</p>\n</li>\n<li><p>Kotlin语言的好处<br>Kotlin编译为JVM字节码或JavaScript<br>Kotlin程序可以使用所有现有的Java框架和库<br>Kotlin可以轻松学习，平易近人。<br>Kotlin是开放源码，没有收费。<br>Kotlin的空安全性很好<br>代码审查不是问题</p>\n</li>\n<li><p>kotlin 高阶函数</p>\n</li>\n<li><p>kotlin 中的 when，when 在什么情况可以省略 else 分支，什么情况不可缺少？<br>when 取代了类 C 语言的 switch 操作符。when会对所有的分支进行检查直到有一个条件满足。when 可以用做表达式或声明。如果有分支可以用同样的方式处理的话，分支条件可以连在一起。when 也可以用来取代 if - else if 链。<br>如果把 when 做为表达式的话 else 分支是强制的，除非编译器可以证明分支条件已经覆盖所有可能性。</p>\n</li>\n<li><p>kotlin 的 Anko 库，为什么推出？<br>Anko是JetBrains开发的一个强大的库。它主要的目的是用来替代以前XML的方式来使用代码生成UI布局。Anko包含了很多的非常有帮助的函数和属性来避免让你写很多的模版代码。通过查看Anko源码学习kotlin语言是一种不错的方法。Anko能帮助我们简化代码，比如，实例化Intent，Activity之间的跳转，Fragment的创建，数据库的访问，Alert的创建等等。</p>\n</li>\n<li><p>kotlin 不用 findViewById，直接用控件 Id 做操作的内部原理<br><a href=\"https://blog.csdn.net/hust_twj/article/details/80290362\">https://blog.csdn.net/hust_twj/article/details/80290362</a></p>\n</li>\n<li><p>Retrofit 优点、涉及到的设计模式<br>概念：Retrofit是一个基于RESTful的HTTP网络请求框架的封装，其中网络请求的本质是由OKHttp完成的，而Retrofit仅仅负责网络请求接口的封装。<br>原理：App应用程序通过Retrofit请求网络，实际上是使用Retrofit接口层封装请求参数，Header、URL等信息，之后由OKHttp完成后续的请求，在服务器返回数据之后，OKHttp将原始的结果交给Retrofit，最后根据用户的需求对结果进行解析。<br>涉及到的设计模式：建造者模式、工厂方法模式、代理模式、外观模式、策略模式、单例模式、装饰器模式、适配器模式，责任链模式、装饰器模式的不同</p>\n</li>\n<li><p>Retrofit 提供了哪些拦截器</p>\n</li>\n<li><p>OkHttp 请求网络的原理（源码）<br>进行通信的原理主要是通过dispatcher不断从requestQueue中取出请求call，根据是否已经缓存调用Cache或NetWork这两类数据获取接口之一，从内存缓存或者服务器中获取请求的数据。分为同步和异步请求，同步请求通过call.execute()直接返回当前的response，而异步请求会将当前的call.enqueue添加到请求队列中，通过回调的方式来获取最后的结果。</p>\n</li>\n<li><p>哪些途径关注最新技术动态</p>\n</li>\n<li><p>组件化，以及你认为的组件化的应用场景</p>\n</li>\n<li><p>热更新</p>\n</li>\n<li><p>AIDL（了解）<br>AIDL是一个缩写，全称是Android Interface Definition Language，也就是Android接口定义语言。<br>为了实现进程间通信，尤其是在涉及多进程并发情况下的进程间通信。</p>\n</li>\n</ul>\n<ul>\n<li><p>GC算法（懵13，复习了四种引用，却略过了 GC 机制）<br>标记/清除算法<br>复制算法<br>标记/整理算法<br>分代收集算法</p>\n</li>\n<li><p>View 事件分发，涉及到的设计模式（责任链模式）<br>当一个事件点击后，系统需要将这个事件传递给一个具体的View去处理，这个事件的传递过程就是分发过程。<br>事件分发的顺序<br>即 事件传递的顺序：Activity -&gt; ViewGroup -&gt; View<br>事件分发由三个方法协作完成：<br>  dispatchTouchEvent() :分发（传递）点击事件<br>  onInterceptTouchEvent():判断是否拦截了某个事件(只存在于ViewGroup；普通的View是没有该方法)<br>  onTouchEvent():处理点击事件<br><a href=\"https://www.jianshu.com/p/38015afcdb58\">https://www.jianshu.com/p/38015afcdb58</a><br><a href=\"https://blog.csdn.net/qq_30379689/article/details/73698192\">https://blog.csdn.net/qq_30379689/article/details/73698192</a></p>\n</li>\n<li><p>Handler 相关知识点，理解，为什么不能在子线程更新 UI 等</p>\n</li>\n<li><p>RxJava，线程调度<br>subscribeOn 用于指定 subscribe() 时所发生的线程，从源码角度可以看出，内部线程调度是通过 ObservableSubscribeOn来实现的。<br>ObservableSubscribeOn 的核心源码在 subscribeActual 方法中，通过代理的方式使用 SubscribeOnObserver 包装 Observer 后，设置 Disposable 来将 subscribe 切换到 Scheduler 线程中。<br>observeOn 方法用于指定下游 Observer 回调发生的线程。</p>\n</li>\n<li><p>EventBus</p>\n</li>\n<li><p>路由（讲了我用过的协议跳转；了解阿里的 arouter，大概说了下，可能说的不太对）</p>\n</li>\n<li><p>Dagger2 依赖注入<br>一款基于Java注解来实现的完全在编译阶段完成依赖注入的开源库，主要用于模块间解耦、提高代码的健壮性和可维护性。</p>\n</li>\n<li><p>内存优化，怎么分析</p>\n</li>\n<li><p>性能优化，一个原生 App 界面卡顿，可能的原因（掉帧）</p>\n</li>\n<li><p>CPU、GPU、屏幕</p>\n</li>\n<li><p>熟悉 groovy 吗？写一个批量将…（忘了）。回答的是AS 的 gradle 配置使用的语言，写那个不会。。</p>\n</li>\n<li><p>Java 多态</p>\n</li>\n</ul>\n<p>还有个别几个问题，忘了。</p>\n<h2 id=\"目前接受-Offer-的公司\"><a href=\"#目前接受-Offer-的公司\" class=\"headerlink\" title=\"目前接受 Offer 的公司\"></a>目前接受 Offer 的公司</h2><h3 id=\"1-电面（半小时）\"><a href=\"#1-电面（半小时）\" class=\"headerlink\" title=\"1. 电面（半小时）\"></a>1. 电面（半小时）</h3><ul>\n<li><p>ArrayList 和 LinkedList</p>\n</li>\n<li><p>数组和链表区别<br><a href=\"https://blog.csdn.net/melody_day/article/details/53517550\">https://blog.csdn.net/melody_day/article/details/53517550</a></p>\n</li>\n<li><p>service保活</p>\n</li>\n<li><p>同一手机上安装不同版本的apk</p>\n</li>\n<li><p>组件化<br>（1）概念：<br>组件化：是将一个APP分成多个module，每个module都是一个组件，也可以是一个基础库供组件依赖，开发中可以单独调试部分组件，组件中不需要相互依赖但是可以相互调用，最终发布的时候所有组件以lib的形式被主APP工程依赖打包成一个apk。<br>（2）由来：<br>1、    APP版本迭代，新功能不断增加，业务变得复杂，维护成本高<br>2、    业务耦合度高，代码臃肿，团队内部多人协作开发困难<br>3、    Android编译代码卡顿，单一工程下代码耦合严重，修改一处需要重新编译打包，耗时耗力。<br>4、    方便单元测试，单独改一个业务模块，不需要着重关注其他模块。</p>\n</li>\n<li><p>路由</p>\n</li>\n</ul>\n<h3 id=\"2-笔试（半小时）\"><a href=\"#2-笔试（半小时）\" class=\"headerlink\" title=\"2. 笔试（半小时）\"></a>2. 笔试（半小时）</h3><ul>\n<li><p>斐波那切数列（黄金分割数列）算法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fib</span> <span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        c = a + b;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">        b = c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>熟悉的三种算法，用代码或语言描述其中一种<br>冒泡排序、快速排序、选择排序、插入排序等<br>冒泡排序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123; <span class=\"comment\">// 外层循环控制排序趟数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> - i; j++) &#123; <span class=\"comment\">// 内层循环控制每一趟排序多少次</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[j];</span><br><span class=\"line\">            arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Activity 生命周期</p>\n</li>\n<li><p>Activity 任务栈和使用方法</p>\n</li>\n<li><p>多渠道打包<br><a href=\"https://blog.csdn.net/Android_Study_OK/article/details/75371940\">https://blog.csdn.net/Android_Study_OK/article/details/75371940</a></p>\n</li>\n<li><p>用过的设计模式及其使用场景</p>\n</li>\n</ul>\n<h3 id=\"3-面试（一小时）\"><a href=\"#3-面试（一小时）\" class=\"headerlink\" title=\"3. 面试（一小时）\"></a>3. 面试（一小时）</h3><ul>\n<li><p>内存优化</p>\n</li>\n<li><p>MVP<br>M（Model）<br>数据层，和MVC中的M一样，用来放数据的处理（比如网络请求，缓存等）。<br>V(View)<br>负责UI具体实现展现。比如Presenter派发过来一个动作是showDialog显示进度命令，那么我们这个View就负责实现具体UI。<br>P(Presenter)<br>负责处理业务逻辑代码，处理Model数据，然后将处理完的数据分发到View层。</p>\n</li>\n<li><p>RxJava 操作符</p>\n</li>\n<li><p>大概介绍项目，亮点功能</p>\n</li>\n<li><p>数据库（项目中用到的）</p>\n</li>\n<li><p>EventBus</p>\n</li>\n<li><p>加载一个运营活动页，怎么做</p>\n</li>\n<li><p>Dagger2 依赖注入<br>一款基于Java注解来实现的完全在编译阶段完成依赖注入的开源库，主要用于模块间解耦、提高代码的健壮性和可维护性。</p>\n</li>\n</ul>\n<h3 id=\"4-Android-组长面（一小时）\"><a href=\"#4-Android-组长面（一小时）\" class=\"headerlink\" title=\"4. Android 组长面（一小时）\"></a>4. Android 组长面（一小时）</h3><ul>\n<li><p>自我介绍</p>\n</li>\n<li><p>项目介绍</p>\n</li>\n<li><p>fragment切换</p>\n</li>\n<li><p>自定义view</p>\n</li>\n<li><p>6.0、7.0、8.0适配</p>\n</li>\n<li><p>项目中一些第三方库</p>\n</li>\n<li><p>某框架使用中的问题</p>\n</li>\n<li><p>事件分发</p>\n</li>\n<li><p>常用的设计模式</p>\n</li>\n<li><p>单例模式中的 volatile</p>\n</li>\n<li><p>git 命令</p>\n</li>\n<li><p>离职原因</p>\n</li>\n</ul>\n<h3 id=\"5-主管面（半小时）\"><a href=\"#5-主管面（半小时）\" class=\"headerlink\" title=\"5.主管面（半小时）\"></a>5.主管面（半小时）</h3><ul>\n<li><p>自我介绍</p>\n</li>\n<li><p>离职原因</p>\n</li>\n<li><p>工作中职责</p>\n</li>\n</ul>\n<h3 id=\"6-HR（微信）\"><a href=\"#6-HR（微信）\" class=\"headerlink\" title=\"6. HR（微信）\"></a>6. HR（微信）</h3><ul>\n<li>谈薪资</li>\n<li>入职相关事项</li>\n<li>offer</li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>最后，说几点个人看法。</p>\n<ul>\n<li>平时的积累很重要，要善于积累。</li>\n<li>开发有一定年限，一定需要懂得深层原理（源码）。</li>\n<li>持续学习，保持求知欲。</li>\n<li>不卑不亢，尽最大努力发挥自己了解的，不懂的地方虚心请教。</li>\n</ul>\n<p>希望大家都会找到满意的工作。</p>\n","tags":["Android","面试"]},{"title":"Android 开发中常见的图片选择、裁剪及权限管理等第三方功能库的升级优化","url":"/2018/05/23/Android-improve-frame-album-permission/","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言</h1><p>近期开发中有个需求涉及到多张图片选择、裁剪及上传功能，原项目中有类似的库和第三方框架，花了很长时间把相关的大部分功能加入进来，并未完全实现需求，然而最后发现有问题，查找解决方法，发现该开源的 Issues 中很多人都提到了我遇到的几个问题，尚未解决，该库也停止维护；现有的第三方框架的裁剪样式也不符合 App 要求。在一系列问题寻求解决方案无果后，决定弃用以前使用的框架，使用实现此功能更优秀的框架。<br>后台同事有其他的工作，这块需求的 API 尚未开发，有时间留给我们做优（tian）化（keng），在跟另一位 Android 同事提议和沟通后，决定把图片选择、图片裁剪、权限管理的第三方工具进行优化和升级，一方面是为此项目做优化，避免以后问题越来越多；另一方面作为学习和知识储备，选择和会使用更加优秀的轮子。</p>\n<span id=\"more\"></span>\n<h1 id=\"2-升级优化\"><a href=\"#2-升级优化\" class=\"headerlink\" title=\"2. 升级优化\"></a>2. 升级优化</h1><h2 id=\"2-1-图片选择\"><a href=\"#2-1-图片选择\" class=\"headerlink\" title=\"2.1 图片选择\"></a>2.1 图片选择</h2><p>严大的库：<a href=\"https://github.com/yanzhenjie/Album\">Album</a></p>\n<h3 id=\"2-1-1-Gradle\"><a href=\"#2-1-1-Gradle\" class=\"headerlink\" title=\"2.1.1 Gradle\"></a>2.1.1 Gradle</h3><p><code>&#39;com.yanzhenjie:album:2.1.1&#39;</code></p>\n<h3 id=\"2-1-2-简单使用\"><a href=\"#2-1-2-简单使用\" class=\"headerlink\" title=\"2.1.2 简单使用\"></a>2.1.2 简单使用</h3><h4 id=\"2-1-2-1-初始化\"><a href=\"#2-1-2-1-初始化\" class=\"headerlink\" title=\"2.1.2.1 初始化\"></a>2.1.2.1 初始化</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Album.initialize(AlbumConfig.newBuilder(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        .setAlbumLoader(MediaLoader())</span><br><span class=\"line\">        .setLocale(Locale.getDefault())</span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-1-2-2-图片加载器\"><a href=\"#2-1-2-2-图片加载器\" class=\"headerlink\" title=\"2.1.2.2 图片加载器\"></a>2.1.2.2 图片加载器</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaLoader</span> <span class=\"keyword\">implements</span> <span class=\"title\">AlbumLoader</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(ImageView imageView, AlbumFile albumFile)</span> </span>&#123;</span><br><span class=\"line\">        load(imageView, albumFile.getPath());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">load</span><span class=\"params\">(ImageView imageView, String url)</span> </span>&#123;</span><br><span class=\"line\">        Glide.with(imageView.getContext())</span><br><span class=\"line\">                .load(url)</span><br><span class=\"line\">                .into(imageView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-1-2-3-调用\"><a href=\"#2-1-2-3-调用\" class=\"headerlink\" title=\"2.1.2.3 调用\"></a>2.1.2.3 调用</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">selectImage</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Album.image(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">            .singleChoice()</span><br><span class=\"line\">            .camera(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">            .columnCount(<span class=\"number\">2</span>)</span><br><span class=\"line\">            .widget(</span><br><span class=\"line\">                    Widget.newDarkBuilder(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">                            .title(R.string.choose_album)</span><br><span class=\"line\">                            .statusBarColor(ContextCompat.getColor(<span class=\"keyword\">this</span>, R.color.albumColorPrimaryBlack))</span><br><span class=\"line\">                            .toolBarColor(ContextCompat.getColor(<span class=\"keyword\">this</span>, R.color.albumColorPrimaryBlack))</span><br><span class=\"line\">                            .build()</span><br><span class=\"line\">            )</span><br><span class=\"line\">            .onResult &#123; result -&gt;</span><br><span class=\"line\">                <span class=\"comment\">// do something</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .start()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>onResult</code> 中返回图片相关的信息，根据需要做处理。上述示例是 Album 的简单使用，也是我在项目中做头像选择时的代码，简单吧！Album 不仅可以选择图片，还可以选择视频（单个或多个）、拍摄照片、拍摄视频、画廊等，支持在 Activity、Fragment 中调用，<code>.with()</code> 中传 <strong>this</strong>，即当前 Activity 或 Fragment。</p>\n<h2 id=\"2-2-图片裁剪\"><a href=\"#2-2-图片裁剪\" class=\"headerlink\" title=\"2.2 图片裁剪\"></a>2.2 图片裁剪</h2><p>还是严大的库：<a href=\"https://github.com/yanzhenjie/Durban\">Durban</a></p>\n<h3 id=\"2-2-1-Gradle\"><a href=\"#2-2-1-Gradle\" class=\"headerlink\" title=\"2.2.1 Gradle\"></a>2.2.1 Gradle</h3><p><code>&#39;com.yanzhenjie:durban:1.0.1&#39;</code></p>\n<h3 id=\"2-2-2-简单使用\"><a href=\"#2-2-2-简单使用\" class=\"headerlink\" title=\"2.2.2 简单使用\"></a>2.2.2 简单使用</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">cropImage</span><span class=\"params\">(imagePathList: String)</span> </span>&#123;</span><br><span class=\"line\">    val cropDirectory = Constants.sdPath(<span class=\"keyword\">this</span>) + Constants.APP_CROP_PATH</span><br><span class=\"line\">    val file = File(cropDirectory)</span><br><span class=\"line\">    <span class=\"comment\">// 判断文件目录是否存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">        file.mkdirs()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Durban.with(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">            .statusBarColor(ContextCompat.getColor(<span class=\"keyword\">this</span>, R.color.albumColorPrimaryBlack))</span><br><span class=\"line\">            .toolBarColor(ContextCompat.getColor(<span class=\"keyword\">this</span>, R.color.albumColorPrimaryBlack))</span><br><span class=\"line\">            .navigationBarColor(ContextCompat.getColor(<span class=\"keyword\">this</span>, R.color.albumColorPrimaryBlack))</span><br><span class=\"line\">            <span class=\"comment\">// Image path list/array.</span></span><br><span class=\"line\">            .inputImagePaths(imagePathList)</span><br><span class=\"line\">            <span class=\"comment\">// Image output directory.</span></span><br><span class=\"line\">            .outputDirectory(cropDirectory)</span><br><span class=\"line\">            <span class=\"comment\">// Image size limit.</span></span><br><span class=\"line\">            .maxWidthHeight(<span class=\"number\">1000</span>, <span class=\"number\">1000</span>)</span><br><span class=\"line\">            <span class=\"comment\">// Aspect ratio.</span></span><br><span class=\"line\">            .aspectRatio(<span class=\"number\">1f</span>, <span class=\"number\">1f</span>)</span><br><span class=\"line\">            <span class=\"comment\">// Output format: JPEG, PNG.</span></span><br><span class=\"line\">            .compressFormat(Durban.COMPRESS_JPEG)</span><br><span class=\"line\">            <span class=\"comment\">// Compress quality, see Bitmap#compress(Bitmap.CompressFormat, int, OutputStream)</span></span><br><span class=\"line\">            .compressQuality(<span class=\"number\">90</span>)</span><br><span class=\"line\">            <span class=\"comment\">// Gesture: ROTATE, SCALE, ALL, NONE.</span></span><br><span class=\"line\">            .gesture(Durban.GESTURE_ALL)</span><br><span class=\"line\">            .controller(Controller.newBuilder()</span><br><span class=\"line\">                    .enable(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">                    .rotation(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                    .rotationTitle(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                    .scale(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                    .scaleTitle(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">                    .build())</span><br><span class=\"line\">            .requestCode(REQUEST_CODE_SELECT)</span><br><span class=\"line\">            .start()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">override fun <span class=\"title\">onActivityResult</span><span class=\"params\">(requestCode: Int, resultCode: Int, data: Intent?)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data != <span class=\"keyword\">null</span> &amp;&amp; requestCode == REQUEST_CODE_SELECT) &#123;</span><br><span class=\"line\">        val images = Durban.parseResult(data)</span><br><span class=\"line\">        <span class=\"comment\">// accept the cropping results</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">companion object &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val REQUEST_CODE_SELECT = <span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 <code>onActivityResult</code> 回调中接收裁剪后的结果，inputImagePaths()方法的参数传入了一张图片的路径，还可以是路径 list，也可以是路径数组，同样支持在 Activity、Fragment 中调用。</p>\n<h2 id=\"2-3-权限管理\"><a href=\"#2-3-权限管理\" class=\"headerlink\" title=\"2.3 权限管理\"></a>2.3 权限管理</h2><p>又是严大的库：<a href=\"https://github.com/yanzhenjie/AndPermission\">AndPermission</a><br>之前使用的是 1.x 的版本，这次升级到 2.x，变动有点大，但变得功能健壮和使用简洁了，还是决定有必要升级一下。支持在 Activity、Fragment 中调用，提供用户拒绝权限后再次申请权限的处理。</p>\n<h3 id=\"2-3-1-Gradle\"><a href=\"#2-3-1-Gradle\" class=\"headerlink\" title=\"2.3.1 Gradle\"></a>2.3.1 Gradle</h3><p><code>&#39;com.yanzhenjie:permission:2.0.0-rc5&#39;</code></p>\n<h3 id=\"2-3-2-简单使用\"><a href=\"#2-3-2-简单使用\" class=\"headerlink\" title=\"2.3.2 简单使用\"></a>2.3.2 简单使用</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">requestPermission</span><span class=\"params\">(vararg permission: String)</span> </span>&#123;</span><br><span class=\"line\">    AndPermission.with(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">            .runtime()</span><br><span class=\"line\">            .permission(*permission)</span><br><span class=\"line\">            .rationale(RuntimeRationale())</span><br><span class=\"line\">            .onGranted &#123;</span><br><span class=\"line\">                <span class=\"comment\">// success, do something</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .onDenied &#123; permissions -&gt;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (AndPermission.hasAlwaysDeniedPermission(<span class=\"keyword\">this</span>, permissions)) &#123;</span><br><span class=\"line\">                    PermissionHandleUtil.showSettingDialog(<span class=\"keyword\">this</span>, permissions)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .start()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\">requestPermission(*Permission.Group.STORAGE, Permission.CAMERA)</span><br></pre></td></tr></table></figure>\n<p><code>requestPermission()</code> 中传入需要的权限，是可变参数。Kotlin 可同时传入已有字符串和字符串数组，字符串数组前加 <code>*</code>，就是这么6（关于语法，此处不做详解）。<br><code>RuntimeRationale</code> 和 <code>PermissionHandleUtil</code> 中包含权限处理的提示 dialog，我将其封装成了工具类，在作者的 simple 中可以找到，此处不再列出。</p>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>结合以上三个开源库，就顺利完成了权限管理、图片选择、裁剪的整个流程。以上只是我在某个功能上用到的，每个框架都有更多可选的配置，满足很多需求，方便高效。</p>\n<p>又安利了一波严大的开源库，哈哈哈！</p>\n<ul>\n<li>学习并实践优秀开源库，避免重复造轮子</li>\n<li>选择成熟的开源项目，降低风险</li>\n</ul>\n","tags":["Android","album","permission"]},{"title":"Android 获取 SHA1 等 keystore 的信息","url":"/2018/03/16/Android-keystore-info/","content":"<p>keystore 文件为 Android 签名证书文件</p>\n<p>获取 keystore 相关信息命令：<code>keytool -list -v -keystore key_name</code><br><span id=\"more\"></span></p>\n<h5 id=\"1-发布版\"><a href=\"#1-发布版\" class=\"headerlink\" title=\"1. 发布版\"></a>1. 发布版</h5><p>使用 apk 对应的 keystore，命令为：<code>keytool -v -list -keystore apk.keystore   //这个是自己打包生成的jks</code></p>\n<h5 id=\"2-开发版\"><a href=\"#2-开发版\" class=\"headerlink\" title=\"2. 开发版\"></a>2. 开发版</h5><p>使用 debug.keystore，命令为：<code>keytool -list -v -keystore debug.keystore</code></p>\n<blockquote>\n<p>打开命令行，输入 <code>cd .android</code> 进入<strong>.android</strong>，输入上面的命令。</p>\n</blockquote>\n<p>一定要记得加上 <code>-v</code> 参数，不然只能看到 SHA1，没有 MD5。</p>\n","tags":["Android","keystore","SHA1"]},{"title":"Android：Utils 规范&路由导航工具","url":"/2020/06/19/Android-navigation-router-builder/","content":"<h1 id=\"Utils-规范\"><a href=\"#Utils-规范\" class=\"headerlink\" title=\"Utils 规范\"></a>Utils 规范</h1><ol>\n<li><p>使用 Kotlin<br>为什么是 Kotlin？因为 Kotlin 方便扩展某一类 util（使用扩展函数）。</p>\n<ul>\n<li>强制：必须注释。</li>\n<li>建议：放在基础层的 CommonSDK 里。</li>\n</ul>\n</li>\n<li><p>第三方库提供了单例，可以直接调用时，<strong>一定不要直接用</strong>。 将其调用方法再包一层，降低侵入性。如需更换其他同类框架，在调用函数方面影响小一点（但不是没有影响，因为有些地方还是要改，只是让你改的地方少一点）。</p>\n<p>以 ARouter 为例，ARouter 提供了 <code>ARouter.getInstance()...</code> 的用法，请不要偷懒，要自己再包一层。</p>\n</li>\n</ol>\n<span id=\"more\"></span>\n<h2 id=\"使用单例模式\"><a href=\"#使用单例模式\" class=\"headerlink\" title=\"使用单例模式\"></a>使用单例模式</h2><p>可以使用 Kotlin 的 <code>object</code> 很容易地声明单例模式。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">object</span> Singleton &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Kotlin 中调用</span></span><br><span class=\"line\">Singleton.xx()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Java 中调用</span></span><br><span class=\"line\">Singleton.INSTANCE.xx()</span><br></pre></td></tr></table></figure>\n<p>该类将永远只有一个实例，并且该实例（以线程安全的方式首次访问它时创建）具有与该类相同的名称。<a href=\"https://kotlinlang.org/docs/tutorials/kotlin-for-py/objects-and-companion-objects.html\">文档地址</a></p>\n<p>这种方式和 Java 单例模式的饿汉式一样，不过比 Java 中的实现代码量少很多，其实是个语法糖。</p>\n<p>有人说，Utils 推荐使用懒汉式，在使用时再初始化。但是，根据官方文档的意思，<code>object</code> 的单例模式是以线程安全的方式首次访问它时创建的，所以这里是可以用 <code>object</code> 的单例模式来声明的。</p>\n<h2 id=\"工具方法\"><a href=\"#工具方法\" class=\"headerlink\" title=\"工具方法\"></a>工具方法</h2><p>一般地，都会写多个<strong>静态方法</strong>来实现不同特性的功能。但是在封装一些第三方库，采用这样的方式真的好吗？别人写的那么好的框架，可使用 Builder 来链式调用，却被装在了固定参数的静态方法里。。。</p>\n<h1 id=\"实践：导航路由器\"><a href=\"#实践：导航路由器\" class=\"headerlink\" title=\"实践：导航路由器\"></a>实践：导航路由器</h1><p>下面就结合这几点对路由导航工具类进行一个升级优化。我们可以运用 <strong>Builder 模式</strong>，使用提供给此构建器的参数创建一个<strong>自己的</strong>导航路由器。</p>\n<p>项目中使用 ARouter 进行路由导航，我们可以按照类似参数声明创建自己的构建器。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.app.Activity</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.<span class=\"keyword\">annotation</span>.AnimRes</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.android.arouter.facade.Postcard</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.android.arouter.launcher.ARouter</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Navigation to the route with path.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a navigation router with the arguments supplied to this builder.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * There will only ever be one instance of this class,</span></span><br><span class=\"line\"><span class=\"comment\"> * and the instance (which is created the first time it is accessed,</span></span><br><span class=\"line\"><span class=\"comment\"> * in a thread-safe manner) has got the same name as the class.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Used in Kotlin:</span></span><br><span class=\"line\"><span class=\"comment\"> * Nav.setPath(&quot;&quot;).setContext(activity).go()</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Used in Java:</span></span><br><span class=\"line\"><span class=\"comment\"> * Nav.INSTANCE.setPath(&quot;&quot;).setContext(activity).go();</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> lishide</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2020/6/18</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> Nav &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> path: String? = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> mContext: Context? = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> bundle: Bundle? = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> flag = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> enterAnim = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> exitAnim = -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> requestCode = -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        initialize()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">initialize</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        path = <span class=\"literal\">null</span></span><br><span class=\"line\">        mContext = <span class=\"literal\">null</span></span><br><span class=\"line\">        bundle = <span class=\"literal\">null</span></span><br><span class=\"line\">        flag = -<span class=\"number\">1</span></span><br><span class=\"line\">        enterAnim = -<span class=\"number\">1</span></span><br><span class=\"line\">        exitAnim = -<span class=\"number\">1</span></span><br><span class=\"line\">        requestCode = -<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Set the path.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> path Where you go.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> This Builder object to allow for chaining of calls to set methods.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> ARouter.build(String)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setPath</span><span class=\"params\">(path: <span class=\"type\">String</span>)</span></span>: Nav &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.path = path</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Set the context.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> context Activity and so on.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> This Builder object to allow for chaining of calls to set methods.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setContext</span><span class=\"params\">(context: <span class=\"type\">Context</span>?)</span></span>: Nav &#123;</span><br><span class=\"line\">        mContext = context</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Set the bundle.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * BE ATTENTION TO THIS METHOD WAS &lt;P&gt;SET, NOT ADD!&lt;/P&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> bundle bundle</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> This Builder object to allow for chaining of calls to set methods.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Postcard.with(Bundle)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setBundle</span><span class=\"params\">(bundle: <span class=\"type\">Bundle</span>?)</span></span>: Nav &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.bundle = bundle</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Set special flags controlling how this intent is handled.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> flag Flags of route</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> This Builder object to allow for chaining of calls to set methods.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Postcard.withFlags</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setFlag</span><span class=\"params\">(flag: <span class=\"type\">Int</span>)</span></span>: Nav &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.flag = flag</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Set the requestCode.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> requestCode requestCode</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> This Builder object to allow for chaining of calls to set methods.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setRequestCode</span><span class=\"params\">(requestCode: <span class=\"type\">Int</span>)</span></span>: Nav &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.requestCode = requestCode</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Set normal transition anim.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> enterAnim enter</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> exitAnim  exit</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> This Builder object to allow for chaining of calls to set methods.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span> Postcard.withTransition</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">setTransition</span><span class=\"params\">(<span class=\"meta\">@AnimRes</span> enterAnim: <span class=\"type\">Int</span>, <span class=\"meta\">@AnimRes</span> exitAnim: <span class=\"type\">Int</span>)</span></span>: Nav &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.enterAnim = enterAnim</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.exitAnim = exitAnim</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates an &#123;<span class=\"doctag\">@link</span> ARouter&#125; with the arguments supplied to this builder.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * Calling this method navigation to the route with path in postcard.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">go</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path.isNullOrEmpty()) &#123;</span><br><span class=\"line\">            println(<span class=\"string\">&quot;path can not be empty&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> postcard = ARouter.getInstance().build(path)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> != bundle) &#123;</span><br><span class=\"line\">            postcard.with(bundle)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            postcard.withFlags(flag)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enterAnim != -<span class=\"number\">1</span> &amp;&amp; exitAnim != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            postcard.withTransition(enterAnim, exitAnim)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == mContext) &#123;</span><br><span class=\"line\">            postcard.navigation()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (requestCode != -<span class=\"number\">1</span> &amp;&amp; mContext <span class=\"keyword\">is</span> Activity) &#123;</span><br><span class=\"line\">                postcard.navigation(mContext <span class=\"keyword\">as</span> Activity?, requestCode, LoginNavigationCallbackImpl())</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                postcard.navigation(mContext, LoginNavigationCallbackImpl())</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        initialize()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Used in Kotlin:<br><code>Nav.setPath(&quot;&quot;).setContext(activity).go()</code></p>\n</li>\n<li><p>Used in Java:<br><code>Nav.INSTANCE.setPath(&quot;&quot;).setContext(activity).go();</code></p>\n</li>\n</ul>\n<blockquote>\n<p>可以在方法上加上 <code>@JvmStatic</code> 注解，在 Java 中使用就和 Kotlin 中一样了。感觉没必要，就多写个 <code>.INSTANCE</code>。</p>\n</blockquote>\n<p>这样就将导航路由器封装好了，最终使用了 ARouter 的导航。如果以后要更换其他的路由框架，只修改最后的一个方法就行了，是不是比以前写若干个静态方法要更方便呢。</p>\n<p>仅设置了常用的一些方法，更多的方法在使用到的时候追加即可。</p>\n<blockquote>\n<p>LoginNavigationCallbackImpl 是一个登录拦截器路由跳转的回调实现，具体功能实现见：<a href=\"https://lishide.github.io/2020/06/05/Android-ARouter-Login-Interceptor/\">使用 ARouter 实现登录拦截</a>，如不需要，可直接去掉此参数。</p>\n</blockquote>\n<p>类似地，可以给图片加载器 Glide，事件总线 EventBus、MMKV 等 key-value 库等套一层。</p>\n","tags":["Android","ARouter","Util"]},{"title":"JsBridge 使用和优化","url":"/2019/09/14/Android-jsbridge-app-vue-use-qa/","content":"<p>现在的 App 开发中，结合 H5 和原生控件混合开发是比较常见的做法，可降低开发成本、解决 UI 适配等。然而在某些场景中，H5 需要与原生做一些数据交换和事件处理。虽然 WebView 提供了相关 Js 调用的方法，但在 Android 早期版本（4.2 版本前）中发现存在严重的漏洞，所以我们这里不再讨论，而是使用现在比较常用的一个第三方框架——<a href=\"https://github.com/lzyzsd/JsBridge\">JsBridge</a> 来实现。</p>\n<span id=\"more\"></span>\n<h1 id=\"JsBridge-的使用\"><a href=\"#JsBridge-的使用\" class=\"headerlink\" title=\"JsBridge 的使用\"></a>JsBridge 的使用</h1><p>JsBridge 的基本使用方法可查看作者的介绍，原生和 Js 的配置和使用方法介绍的比较清晰。Android 端可根据需要将 <code>com.github.lzyzsd.jsbridge.BridgeWebView</code> 做一个封装，初始化常用的 WebView 设置，以及 WebViewClient 和 WebChromeClient，打造你项目中通用的 WebView。另外，H5 前站现在普遍流行使用 Vue 框架，在接入 JsBridge 方法的时候出现了一些问题，在和前端同事一起探索后，实现了原生和 H5 的双向数据交互，并把 JsBridge 在 Vue 中的使用进行了封装。</p>\n<h1 id=\"JsBridge-在-Vue-的封装与交互\"><a href=\"#JsBridge-在-Vue-的封装与交互\" class=\"headerlink\" title=\"JsBridge 在 Vue 的封装与交互\"></a>JsBridge 在 Vue 的封装与交互</h1><h2 id=\"JsBridge-工具类\"><a href=\"#JsBridge-工具类\" class=\"headerlink\" title=\"JsBridge 工具类\"></a>JsBridge 工具类</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 用法：</span></span><br><span class=\"line\"><span class=\"comment\"> * import jsBridge from &#x27;fileName.js&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、给 App 端发送数据</span></span><br><span class=\"line\"><span class=\"comment\"> * jsBridge.callHandler(eventName, data, callback(reponseData))</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数说明：</span></span><br><span class=\"line\"><span class=\"comment\"> * eventName (string): 必传, 与 App 端约定的事件名</span></span><br><span class=\"line\"><span class=\"comment\"> * data (object): 非必传, 发送给 App 端的数据</span></span><br><span class=\"line\"><span class=\"comment\"> * callback (function): 通信完成后，前端的回调，reponseData，是 App 端返回的数据</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、接受 App 端的数据</span></span><br><span class=\"line\"><span class=\"comment\"> * jsBridge.registerHandler(eventName, callback(data, responseCallback))</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数说明：</span></span><br><span class=\"line\"><span class=\"comment\"> * eventName (string): 必传，与 App 端约定的事件名</span></span><br><span class=\"line\"><span class=\"comment\"> * callback (function): data: 是接受到的数据，responseCallback，通信完成后，传给 App 端的回调</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> isAndroid = navigator.userAgent.indexOf(<span class=\"string\">&#x27;Android&#x27;</span>) &gt; -<span class=\"number\">1</span> || navigator.userAgent.indexOf(<span class=\"string\">&#x27;Adr&#x27;</span>) &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> isiOS = !!navigator.userAgent.match(<span class=\"regexp\">/\\(i[^;]+;( U;)? CPU.+Mac OS X/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这是必须要写的，用来创建一些设置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setupWebViewJavascriptBridge</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isAndroid) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.WebViewJavascriptBridge) &#123;</span><br><span class=\"line\">      callback(WebViewJavascriptBridge)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.addEventListener(</span><br><span class=\"line\">        <span class=\"string\">&#x27;WebViewJavascriptBridgeReady&#x27;</span>,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          callback(WebViewJavascriptBridge)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"literal\">false</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isiOS) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.WebViewJavascriptBridge) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> callback(WebViewJavascriptBridge);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.WVJBCallbacks) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.WVJBCallbacks.push(callback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.WVJBCallbacks = [callback];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> WVJBIframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;iframe&#x27;</span>);</span><br><span class=\"line\">    WVJBIframe.style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span><br><span class=\"line\">    WVJBIframe.src = <span class=\"string\">&#x27;wvjbscheme://__BRIDGE_LOADED__&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.documentElement.appendChild(WVJBIframe);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.documentElement.removeChild(WVJBIframe)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">setupWebViewJavascriptBridge(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bridge</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isAndroid) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//安卓端，接受数据时，需要先进行初始化</span></span><br><span class=\"line\">    bridge.init(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message, responseCallback</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Javascript Responds&#x27;</span>: <span class=\"string\">&#x27;Wee!&#x27;</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      responseCallback(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 给 App 发送数据</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">callHandler</span>(<span class=\"params\">name, data, callback</span>)</span> &#123;</span><br><span class=\"line\">    setupWebViewJavascriptBridge(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bridge</span>) </span>&#123;</span><br><span class=\"line\">      bridge.callHandler(name, data, callback)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 接受 App 端的数据</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">registerHandler</span>(<span class=\"params\">name, callback</span>)</span> &#123;</span><br><span class=\"line\">    setupWebViewJavascriptBridge(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">bridge</span>) </span>&#123;</span><br><span class=\"line\">      bridge.registerHandler(name, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, responseCallback</span>) </span>&#123;</span><br><span class=\"line\">        callback(data, responseCallback)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> jsBridge <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./utils/JSbridge.js&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"组件中使用\"><a href=\"#组件中使用\" class=\"headerlink\" title=\"组件中使用\"></a>组件中使用</h2><p>使用的方法名与 App 端约定好。</p>\n<p>1、给 App 端发送数据<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">jsBridge.callHandler(eventName, data, callback(reponseData))</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>参数说明：</p>\n<ul>\n<li>eventName (string): 必传, 与 App 端约定的事件名</li>\n<li>data (object): 非必传, 发送给 App 端的数据</li>\n<li>callback (function): 通信完成后，前端的回调，reponseData，是 App 端返回的数据</li>\n</ul>\n</blockquote>\n<p>2、接受 App 端的数据<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">jsBridge.registerHandler(eventName, callback(data, responseCallback))</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>参数说明：</p>\n<ul>\n<li>eventName (string): 必传，与 App 端约定的事件名</li>\n<li>callback (function): data: 是接受到的数据，responseCallback，通信完成后，传给 App 端的回调</li>\n</ul>\n</blockquote>\n<h1 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h1><h2 id=\"找不到处理-yy-QUEUE-MESSAGE-意图的-Activity\"><a href=\"#找不到处理-yy-QUEUE-MESSAGE-意图的-Activity\" class=\"headerlink\" title=\"找不到处理 yy://__QUEUE_MESSAGE__/ 意图的 Activity\"></a>找不到处理 <code>yy://__QUEUE_MESSAGE__/</code> 意图的 Activity</h2><p>异常如下：</p>\n<p><code>android.content.ActivityNotFoundException: No Activity found to handle Intent &#123; act=android.intent.action.VIEW dat=yy://__QUEUE_MESSAGE__/ flg=0x10000000 &#125;</code></p>\n<p>在 WebViewClient 的 shouldOverrideUrlLoading 中可以进行拦截 URL 跳转，实现在当前 WebView 加载网页链接，以及通过自定义 Uri 协议格式跳转页面（包括其他 App 的页面）。<br>Android 端出现此问题是你在这里做了跳转并返回了 true。翻阅 JsBridge 调用原理，其中一步是：Js 将消息内容放在 sendMessageQueue 中，并设置 iframe 的 src 为 <code>yy://__QUEUE_MESSAGE__/</code>。所以如果你像上面说的那样进行了处理，这里就会异常，App 端收不到消息。</p>\n<p>解决方案是：<br>处理你已知的要进行加载或跳转的协议，如 Http/Https 协议、自定义 Uri 协议等，返回 true，其他的情况，请：<code>return super.shouldOverrideUrlLoading(view, url)</code>，交给系统处理（即：处理 JsBridge 的方法是这种情况）。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.jianshu.com/p/910e058a1d63/\">JsBridge使用和原理</a></li>\n<li><a href=\"https://www.jianshu.com/p/52071a3d07b4\">Android JsBridge实战 打造专属你的Hybrid APP</a></li>\n<li><a href=\"https://www.jianshu.com/p/b03eaa6fb38a\">JSbridge 在Vue的封装与交互</a></li>\n</ul>\n","tags":["Android","JSBridge","Vue"]},{"title":"Android 混淆规则整理","url":"/2018/06/06/Android-proguard-cn-collection/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>某一个夜深人静的加班夜，也许你在做代码混淆……ProGuard 是一个比较枯燥且没有成就感的技术，但 Android 项目没有了 ProGuard 还真就不行。在 Android 中使用 ProGuard 可以起到压缩、优化、混淆、预检的作用，保证我们开发出的 APK 更健壮。</p>\n<span id=\"more\"></span>\n<p>近期的一次发版中，同事反应一个发生在某米手机（没有黑~）上的奔溃 bug，手头的测试真机数量有限且均无此问题。后来使用云测试进行调试，上传了 release 和 debug 版的 apk，发现那款机型的确出现问题。经过分析，问题定位在了代码混淆问题上，因为想到自己之前的一次发版中也曾有过这个问题。</p>\n<p>又一次遇到这样的问题，觉得有必要好好掌握一下正确地写代码混淆规则的姿势了，而不只是在使用第三方和轮子时，单纯地 copy 开源库的 ProGuard。</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><h2 id=\"编写-ProGuard-文件\"><a href=\"#编写-ProGuard-文件\" class=\"headerlink\" title=\"编写 ProGuard 文件\"></a>编写 ProGuard 文件</h2><p>受《App 研发录》启发，收集和整理了 Android 开发中国内项目常用库的混淆规则，按照包老师的思路，是一个三步走的过程。</p>\n<ul>\n<li>基本混淆</li>\n<li>针对 App 的量身定制</li>\n<li>针对第三方 jar 包的解决方案</li>\n</ul>\n<p>整理了一个类似模板的项目吧，希望对大家有用，轻松搞定混淆。并已开源到 GitHub——<a href=\"https://github.com/lishide/Android-proguard-cn-collection\">Android-proguard-cn-collection</a>，收集整理中，如果你有补充，期待你的 PR。</p>\n<h3 id=\"基本混淆\"><a href=\"#基本混淆\" class=\"headerlink\" title=\"基本混淆\"></a>基本混淆</h3><p>最基本的配置信息，任何 App 都要使用，基本不用动。（代码及注释来自《App 研发录》）</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"># # 1. 基本混淆======================================================================================</span><br><span class=\"line\"># ## 1.1 基本指令-------------------------------------------------------------</span><br><span class=\"line\"># 代码混淆压缩比，在 0~7 之间，默认为 5，一般不需要改</span><br><span class=\"line\">-optimizationpasses <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\"># 混淆时不使用大小写混合，混淆后的类名为小写</span><br><span class=\"line\">-dontusemixedcaseclassnames</span><br><span class=\"line\"></span><br><span class=\"line\"># 指定不去忽略非公共的库的类</span><br><span class=\"line\">-dontskipnonpubliclibraryclasses</span><br><span class=\"line\"></span><br><span class=\"line\"># 指定不去忽略非公共的库的类的成员</span><br><span class=\"line\">-dontskipnonpubliclibraryclassmembers</span><br><span class=\"line\"></span><br><span class=\"line\"># 不做预校验，preverify 是 proguard 的 4 个步骤之一</span><br><span class=\"line\"># Android 不需要 preverify，去掉这一步可加快混淆速度</span><br><span class=\"line\">-dontpreverify</span><br><span class=\"line\"></span><br><span class=\"line\"># 有了 verbose 这句话，混淆后就会生成映射文件</span><br><span class=\"line\"># 包含有类名 -&gt; 混淆后类名的映射关系</span><br><span class=\"line\"># 然后使用 printmapping 指定映射文件的名称</span><br><span class=\"line\">-verbose</span><br><span class=\"line\">-printmapping proguardMapping.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 指定混淆时采用的算法，后面的参数是一个过滤器</span><br><span class=\"line\"># 这个过滤器是谷歌推荐的算法，一般不改变</span><br><span class=\"line\">-optimizations !code<span class=\"regexp\">/simplification/</span>arithmetic,!field<span class=\"comment\">/*,!class/merging/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 保护代码中的 Annotation 不被混淆，这在 JSON 实体映射时非常重要，比如 fastJson</span></span><br><span class=\"line\"><span class=\"comment\">-keepattributes *Annotation*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 避免混淆泛型，这在 JSON 实体映射时非常重要，比如 fastJson</span></span><br><span class=\"line\"><span class=\"comment\">-keepattributes Signature</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 抛出异常时保留代码行号，在异常分析中可以方便定位</span></span><br><span class=\"line\"><span class=\"comment\">-keepattributes SourceFile,LineNumberTable</span></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># ## 1.2 需要保留的东西-------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># 保留所有的本地 native 方法不被混淆</span></span><br><span class=\"line\"><span class=\"comment\">-keepclasseswithmembernames class * &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    native &lt;methods&gt;;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 保留了继承自 Activity、Application 这些类的子类</span></span><br><span class=\"line\"><span class=\"comment\"># 因为这些子类都有可能被外部调用</span></span><br><span class=\"line\"><span class=\"comment\"># 比如说，第一行就保证了所有 Activity 的子类不要被混淆</span></span><br><span class=\"line\"><span class=\"comment\">-keep public class * extends android.app.Activity</span></span><br><span class=\"line\"><span class=\"comment\">-keep public class * extends android.app.Application</span></span><br><span class=\"line\"><span class=\"comment\">-keep public class * extends android.app.Service</span></span><br><span class=\"line\"><span class=\"comment\">-keep public class * extends android.content.BroadcastReceiver</span></span><br><span class=\"line\"><span class=\"comment\">-keep public class * extends android.content.ContentProvider</span></span><br><span class=\"line\"><span class=\"comment\">-keep public class * extends android.app.backup.BackupAgentHelper</span></span><br><span class=\"line\"><span class=\"comment\">-keep public class * extends android.preference.Preference</span></span><br><span class=\"line\"><span class=\"comment\">-keep public class * extends android.view.View</span></span><br><span class=\"line\"><span class=\"comment\">-keep public class com.android.vending.licensing.ILicensingService</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 保留在 Activity 中的方法参数是 view 的方法，</span></span><br><span class=\"line\"><span class=\"comment\"># 从而我们在 layout 里面编写 onClick 就不会被影响</span></span><br><span class=\"line\"><span class=\"comment\">-keepclassmembers class * extends android.app.Activity &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public void *(android.view.View);</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 枚举类不能被混淆</span></span><br><span class=\"line\"><span class=\"comment\">-keepclassmembers enum * &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static **[] values();</span></span><br><span class=\"line\"><span class=\"comment\">    public static ** valueOf(java.lang.String);</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 保留自定义控件（继承自 View）不被混淆</span></span><br><span class=\"line\"><span class=\"comment\">-keep public class * extends android.view.View &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    *** get*();</span></span><br><span class=\"line\"><span class=\"comment\">    void set*(***);</span></span><br><span class=\"line\"><span class=\"comment\">    public &lt;init&gt;(android.content.Context);</span></span><br><span class=\"line\"><span class=\"comment\">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</span></span><br><span class=\"line\"><span class=\"comment\">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 保留 Parcelable 序列化的类不被混淆</span></span><br><span class=\"line\"><span class=\"comment\">-keep class * implements android.os.Parcelable &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    public static final android.os.Parcelable$Creator *;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 保留 Serializable 序列化的类不被混淆</span></span><br><span class=\"line\"><span class=\"comment\">-keepclassmembers class * implements java.io.Serializable &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    static final long serialVersionUID;</span></span><br><span class=\"line\"><span class=\"comment\">    private static final java.io.ObjectStreamField[] serialPersistentFields;</span></span><br><span class=\"line\"><span class=\"comment\">    private void writeObject(java.io.ObjectOutputStream);</span></span><br><span class=\"line\"><span class=\"comment\">    private void readObject(java.io.ObjectInputStream);</span></span><br><span class=\"line\"><span class=\"comment\">    java.lang.Object writeReplace();</span></span><br><span class=\"line\"><span class=\"comment\">    java.lang.Object readResolve();</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 对于 R（资源）下的所有类及其方法，都不能被混淆</span></span><br><span class=\"line\"><span class=\"comment\">-keep class **.R$* &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    *;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"># 对于带有回调函数 onXXEvent 的，不能被混淆</span></span><br><span class=\"line\"><span class=\"comment\">-keepclassmembers class * &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    void *(**On*Event);</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#===================================================================================================</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"针对-App-的量身定制\"><a href=\"#针对-App-的量身定制\" class=\"headerlink\" title=\"针对 App 的量身定制\"></a>针对 App 的量身定制</h3><p>这部分做部分修改，保留你的项目中的实体类、自定义 View、内嵌类、WebView、反射等不被混淆，如果没有使用到的，忽略即可。</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"># # 2. 针对 App 的量身定制============================================================================</span><br><span class=\"line\"># ## 2.1 保留实体类和成员不被混淆-----------------------------------------------</span><br><span class=\"line\"># 例如（替换成你的包名结构）：</span><br><span class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">yourpackage</span>.<span class=\"title\">app</span>.<span class=\"title\">model</span>.<span class=\"title\">entity</span>.** &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> set*(***);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> *** get*();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> *** is*();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#---------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># ## 2.2 内嵌类--------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">#---------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># ## 2.3 webview------------------------------------------------------------</span><br><span class=\"line\">-keepclassmembers <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fqcn</span>.<span class=\"title\">of</span>.<span class=\"title\">javascript</span>.<span class=\"title\">interface</span>.<span class=\"title\">for</span>.<span class=\"title\">Webview</span> &#123;</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> *;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-keepclassmembers <span class=\"class\"><span class=\"keyword\">class</span> * <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">webkit</span>.<span class=\"title\">WebViewClient</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> *(android.webkit.WebView, java.lang.String);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">-keepclassmembers <span class=\"class\"><span class=\"keyword\">class</span> * <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">webkit</span>.<span class=\"title\">WebViewClient</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> *(android.webkit.WebView, jav.lang.String);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#---------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># ## 2.4 对 JavaScript 的处理------------------------------------------------</span><br><span class=\"line\"># 保留 JS 方法不被混淆</span><br><span class=\"line\">#-keepclassmembers class com.example.xxx.MainActivity$JSInterface1 &#123;</span><br><span class=\"line\">#    &lt;methods&gt;;</span><br><span class=\"line\">#&#125;</span><br><span class=\"line\">#---------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># ## 2.5 处理反射------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">#---------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># ## 2.6 对于自定义 View 的解决方案--------------------------------------------</span><br><span class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">yourpackage</span>.<span class=\"title\">a</span>.** &#123;</span> *; &#125;</span><br><span class=\"line\">#---------------------------------------------------------------------------</span><br><span class=\"line\">#===================================================================================================</span><br></pre></td></tr></table></figure>\n<h3 id=\"针对第三方-jar-包的解决方案\"><a href=\"#针对第三方-jar-包的解决方案\" class=\"headerlink\" title=\"针对第三方 jar 包的解决方案\"></a>针对第三方 jar 包的解决方案</h3><p>项目中使用到很多第三方提供的 SDK，如下列出了针对 <code>android-support-v4.jar</code> 和第三方 jar 包的解决方案。根据使用到的第三方库，查找对应的 ProGuard，加入到混淆规则中。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"># # 3. 针对第三方 jar 包的解决方案=====================================================================</span><br><span class=\"line\"># ## 3.1 针对 android-support-v4.jar 的解决方案-------------------------------</span><br><span class=\"line\"># 如果是直接包含的 jar 包的话，这样写</span><br><span class=\"line\"># 如果 gradle 报错的话，可以考虑注释掉 -libraryjars</span><br><span class=\"line\">#-libraryjars libs/android-support-v4.jar</span><br><span class=\"line\">-dontwarn android.support.v4.**</span><br><span class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">android</span>.<span class=\"title\">support</span>.<span class=\"title\">v4</span>.** &#123;</span> *; &#125;</span><br><span class=\"line\">-keep <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">android</span>.<span class=\"title\">support</span>.<span class=\"title\">v4</span>.<span class=\"title\">app</span>.** &#123;</span> *; &#125;</span><br><span class=\"line\">-keep <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> * <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">support</span>.<span class=\"title\">v4</span>.**</span></span><br><span class=\"line\"><span class=\"class\">-<span class=\"title\">keep</span> <span class=\"title\">public</span> <span class=\"title\">class</span> * <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">app</span>.<span class=\"title\">Fragment</span></span></span><br><span class=\"line\"><span class=\"class\">#---------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"># ## 3.2 其他的第三方 <span class=\"title\">jar</span> 包的解决方案-----------------------------------------</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">#---------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"class\">#===================================================================================================</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在项目中指定混淆文件\"><a href=\"#在项目中指定混淆文件\" class=\"headerlink\" title=\"在项目中指定混淆文件\"></a>在项目中指定混淆文件</h2><p>将 Module 下的 build.gradle 中 minifyEnabled 设置为 <code>true</code>。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    buildTypes &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            minifyEnabled <span class=\"literal\">true</span></span><br><span class=\"line\">            proguardFiles getDefaultProguardFile(<span class=\"string\">&#x27;proguard-android.txt&#x27;</span>), <span class=\"string\">&#x27;proguard-rules.pro&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上三部分混淆规则，可以写在一个 ProGuard 文件中，即创建 Android 工程后默认生成的 <code>proguard-rules.pro</code>，proguardFiles 指定使用<code>&#39;proguard-rules.pro&#39;</code>（默认就是这样）。</p>\n<p>或者，可以写多个 ProGuard 文件，分别指定，这种方式更直观。<br><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">proguardFile <span class=\"string\">&#x27;proguard-a.pro&#x27;</span></span><br><span class=\"line\">proguardFile <span class=\"string\">&#x27;proguard-b.pro&#x27;</span></span><br><span class=\"line\">proguardFile <span class=\"string\">&#x27;proguard-c.pro&#x27;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>如果需要代码混淆，请尽早做</li>\n<li>测试工作要基于混淆包进行，才能尽早发现问题</li>\n<li>发版前，要额外测试推送、分享、支付等功能</li>\n</ul>\n<h1 id=\"感谢\"><a href=\"#感谢\" class=\"headerlink\" title=\"感谢\"></a>感谢</h1><p>包建强老师的《App 研发录》</p>\n","tags":["Android","ProGuard"]},{"title":"列表动态增减并移动，以及 item 中使用 EditText 的问题扫坑","url":"/2018/08/10/Android-solutions-list-item-dyna-transform-edit/","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>项目中需要一个图文混排的编辑功能，相关信息由用户动态地随意添加。于是使用 RecyclerView 的多布局来实现，记录一下遇到的一些问题的解决方法，主要有以下技术点：动态增加 Item、动态删除 Item、上移 Item、图片选择功能、EditText 复用问题的解决等。</p>\n<span id=\"more\"></span>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>先来看下需要实现的图文混排的编辑页面<br><img src=\"http://p6wpxhpqt.bkt.clouddn.com/img_art_rv_item_multi_dtl.png\" alt=\"图文混排的编辑页面\"></p>\n<p>从图中可以看出此页面一共有 3 种布局类型，分别是文字输入 Item、图片选择 Item，以及使用两个 TextView 来制作按钮的菜单 Item（用来动态添加以上两种 Item）。</p>\n<p>RecyclerView 的适配器用的是平时常用的 <a href=\"https://github.com/CymChad/BaseRecyclerViewAdapterHelper\">BaseRecyclerViewAdapterHelper</a>，创建三种对应的布局文件，并加入到适配器（<code>addItemType</code>）。布局文件比较简单就不贴出了，下面主要讲解一下用到的几个功能点和问题的解决。</p>\n<h2 id=\"动态增加-Item\"><a href=\"#动态增加-Item\" class=\"headerlink\" title=\"动态增加 Item\"></a>动态增加 Item</h2><p>增加 Item 的功能，调用 <code>list.add()</code> 方法即可，第一个参数传入 <code>list.size - 1</code> 是为了让每次增加的 Item 在<strong>菜单 Item</strong>的前一个位置。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">list.add(list.size - <span class=\"number\">1</span>, BmGoodsAddDtlEntity(BmGoodsAddDtlEntity.TYPE_LIST_TEXT))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"动态删除-Item\"><a href=\"#动态删除-Item\" class=\"headerlink\" title=\"动态删除 Item\"></a>动态删除 Item</h2><p>删除 Item 也很简单，移除当前位置的 List：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">list.removeAt(position)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"上移-Item\"><a href=\"#上移-Item\" class=\"headerlink\" title=\"上移 Item\"></a>上移 Item</h2><p>上移Item，调用 <code>moveUpItem(position)</code> 方法，交换集合中两个元素。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 上移 Item</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> position</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> fun <span class=\"title\">moveUpItem</span><span class=\"params\">(position: Int)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (position == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        toast(getString(R.string.msg_already_top))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &gt; <span class=\"number\">0</span> &amp;&amp; position &lt;= list.size - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        swap(list, position, position - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 集合中两个元素的交换操作</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> list</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> oldPosition</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> newPosition</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> fun &lt;T&gt; swap(list: MutableList&lt;T&gt;?, oldPosition: Int, newPosition: Int) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == list) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> IllegalStateException(<span class=\"string\">&quot;The list can not be empty...&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    val tempElement = list[oldPosition]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 向前移动，前面的元素需要向后移动</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldPosition &lt; newPosition) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i in oldPosition until newPosition) &#123;</span><br><span class=\"line\">            list[i] = list[i + <span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list[newPosition] = tempElement</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 向后移动，后面的元素需要向前移动</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldPosition &gt; newPosition) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i in oldPosition downTo newPosition + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            list[i] = list[i - <span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list[newPosition] = tempElement</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"图片选择功能\"><a href=\"#图片选择功能\" class=\"headerlink\" title=\"图片选择功能\"></a>图片选择功能</h2><p>图片选择相关功能见我的另一篇博文：<br><a href=\"https://lishide.github.io/2018/05/22/Android-improve-frame-album-permission/\">Android 开发中常见的图片选择、裁剪及权限管理等第三方功能库的升级优化</a></p>\n<h2 id=\"EditText-复用问题的解决\"><a href=\"#EditText-复用问题的解决\" class=\"headerlink\" title=\"EditText 复用问题的解决\"></a>EditText 复用问题的解决</h2><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>RecyclerView 中使用 EditText 滚动后数据消失，错乱。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>首先想到需要为 EditText 添加 TextWatcher 监听器，但实际上这里有问题的。<br>（网上查了资料，最终顺利解决了问题）afterTextChanged 方法会被多次的调用，其根本原因是EditText 的重新复用，并且重新绘制。当重绘之后，该回调函数没有获取到填充的数据，还是原来复用的数据。<br>每次填充数据之前先移除 TextWatcher 监听器，然后为 EditText 填充数据，最后再为 EditText 添加 TextWatcher 监听器，取得输入框里的值保存到数据实体中。<br>关键代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val etText = helper.getView&lt;EditText&gt;(R.id.etText)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第1步：为了避免TextWatcher在第2步被调用，提前将他移除。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (etText.tag is TextWatcher) &#123;</span><br><span class=\"line\">    etText.removeTextChangedListener(etText.tag as TextWatcher)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第2步：移除TextWatcher之后，设置EditText的Text。</span></span><br><span class=\"line\">etText.setText(item?.dtlEntity?.text)</span><br><span class=\"line\"></span><br><span class=\"line\">val watcher = object : TextWatcher &#123;</span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">afterTextChanged</span><span class=\"params\">(s: Editable?)</span> </span>&#123;</span><br><span class=\"line\">        item?.dtlEntity?.text = <span class=\"keyword\">if</span> (s?.isNotEmpty() == <span class=\"keyword\">true</span>) s.toString() <span class=\"keyword\">else</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">beforeTextChanged</span><span class=\"params\">(s: CharSequence?, start: Int, count: Int, after: Int)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">override fun <span class=\"title\">onTextChanged</span><span class=\"params\">(s: CharSequence?, start: Int, before: Int, count: Int)</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">etText.addTextChangedListener(watcher)</span><br><span class=\"line\">etText.tag = watcher</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>实现一个类似的多布局动态生成和操作 Item 的列表，大概用到了以上技术点吧。关键代码即上面所述，作为一个记录和分享，方便以后参考。最后的 EditText 复用问题的解决同样适用于一条 Item 上有多个输入框的情况，重复上述操作即可。取值的话，遍历列表，根据需求取出相应值。</p>\n<p>欢迎吐槽，互相交流。</p>\n","tags":["Android","RecyclerView","EditText"]},{"title":"Android 端使用 Mob 快速集成分享","url":"/2019/09/07/Android-third-sdk-mob-share/","content":"<p>本文记录 Android 端使用 Mob 快速集成分享的步骤。前半部分主要同官方的集成文档，后半部分是自己进行的封装，降低侵入性，以及更方便地使用。</p>\n<p>相关链接：</p>\n<ul>\n<li><a href=\"http://wiki.mob.com/sdk-share-android-3-0-0/\">ShareSDK 集成文档</a></li>\n</ul>\n<span id=\"more\"></span>\n<h1 id=\"集成准备\"><a href=\"#集成准备\" class=\"headerlink\" title=\"集成准备\"></a>集成准备</h1><ol>\n<li><p>注册应用申请 Mob 的 AppKey 和 AppSecret；</p>\n</li>\n<li><p>需要申请第三方平台的 key，如微信、QQ 等；</p>\n</li>\n</ol>\n<blockquote>\n<p>注：使用 ShareSDK Gradle 集成方式，不需要在 AndroidMainfest.xml 下面配置任何权限和 Activity。</p>\n</blockquote>\n<h1 id=\"集成配置\"><a href=\"#集成配置\" class=\"headerlink\" title=\"集成配置\"></a>集成配置</h1><p>1、打开项目根目录的 build.gradle，在 buildscrip–&gt;dependencies 模块下面添加<br><code>classpath ‘com.mob.sdk:MobSDK:2018.0319.1724’</code>，如下所示：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">buildscript &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dependencies &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        classpath <span class=\"string\">&quot;com.mob.sdk:MobSDK:2018.0319.1724&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、在使用到 Mob 产品的 module 下面的 build.gradle 文件里面添加引用</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;com.mob.sdk&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>3、然后添加 MobSDK 方法，配置 mob 的 key 和秘钥 （与第 2 步是一个 gradle 中；注意：MobSDK 方法是配置到文件根目录，与 android 并列，不要配置到 android 里面哦），Gradle 集成方式可以在 Mob 产品的 module 下面的 build.gradle 文件里面配置 ShareSDK 各个社交平台的 key 信息。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 社会化分享 ShareSdk 配置</span></span><br><span class=\"line\">MobSDK &#123;</span><br><span class=\"line\">    appKey <span class=\"string\">&quot;申请 Mob 的 appkey&quot;</span></span><br><span class=\"line\">    appSecret <span class=\"string\">&quot;申请 Mob 的 AppSecret&quot;</span></span><br><span class=\"line\">    ShareSDK &#123;</span><br><span class=\"line\">        devInfo &#123;</span><br><span class=\"line\">            Wechat &#123;</span><br><span class=\"line\">                id <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">                sortId <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">                appId <span class=\"string\">&quot;申请 Wechat 的 appkey&quot;</span></span><br><span class=\"line\">                appSecret <span class=\"string\">&quot;申请 Wechat 的 AppSecret&quot;</span></span><br><span class=\"line\">                bypassApproval <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">                enable <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            WechatMoments &#123;</span><br><span class=\"line\">                id <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">                sortId <span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">                appId <span class=\"string\">&quot;申请 Wechat 的 appkey&quot;</span></span><br><span class=\"line\">                appSecret <span class=\"string\">&quot;申请 Wechat 的 AppSecret&quot;</span></span><br><span class=\"line\">                bypassApproval <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">                enable <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            QQ &#123;</span><br><span class=\"line\">                id <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">                sortId <span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">                appId <span class=\"string\">&quot;appId&quot;</span></span><br><span class=\"line\">                appKey <span class=\"string\">&quot;appKey&quot;</span></span><br><span class=\"line\">                shareByAppClient <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">                enable <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            QZone &#123;</span><br><span class=\"line\">                id <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">                sortId <span class=\"string\">&quot;3&quot;</span></span><br><span class=\"line\">                appId <span class=\"string\">&quot;appId&quot;</span></span><br><span class=\"line\">                appKey <span class=\"string\">&quot;appKey&quot;</span></span><br><span class=\"line\">                shareByAppClient <span class=\"string\">&quot;false&quot;</span></span><br><span class=\"line\">                enable <span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置字段请查看官方说明。</p>\n</blockquote>\n<h1 id=\"添加代码\"><a href=\"#添加代码\" class=\"headerlink\" title=\"添加代码\"></a>添加代码</h1><p>1.初始化 MobSDK</p>\n<p>如果您没有在<code>AndroidManifest</code>中设置<code>appliaction</code>的类名，MobSDK 会将这个设置为<code>com.mob.MobApplication</code>，但如果您设置了，请在您自己的 Application 类中调用：<code>MobSDK.init(this);</code>以初始化 MobSDK。</p>\n<p>并且在Manifest清单文件中配置：tools:replace=”android:name”，如下所示：<br><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;application</span><br><span class=\"line\">   android:name = &quot;.MyApplication&quot;</span><br><span class=\"line\">   tools:replace=&quot;android:name&quot;&gt;</span><br></pre></td></tr></table></figure><br>2、分享代码调用<br>添加配置后，即可调用授权、获取资料、分享等操作，如一键分享的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">showShare</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    OnekeyShare oks = <span class=\"keyword\">new</span> OnekeyShare();</span><br><span class=\"line\">    <span class=\"comment\">// title标题，微信、QQ和QQ空间等平台使用</span></span><br><span class=\"line\">    oks.setTitle(getString(R.string.share));</span><br><span class=\"line\">    <span class=\"comment\">// titleUrl QQ和QQ空间跳转链接</span></span><br><span class=\"line\">    oks.setTitleUrl(<span class=\"string\">&quot;http://sharesdk.cn&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// text是分享文本，所有平台都需要这个字段</span></span><br><span class=\"line\">    oks.setText(<span class=\"string\">&quot;我是分享文本&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// imagePath是图片的本地路径，确保SDcard下面存在此张图片</span></span><br><span class=\"line\">    oks.setImagePath(<span class=\"string\">&quot;/sdcard/test.jpg&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// url在微信、Facebook等平台中使用</span></span><br><span class=\"line\">    oks.setUrl(<span class=\"string\">&quot;http://sharesdk.cn&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 启动分享GUI</span></span><br><span class=\"line\">    oks.show(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此就基本集成完成了，即可实现分享了。不过我们还可以做一些封装，往下看。</p>\n<h1 id=\"通用分享工具的封装\"><a href=\"#通用分享工具的封装\" class=\"headerlink\" title=\"通用分享工具的封装\"></a>通用分享工具的封装</h1><p>如果你的应用在某一阶段已知并确定做分享某一种类型，如分享超链接，则可以将分享功能做一个进一步封装。</p>\n<p>下面以常用的 <strong>分享超链接</strong> 为例，做一个通用分享工具的封装，方便更方便地调用。</p>\n<h2 id=\"分享内容实体\"><a href=\"#分享内容实体\" class=\"headerlink\" title=\"分享内容实体\"></a>分享内容实体</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShareContent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String titleUrl;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String text;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String imgUrl;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ShareContent</span><span class=\"params\">(String title, String titleUrl, String text, String imgUrl, String url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.titleUrl = titleUrl;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.text = text;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.imgUrl = imgUrl;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitleUrl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> titleUrl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitleUrl</span><span class=\"params\">(String titleUrl)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.titleUrl = titleUrl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getText</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setText</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.text = text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getImgUrl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> imgUrl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setImgUrl</span><span class=\"params\">(String imgUrl)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.imgUrl = imgUrl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getUrl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUrl</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</span><br><span class=\"line\">        String title;</span><br><span class=\"line\">        String titleUrl;</span><br><span class=\"line\">        String text;</span><br><span class=\"line\">        String imgUrl;</span><br><span class=\"line\">        String url;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> title 标题</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> titleUrl 放在文本里面的url</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setTitleUrl</span><span class=\"params\">(String titleUrl)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.titleUrl = titleUrl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> text 文本内容</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setText</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.text = text;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> imgUrl 分享图片的网络图片地址，因为目前shareSdk不支持Drawable中的图片分享，所以先都统一用网络图片</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setImgUrl</span><span class=\"params\">(String imgUrl)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.imgUrl = imgUrl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * <span class=\"doctag\">@param</span> url 分享的链接</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">setUrl</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ShareContent <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ShareContent(title, titleUrl, text, imgUrl, url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分享接口\"><a href=\"#分享接口\" class=\"headerlink\" title=\"分享接口\"></a>分享接口</h2><p>提供分享内容</p>\n<blockquote>\n<p>需要分享功能的实体实现此接口。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IShareable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">ShareContent <span class=\"title\">getShareContent</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分享器接口\"><a href=\"#分享器接口\" class=\"headerlink\" title=\"分享器接口\"></a>分享器接口</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IShare</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">(Context context, IShareable shareable)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">(Context context, IShareable shareable, PlatformActionListener callback)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">(Context context, ShareContent content)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">(Context context, <span class=\"keyword\">final</span> ShareContent content, PlatformActionListener callback)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">(Context context, <span class=\"keyword\">final</span> ShareContent content, String platform, PlatformActionListener callback)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"通用分享工具类\"><a href=\"#通用分享工具类\" class=\"headerlink\" title=\"通用分享工具类\"></a>通用分享工具类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommonShare</span> <span class=\"keyword\">implements</span> <span class=\"title\">IShare</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">(Context context, IShareable shareable)</span> </span>&#123;</span><br><span class=\"line\">        share(context, shareable, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">(Context context, IShareable shareable, PlatformActionListener callback)</span> </span>&#123;</span><br><span class=\"line\">        ShareContent content = shareable.getShareContent();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (content != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            share(context, content, callback);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Timber.e(<span class=\"string\">&quot;The shareable return a null object&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">(Context context, <span class=\"keyword\">final</span> ShareContent content)</span> </span>&#123;</span><br><span class=\"line\">        share(context, content, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">(Context context, <span class=\"keyword\">final</span> ShareContent content, PlatformActionListener callback)</span> </span>&#123;</span><br><span class=\"line\">        share(context, content, <span class=\"keyword\">null</span>, callback);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">share</span><span class=\"params\">(Context context, <span class=\"keyword\">final</span> ShareContent content, String platform, PlatformActionListener callback)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (content == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Timber.e(<span class=\"string\">&quot;The shareContent is null&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        OnekeyShare oks = <span class=\"keyword\">new</span> OnekeyShare();</span><br><span class=\"line\">        oks.disableSSOWhenAuthorize();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (platform != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            oks.setPlatform(platform);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// title标题，微信、QQ和QQ空间等平台使用</span></span><br><span class=\"line\">        oks.setTitle(content.getTitle());</span><br><span class=\"line\">        <span class=\"comment\">// titleUrl QQ和QQ空间跳转链接</span></span><br><span class=\"line\">        oks.setTitleUrl(content.getTitleUrl());</span><br><span class=\"line\">        <span class=\"comment\">// text是分享文本，所有平台都需要这个字段</span></span><br><span class=\"line\">        oks.setText(content.getText());</span><br><span class=\"line\">        <span class=\"comment\">// 各平台都会用到</span></span><br><span class=\"line\">        oks.setImageUrl(content.getImgUrl());</span><br><span class=\"line\">        <span class=\"comment\">// url在微信、Facebook等平台中使用</span></span><br><span class=\"line\">        oks.setUrl(content.getUrl());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            oks.setCallback(callback);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        oks.setShareContentCustomizeCallback((platform1, paramsToShare) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">&quot;Wechat&quot;</span>.equals(platform1.getName()) || <span class=\"string\">&quot;WechatMoments&quot;</span>.equals(platform1.getName())) &#123;</span><br><span class=\"line\">                paramsToShare.setShareType(Platform.SHARE_WEBPAGE);<span class=\"comment\">//分享网页，既图文分享</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;SinaWeibo&quot;</span>.equals(platform1.getName())) &#123;</span><br><span class=\"line\">                paramsToShare.setText(content.getText() + <span class=\"string\">&quot; &quot;</span> + content.getTitleUrl());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置是否是直接分享</span></span><br><span class=\"line\">        oks.setSilent(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 启动分享GUI</span></span><br><span class=\"line\">        oks.show(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"实例化-ShareContent\"><a href=\"#实例化-ShareContent\" class=\"headerlink\" title=\"实例化 ShareContent\"></a>实例化 <code>ShareContent</code></h3><p>1、直接创建其对象<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ShareContent shareContent = <span class=\"keyword\">new</span> ShareContent.Builder()</span><br><span class=\"line\">        .setTitle(title)</span><br><span class=\"line\">        .setTitleUrl(url)</span><br><span class=\"line\">        .setText(text)</span><br><span class=\"line\">        .setImgUrl(imageUrl)</span><br><span class=\"line\">        .setUrl(url)</span><br><span class=\"line\">        .build();</span><br></pre></td></tr></table></figure></p>\n<p>2、需要分享功能的实体实现 <code>IShareable</code>，提供分享内容，如商品详情实体类等。</p>\n<h3 id=\"调用通用分享工具\"><a href=\"#调用通用分享工具\" class=\"headerlink\" title=\"调用通用分享工具\"></a>调用通用分享工具</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> CommonShare().share(context, shareContent);</span><br></pre></td></tr></table></figure>\n<p>这样，一行代码就实现了分享器的调用，是不是很简单，重点是不需要直接去操作 SDK 的调用方法，降低侵入性。</p>\n<h2 id=\"问题排查与解决\"><a href=\"#问题排查与解决\" class=\"headerlink\" title=\"问题排查与解决\"></a>问题排查与解决</h2><p>如果你按照文档接入了 SDK，运行程序，成功实现各个平台的分享，那么恭喜你，成功了。</p>\n<p>但是，如果在调试中发现分享失败，请检查集成步骤，参考官方问题说明进行解决。</p>\n<p>大多数分享的错误都出现参数上，可以将 Mob 的这些参数放在你的代码中测试：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">oks.setTitle(<span class=\"string\">&quot;分享标题--Title&quot;</span>);</span><br><span class=\"line\">oks.setTitleUrl(<span class=\"string\">&quot;http://mob.com&quot;</span>);</span><br><span class=\"line\">oks.setText(<span class=\"string\">&quot;分享测试文--Text&quot;</span>);</span><br><span class=\"line\">oks.setImageUrl(<span class=\"string\">&quot;http://f1.sharesdk.cn/imgs/2014/02/26/owWpLZo_638x960.jpg&quot;</span>);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Mob 的 ShareSDK 的集成还是很简单的，开发的很多 App 中都使用到了，接入很简单，官方给的文档也很清晰（主要还是集成步骤少，很多它都帮我们做了，无需再配置权限、注册回调页面等）。</p>\n<p>后面做的封装其实也是很基本的东西，但把这些 <strong>第三方库提供的方法包装一层</strong> 再使用是一个好习惯！写的多了，你就懂了~</p>\n","tags":["Android","第三方 SDK"]},{"title":"Git-将本地项目上传到GitHub","url":"/2018/02/28/Git-upload-project-repo/","content":"<p>1、在本地创建一个版本库（即文件夹），初始化为 Git 仓库<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure><br><span id=\"more\"></span></p>\n<p>2、把项目文件复制到这个文件夹里面（也可在已经存在项目文件的文件夹里执行第 1 步 Git 初始化操作）</p>\n<p>3、把项目添加到仓库<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在这个过程中其实可以一直使用 <code>git status</code> 来查看当前的状态。</p>\n</blockquote>\n<p>4、把项目提交到仓库<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&quot;注释内容&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>5、在 GitHub 上设置好 SSH 密钥后，新建一个远程仓库</p>\n<blockquote>\n<p>SSH 配置步骤此处不再赘述，自行查找；<br>在 GitHub 或码云等平台新建项目的过程也可提前完成。</p>\n</blockquote>\n<p>6、将本地仓库和远程仓库进行关联<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/username/repo.git</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：origin 后面加的是 GitHub 上创建好的仓库的地址。</p>\n</blockquote>\n<p>7、把本地仓库的项目推送到远程仓库上<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure><br>由于新建的远程仓库是空的，所以要加上 <code>-u</code> 这个参数，等远程仓库里面有了内容之后，下次再从本地仓库上传内容的时候只需下面这样就可以了：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure></p>\n<p><strong>重要！！！</strong>如果新建远程仓库的时候勾选了“<em>创建 README 文件</em>”会报错：<code>failed to push some refs to  https://github.com/username/repo.git</code>，这是由于新创建的那个仓库里面的 README 文件不在本地仓库目录中，这时可以通过以下命令先将内容合并一下：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git pull --rebase origin master</span><br></pre></td></tr></table></figure><br>这时再 push 就能成功了。</p>\n<p>等待一段时间，即可完成。此时再刷新项目的仓库就会发现工程文件已经上传成功了。</p>\n<p>至此就完成了将本地项目上传到 GitHub 等仓库的整个过程。</p>\n","tags":["GitHub","git","码云"]},{"title":"2019年6月随想","url":"/2019/06/08/My-Feelings-201906/","content":"<p>2019年6月随想</p>\n<span id=\"more\"></span>\n<p>翻看自己的博客站点，最近的一篇还是几个月前，快一年的时间，几乎没什么产出，离之前所定目标相去甚远。</p>\n<p>前几天读到一篇文章，叫「废掉一个人最隐蔽的方式，是让他忙到没时间成长」，深有感触。联想到近几月忙碌的工作，且包含大比例的重复性、同质化的工作，我有点焦虑。（省去很多字。。。）</p>\n<p>做的好的一点是四月初入了健身的坑，在同事的一句“健身房去吗”，第二天就办了卡，终于突破了自己，和志同道合者一起做喜欢的事，互相支持、互相督促，一起进步。后来又买了很多私教课，虽然经济上有些突然和巨大，从长远看是值得的，希望是也必须是，加油！</p>\n<p>Better：</p>\n<ol>\n<li>必须有时间成长，而不是无休止的工作</li>\n<li>有持续的增量成长</li>\n<li>平衡好工作与生活，学习与成长</li>\n<li>勇敢地去做那几件 TODO</li>\n</ol>\n<blockquote>\n<p>附上上面说的那篇文章：<a href=\"https://mp.weixin.qq.com/s/4dMsCI7azCpsZvqsiQCLyA\">https://mp.weixin.qq.com/s/4dMsCI7azCpsZvqsiQCLyA</a></p>\n</blockquote>\n<p>于 2019.06.07</p>\n","tags":["随笔"]},{"title":"Kotlin Learn Note","url":"/2018/02/28/Kotlin-Learn-Note/","content":"<p>Kotlin Learn Note<br><span id=\"more\"></span></p>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h3><h3 id=\"控制流：if、when、for、while\"><a href=\"#控制流：if、when、for、while\" class=\"headerlink\" title=\"控制流：if、when、for、while\"></a>控制流：if、when、for、while</h3><h4 id=\"If-表达式\"><a href=\"#If-表达式\" class=\"headerlink\" title=\"If 表达式\"></a>If 表达式</h4><p>在 Kotlin 中， <code>if</code> 是一个表达式，即它会返回一个值。 因此就不需要三元运算符（条件 ? 然后 : 否则） ，因为普通的 <code>if</code> 就能胜任这个角色。<br><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统用法</span></span><br><span class=\"line\">var max = a</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &lt; b) max = b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带 else</span></span><br><span class=\"line\">var <span class=\"attr\">max:</span> Int</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">\tmax = a</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tmax = b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作为表达式</span></span><br><span class=\"line\">val max = <span class=\"keyword\">if</span> (a &gt; b) a <span class=\"keyword\">else</span> b</span><br></pre></td></tr></table></figure></p>\n<p>if 的分支可以是代码块，最后的表达式作为该块的值：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val max = <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">\tprint(<span class=\"string\">&quot;Choose a&quot;</span>)</span><br><span class=\"line\">\ta</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tprint(<span class=\"string\">&quot;Choose b&quot;</span>)</span><br><span class=\"line\">\tb</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>如果你使用 <code>if</code> 作为表达式而不是语句（例如：返回它的值或者把它赋给变量） ，该表达式需要有 <code>else</code> 分支。</p>\n<h4 id=\"When-表达式\"><a href=\"#When-表达式\" class=\"headerlink\" title=\"When 表达式\"></a>When 表达式</h4><p>1.简单形式<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">when (x) &#123;</span><br><span class=\"line\">    <span class=\"number\">1</span> -&gt; print(<span class=\"string\">&quot;x == 1&quot;</span>)</span><br><span class=\"line\">    <span class=\"number\">2</span> -&gt; print(<span class=\"string\">&quot;x == 2&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; &#123; <span class=\"comment\">// 注意这个块</span></span><br><span class=\"line\">    \tprint(<span class=\"string\">&quot;x is neither 1 nor 2&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2.多分支用相同的方式处理——可以把多个分支条件放在一起，用逗号分隔：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">when (x) &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">1</span> -&gt; print(<span class=\"string\">&quot;x == 0 or x == 1&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">&quot;otherwise&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.任意表达式（而不只是常量） 作为分支条件<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">when (x) &#123;</span><br><span class=\"line\">    parseInt(s) -&gt; print(<span class=\"string\">&quot;s encodes x&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">&quot;s does not encode x&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4.检测一个值在（<code>in</code>） 或者不在（<code>!in</code>） 一个区间或者集合中：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">when (x) &#123;</span><br><span class=\"line\">    in <span class=\"number\">1.</span><span class=\"number\">.10</span> -&gt; print(<span class=\"string\">&quot;x is in the range&quot;</span>)</span><br><span class=\"line\">    in validNumbers -&gt; print(<span class=\"string\">&quot;x is valid&quot;</span>)</span><br><span class=\"line\">    !in <span class=\"number\">10.</span><span class=\"number\">.20</span> -&gt; print(<span class=\"string\">&quot;x is outside the range&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">&quot;none of the above&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>5.检测一个值是（<code>is</code>） 或者不是（<code>!is</code>） 一个特定类型的值<br>注意： 由于智能转换，你可以访问该类型的方法和属性而无需任何额外的检测。<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fun <span class=\"title\">hasPrefix</span><span class=\"params\">(x: Any)</span> </span>= when(x) &#123;</span><br><span class=\"line\">    is String -&gt; x.startsWith(<span class=\"string\">&quot;prefix&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"keyword\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>6.<code>when</code> 也可以用来取代 <code>if - else if</code> 链。如果不提供参数，所有的分支条件都是简单的布尔表达式，而当一个分支的条件为真时则执行该分支：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">when &#123;</span><br><span class=\"line\">    x.isOdd() -&gt; print(<span class=\"string\">&quot;x is odd&quot;</span>)</span><br><span class=\"line\">    x.isEven() -&gt; print(<span class=\"string\">&quot;x is even&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; print(<span class=\"string\">&quot;x is funny&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"For-循环\"><a href=\"#For-循环\" class=\"headerlink\" title=\"For 循环\"></a>For 循环</h4><p>语法<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (item in collection) print(item)</span><br></pre></td></tr></table></figure></p>\n<p>区间上迭代<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 整型区间</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i in <span class=\"number\">1.</span><span class=\"number\">.4</span>) print(i) <span class=\"comment\">// 输出“1234”</span></span><br><span class=\"line\"><span class=\"comment\">// 倒序迭代数字，步长为2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i in <span class=\"number\">6</span> downTo <span class=\"number\">0</span> step <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    println(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不包括其结束元素的区间</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i in <span class=\"number\">1</span> until <span class=\"number\">10</span>) &#123;   <span class=\"comment\">// i in [1, 10) 排除了 10</span></span><br><span class=\"line\">     println(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过索引遍历一个数组或者一个 list<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">val array = arrayOf(<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i in array.indices) &#123;</span><br><span class=\"line\">    println(array[i])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"While-循环\"><a href=\"#While-循环\" class=\"headerlink\" title=\"While 循环\"></a>While 循环</h4><p><code>while</code> 和 <code>do .. while</code> 和其它语言没什么区别<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (x &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\tx--</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\tval y = retrieveData()</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (y != <span class=\"keyword\">null</span>) <span class=\"comment\">// y 在此处可见</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"操作符和特殊符号\"><a href=\"#操作符和特殊符号\" class=\"headerlink\" title=\"操作符和特殊符号\"></a>操作符和特殊符号</h3><p>Kotlin 支持以下操作符和特殊符号：</p>\n<ul>\n<li><code>+</code> 、 <code>-</code> 、 <code>*</code> 、 <code>/</code> 、 <code>%</code> —— 数学操作符<ul>\n<li><code>*</code> 也用于将数组传递给 vararg 参数</li>\n</ul>\n</li>\n<li><code>=</code><ul>\n<li>赋值操作符</li>\n<li>也用于指定参数的默认值</li>\n</ul>\n</li>\n<li><code>+=</code> 、 <code>-=</code> 、 <code>*=</code> 、 <code>/=</code> 、 <code>%=</code> —— 广义赋值操作符</li>\n<li><code>++</code> 、 <code>--</code> —— 递增与递减操作符</li>\n<li><code>&amp;&amp;</code> 、 <code>||</code> 、 <code>!</code> —— 逻辑“与”、“或”、“非”操作符（对于位运算，请使用相应的中缀函数）</li>\n<li><code>==</code> 、 <code>!=</code> —— 相等操作符（对于非原生类型会翻译为调用 <code>equals()</code> ）</li>\n<li><code>===</code> 、 <code>!==</code> —— 引用相等操作符</li>\n<li><code>&lt;</code> 、 <code>&gt;</code> 、 <code>&lt;=</code> 、 <code>&gt;=</code> —— 比较操作符（对于非原生类型会翻译为调用 <code>compareTo()</code> ）</li>\n<li><code>[</code> 、 <code>]</code> —— 索引访问操作符（会翻译为调用 <code>get</code> 与 <code>set</code> ）</li>\n<li><code>!!</code> 断言一个表达式非空</li>\n<li><code>?.</code> 执行安全调用（如果接收者非空，就调用一个方法或访问一个属性）</li>\n<li><code>?:</code> 如果左侧的值为空，就取右侧的值（elvis 操作符）</li>\n<li><code>::</code> 创建一个成员引用或者一个类引用</li>\n<li><code>..</code> 创建一个区间</li>\n<li><code>:</code> 分隔声明中的名称与类型</li>\n<li><code>?</code> 将类型标记为可空</li>\n<li><code>-&gt;</code><ul>\n<li>分隔 lambda 表达式的参数与主体</li>\n<li>分隔在函数类型中的参数类型与返回类型声明</li>\n<li>分隔 when 表达式分支的条件与代码体</li>\n</ul>\n</li>\n<li><code>@</code><ul>\n<li>引入一个注解</li>\n<li>引入或引用一个循环标签</li>\n<li>引入或引用一个 lambda 表达式标签</li>\n<li>引用一个来自外部作用域的 “this”表达式</li>\n<li>引用一个外部超类</li>\n</ul>\n</li>\n<li><code>;</code> 分隔位于同一行的多个语句</li>\n<li><code>$</code> 在字符串模版中引用变量或者表达式</li>\n<li><code>_</code><ul>\n<li>在 lambda 表达式中代替未使用的参数</li>\n<li>在解构声明中代替未使用的参数</li>\n</ul>\n</li>\n</ul>\n","tags":["Kotlin"]},{"title":"RxJava2 学习","url":"/2019/07/06/RxJava2-study-notes1/","content":"<p>RxJava2 学习笔记。<br><span id=\"more\"></span></p>\n<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>RxJava —— 一个在 Java VM 上使用可观察序列来组成异步的、基于事件的程序库。</p>\n<h1 id=\"2-知识点\"><a href=\"#2-知识点\" class=\"headerlink\" title=\"2. 知识点\"></a>2. 知识点</h1><ul>\n<li>资源 1：<a href=\"https://www.jianshu.com/c/299d0a51fdd4\">简书——RxJava2.x 专题</a></li>\n<li>资源 2：<a href=\"https://www.e-learn.cn/content/java/1947154\">RxJava2 基本概念大全</a></li>\n</ul>\n<h2 id=\"2-1-RxJava2-教程（一）\"><a href=\"#2-1-RxJava2-教程（一）\" class=\"headerlink\" title=\"2.1 RxJava2 教程（一）\"></a>2.1 RxJava2 教程（一）</h2><h3 id=\"RxJava2-基础\"><a href=\"#RxJava2-基础\" class=\"headerlink\" title=\"RxJava2 基础\"></a>RxJava2 基础</h3><ul>\n<li>观察者模式的四大要素<ol>\n<li><code>Observable</code> 被观察者</li>\n<li><code>Observer</code> 观察者</li>\n<li><code>subscribe</code> 订阅</li>\n<li>事件</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>只有当上游和下游建立连接之后，上游才会开始发送事件。也就是调用了<code>subscribe()</code> 方法之后才开始发送事件。</p>\n</blockquote>\n<ul>\n<li><p>ObservableEmitter<br>Emitter 是发射器的意思，就是用来发出事件的，它可以发出三种类型的事件：</p>\n<ul>\n<li><code>onNext(T value)</code> 发出 next 事件</li>\n<li><code>onComplete()</code> 发出 complete 事件</li>\n<li><code>onError(Throwable error)</code> 发出 error 事件</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>Disposable</p>\n<ul>\n<li>一次性，用完即可丢弃的</li>\n<li>用它来切断 Observer（观察者）与 Observable（被观察者）之间的连接，当调用它的<code>dispose()</code>方法时，它就会将 Observer（观察者）与 Observable（被观察者）之间的连接切断，从而导致 Observer（观察者）收不到事件。</li>\n<li>把它理解成两根管道之间的一个机关，当调用它的<code>dispose()</code>方法时，它就会将两根管道切断，从而导致下游收不到事件。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-2-RxJava2-教程（二）\"><a href=\"#2-2-RxJava2-教程（二）\" class=\"headerlink\" title=\"2.2 RxJava2 教程（二）\"></a>2.2 RxJava2 教程（二）</h2><h3 id=\"线程调度\"><a href=\"#线程调度\" class=\"headerlink\" title=\"线程调度\"></a>线程调度</h3><h4 id=\"调度方法\"><a href=\"#调度方法\" class=\"headerlink\" title=\"调度方法\"></a>调度方法</h4><ul>\n<li><p><code>subscribeOn()</code> 指定的是上游发送事件的线程（调度被观察者运行的线程）</p>\n</li>\n<li><p><code>observeOn()</code> 指定的是下游接收事件的线程（调度观察者运行的线程）</p>\n</li>\n</ul>\n<p>多次指定上游的线程只有第一次指定的有效，也就是说多次调用<code>subscribeOn()</code> 只有第一次的有效，其余的会被忽略。</p>\n<p>多次指定下游的线程是可以的，也就是说每调用一次<code>observeOn()</code>，下游的线程就会切换一次。</p>\n<h4 id=\"线程选项（结合-RxAndroid）\"><a href=\"#线程选项（结合-RxAndroid）\" class=\"headerlink\" title=\"线程选项（结合 RxAndroid）\"></a>线程选项（结合 RxAndroid）</h4><ul>\n<li><code>Schedulers.io()</code> 代表 io 操作的线程，执行耗时操作。通常用于网络、读写文件等 io 密集型的操作</li>\n<li><code>Schedulers.computation()</code> 代表 CPU 计算密集型的操作，例如需要大量计算的操作</li>\n<li><code>Schedulers.newThread()</code> 代表一个常规的新线程</li>\n<li><code>AndroidSchedulers.mainThread()</code>  代表 Android 的主线程</li>\n</ul>\n<h2 id=\"2-3-RxJava2-教程（三）\"><a href=\"#2-3-RxJava2-教程（三）\" class=\"headerlink\" title=\"2.3 RxJava2 教程（三）\"></a>2.3 RxJava2 教程（三）</h2><h3 id=\"变换操作符\"><a href=\"#变换操作符\" class=\"headerlink\" title=\"变换操作符\"></a>变换操作符</h3><ul>\n<li><p>map</p>\n<p><code>map</code> 是 RxJava 中最简单的一个变换操作符了，它的作用就是对上游发送的每一个事件应用一个函数，使得每一个事件都按照指定的函数去变化。</p>\n</li>\n<li><p>flatMap</p>\n<p><code>flatMap</code> 将一个发送事件的上游 Observable 变换为多个发送事件的 Observables，然后将它们发射的事件合并后放进一个单独的 Observable 里。</p>\n</li>\n<li><p>concatMap</p>\n<p><code>concatMap</code> 和 flatMap 的作用几乎一样，只是它的结果是严格按照上游发送的顺序来发送的（保证顺序）。</p>\n</li>\n</ul>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>需求：如果是一个新用户，必须先注册，等注册成功之后再自动登录该怎么做呢？</p>\n<p>分析：这是一个嵌套的网络请求，首先需要去请求注册，待注册成功回调了再去请求登录的接口。</p>\n<p>解决：优雅的解决嵌套请求，用 <code>flatMap</code> 转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Api</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET</span></span><br><span class=\"line\">    <span class=\"function\">Observable&lt;LoginResponse&gt; <span class=\"title\">login</span><span class=\"params\">(<span class=\"meta\">@Body</span> LoginRequest request)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GET</span></span><br><span class=\"line\">    <span class=\"function\">Observable&lt;RegisterResponse&gt; <span class=\"title\">register</span><span class=\"params\">(<span class=\"meta\">@Body</span> RegisterRequest request)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注册和登录返回的都是 Observable，使用 <code>flatMap</code> 操作符转换为另一个 Observable：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">api.register(<span class=\"keyword\">new</span> RegisterRequest())            <span class=\"comment\">//发起注册请求</span></span><br><span class=\"line\">    .subscribeOn(Schedulers.io())               <span class=\"comment\">//在IO线程进行网络请求</span></span><br><span class=\"line\">    .observeOn(AndroidSchedulers.mainThread())  <span class=\"comment\">//回到主线程去处理请求注册结果</span></span><br><span class=\"line\">    .doOnNext(<span class=\"keyword\">new</span> Consumer&lt;RegisterResponse&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(RegisterResponse registerResponse)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//先根据注册的响应结果去做一些操作</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .observeOn(Schedulers.io())                 <span class=\"comment\">//回到IO线程去发起登录请求</span></span><br><span class=\"line\">    .flatMap(<span class=\"keyword\">new</span> Function&lt;RegisterResponse, ObservableSource&lt;LoginResponse&gt;&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ObservableSource&lt;LoginResponse&gt; <span class=\"title\">apply</span><span class=\"params\">(RegisterResponse registerResponse)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> api.login(<span class=\"keyword\">new</span> LoginRequest());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .observeOn(AndroidSchedulers.mainThread())  <span class=\"comment\">//回到主线程去处理请求登录的结果</span></span><br><span class=\"line\">    .subscribe(<span class=\"keyword\">new</span> Consumer&lt;LoginResponse&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(LoginResponse loginResponse)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">          Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">&quot;登录成功&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">accept</span><span class=\"params\">(Throwable throwable)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">          Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, <span class=\"string\">&quot;登录失败&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-4-RxJava2-教程（四）\"><a href=\"#2-4-RxJava2-教程（四）\" class=\"headerlink\" title=\"2.4 RxJava2 教程（四）\"></a>2.4 RxJava2 教程（四）</h2><h3 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h3><h2 id=\"2-5-RxJava2-教程（五）\"><a href=\"#2-5-RxJava2-教程（五）\" class=\"headerlink\" title=\"2.5 RxJava2 教程（五）\"></a>2.5 RxJava2 教程（五）</h2><p>Backpressure；上下游流速不均衡的源头，线程同步/异步情况</p>\n<h2 id=\"2-6-RxJava2-教程（六）\"><a href=\"#2-6-RxJava2-教程（六）\" class=\"headerlink\" title=\"2.6 RxJava2 教程（六）\"></a>2.6 RxJava2 教程（六）</h2><p>解决上下游流速不均衡的问题（使用 <code>Observable</code>）：</p>\n<ul>\n<li><p>一是从数量上进行治理, 减少发送进水缸里的事件</p>\n<ul>\n<li><code>.sample(2, TimeUnit.SECONDS);</code> // 进行 sample 采样</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>二是从速度上进行治理, 减缓事件发送进水缸的速度</p>\n<ul>\n<li><code>Thread.sleep(2000);</code> // 发送事件之后延时 2 秒</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-7-RxJava2-教程（七）\"><a href=\"#2-7-RxJava2-教程（七）\" class=\"headerlink\" title=\"2.7 RxJava2 教程（七）\"></a>2.7 RxJava2 教程（七）</h2><h3 id=\"Flowable\"><a href=\"#Flowable\" class=\"headerlink\" title=\"Flowable\"></a>Flowable</h3><h2 id=\"2-8-RxJava2-教程（八）\"><a href=\"#2-8-RxJava2-教程（八）\" class=\"headerlink\" title=\"2.8 RxJava2 教程（八）\"></a>2.8 RxJava2 教程（八）</h2><p>Flowable；</p>\n<p>BackpressureStrategy</p>\n<h2 id=\"2-9-RxJava2-教程（九）\"><a href=\"#2-9-RxJava2-教程（九）\" class=\"headerlink\" title=\"2.9 RxJava2 教程（九）\"></a>2.9 RxJava2 教程（九）</h2><p>Flowable，如何正确的去实现一个完整的响应式拉取</p>\n<h2 id=\"2-10-RxJava2-教程（十）\"><a href=\"#2-10-RxJava2-教程（十）\" class=\"headerlink\" title=\"2.10 RxJava2 教程（十）\"></a>2.10 RxJava2 教程（十）</h2><p>RxJavaPlugins、Retrofit 自定义异常处理</p>\n","tags":["RxJava2"]},{"title":"Fragment 使用 hide/show 时的生命周期","url":"/2018/03/10/android-Fragment-hide-show/","content":"<p>当你第一眼看到这个标题的时候，肯定很惊讶。没错，我也觉得标题可能不规范，不过真的解决我在使用 Fragment 时遇到的坑，这里分享出来，供大家参考，一起交流。<br><span id=\"more\"></span></p>\n<p>先来描述一下我的 APP 中使用到 Fragment 的功能和遇到的问题，第一个 Fragment 里是一个视频播放控件，希望在切换到其他 Fragment 的时候，暂停视频；再次回到这个 Fragment 时恢复播放。由于我使用的是 hide 和 show 的方式进行的 Fragment 之间的切换，每个 Fragment 只被初始化一次。那么问题来了，我尝试按照网上说的 Fragment 的生命周期，在 onPause 或 onStop 方法中暂停，在 onResume 中恢复播放，可是发现压根没走这些方法，onPause 等方法不会调用，onResume 只在刚进入是调用了一次，也没法做到让视频暂停。</p>\n<p>话说回来，Fragment 的使用越来越普遍了，掌握它的生命周期以及注意事项是非常有必要的，首先</p>\n<blockquote>\n<p>All subclasses of Fragment must include a public empty constructor. The framework will often re-instantiate a fragment class when needed, in particular during state restore, and needs to be able to find this constructor to instantiate it.</p>\n</blockquote>\n<p>也就是说每个继承 Fragment 的类都必须要有公开的构造方法，以便 fragment能在需要的时候还原原来的状态。感觉很难理解？通俗的说就是：SDK还原 fragment 数据的时候，肯定先通过调用 XXX.newInstance() 方法，获取到 fragment 的实例对象。这就是为什么要提供一个公开的构造方法的原因了！</p>\n<p>其次，生命周期是必须了解的，这个就没必要废话了，网上搜下到处都是。</p>\n<p>重点来了，跟我使用 Fragment 遇到的问题一样，这里再举一个 Fragment 使用时常遇到的情况，在一个 Activity 中通过菜单选项的点击来切换不同的Fragment，通常是需要保存 Fragment 的状态的，比如编辑个人信息模块时点击其他菜单，返回时你编辑的信息应该要保存的，而不是再次初始化。这时就该使用 Fragment 的 hide/show 方法了。<br>很快你就会发现 Fragment 的生命周期怎么不走了？</p>\n<p>这时此方法 onHiddenChanged 派上用场了，当 Fragment 隐藏时，该方法会调用传入参数为true表示该 Fragment 被隐藏了，当 Fragment 调用了 show 方法后，该方法传入的参数为 false，表示该 Fragment 正在显示！</p>\n<p>所以总结起来，如果使用 hide/show 方法来控制 Fragment 的使用时，原本需要在 onResume 以及 onPause 方法做的事情就可以迁移到 onHiddenChanged 时进行管理，如：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (hidden) &#123;<span class=\"comment\">// 不在最前端界面显示</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">// 重新显示到最前端</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>这样就能完美实现当前 Fragment 在隐藏和显示时分别需要做的事了，我的 APP 视频暂停与播放的问题就解决了。<br>附上我的 APP 中使用的代码，这样就能理解了：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onHiddenChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> hidden)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onHiddenChanged(hidden);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hidden) &#123;  <span class=\"comment\">//不在最前端界面显示</span></span><br><span class=\"line\">        mVideoView.pause();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//重新显示到最前端</span></span><br><span class=\"line\">        mVideoView.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于<code>add()</code>, <code>show()</code>, <code>hide()</code>, <code>replace()</code>方法的正确使用，网上还有更多介绍，我这里简单做一个我遇到的问题以及解决方案的总结，分享给大家。</p>\n<p>下面贴出完整的生命周期：</p>\n<p><img src=\"https://s2.ax1x.com/2019/03/13/Akwk59.png\" alt=\"img_fragment_llifecycle\"></p>\n","tags":["Android","Fragment"]},{"title":"SpringBoot 快速入门","url":"/2020/05/15/SpringBoot-learn-quick-start/","content":"<p>SpringBoot 快速入门学习笔记。</p>\n<span id=\"more\"></span>\n<h1 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h1><h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>打开 IDEA 新建项目，选择 <code>Spring Initializr</code>，勾选 <code>Web</code> 依赖。</p>\n<h2 id=\"SpringBoot-配置\"><a href=\"#SpringBoot-配置\" class=\"headerlink\" title=\"SpringBoot 配置\"></a>SpringBoot 配置</h2><h3 id=\"两种配置文件\"><a href=\"#两种配置文件\" class=\"headerlink\" title=\"两种配置文件\"></a>两种配置文件</h3><p>SpringBoot 的配置文件有两种：<code>application.properties</code> 和 <code>application.yml</code>。两种文件效果一样，只是写法不同。</p>\n<p><code>application.properties</code> 文件配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">server.port=8080</span></span><br><span class=\"line\"><span class=\"string\">server.servlet.context-path=/test</span></span><br></pre></td></tr></table></figure>\n<p><code>application.yml</code> 文件配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/test</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：冒号后面必须加个空格，不能写成 port:8080，需要在 port: 和 8080 之间加空格。</p>\n</blockquote>\n<p>对比来看 <code>application.yml</code> 文件写法更精简，建议使用。</p>\n<h3 id=\"属性配置\"><a href=\"#属性配置\" class=\"headerlink\" title=\"属性配置\"></a>属性配置</h3><p>可在 <code>application.yml</code> 配置文件里自定义配置信息并在项目中读取。</p>\n<h4 id=\"单个属性读取\"><a href=\"#单个属性读取\" class=\"headerlink\" title=\"单个属性读取\"></a>单个属性读取</h4><p>配置信息 <code>name</code> 和 <code>age</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">A</span></span><br><span class=\"line\"><span class=\"attr\">age:</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n<p>在 <code>Controller</code> 中通过 <code>@Value(&quot;$&#123;age&#125;&quot;)</code> 注解读取配置文件中的属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;age&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/hello&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name + age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过对象多属性一起读取\"><a href=\"#通过对象多属性一起读取\" class=\"headerlink\" title=\"通过对象多属性一起读取\"></a>通过对象多属性一起读取</h4><p><code>application.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">girl:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">B</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n<p>新建类 <code>Girl.java</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;girl&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Girl</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Controller 中使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Girl girl;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/sayProperties&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayProperties</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> girl.getName() + girl.getAge();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多环境配置\"><a href=\"#多环境配置\" class=\"headerlink\" title=\"多环境配置\"></a>多环境配置</h3><p>配置开发环境和生产环境</p>\n<p>新建 <code>application-dev.yml</code> 作为开发环境配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8082</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">girl:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">C</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>新建 <code>application-prod.yml</code> 作为生产环境配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">girl:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">B</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n<p>修改 <code>application.yml</code>，配置为开发环境</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n<p>如需配置为生产环境，将 <code>active: dev</code> 改为 <code>active: prod</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">prod</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><ul>\n<li>Slf4j</li>\n<li>LogBack</li>\n</ul>\n<p>Log 的配置</p>\n<h2 id=\"Controller-的使用\"><a href=\"#Controller-的使用\" class=\"headerlink\" title=\"Controller 的使用\"></a>Controller 的使用</h2><ul>\n<li><strong>@Controller</strong> 处理 http 请求</li>\n<li><strong>@RestController</strong> Spring4 之后新加的注解，原来返回 json 需要 @ResponseBody 配合  @Controller</li>\n<li><strong>@RequestMapping</strong> 配置 url 映射</li>\n<li><strong>@PathVariable</strong> 获取 url 中的数据</li>\n<li><strong>@RequestParam</strong> 获取请求参数的值</li>\n<li><strong>@GetMapping</strong> 组合注解</li>\n</ul>\n<h3 id=\"RestController\"><a href=\"#RestController\" class=\"headerlink\" title=\"@RestController\"></a>@RestController</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>@RestController</code> = <code>@Controller</code> + <code>@ResponseBody</code> 组成。等号右边两位简单介绍两句，就明白我们 <code>@RestController</code> 的意义了：</p>\n<ul>\n<li><p><code>@Controller</code> 将当前修饰的类注入 SpringBoot IOC 容器，使得从该类所在的项目跑起来的过程中，这个类就被实例化。当然也有语义化的作用，即代表该类是充当 Controller 的作用。</p>\n</li>\n<li><p><code>@ResponseBody</code> 它的作用简短截说就是指该类中所有的 API 接口返回的数据，不管你对应的方法返回 Map 或是其他 Object，它会以 Json 字符串的形式返回给客户端。</p>\n<blockquote>\n<p>尝试了一下，如果返回的是 String 类型，则仍然是 String。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;test&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">testGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;() &#123;&#123;</span><br><span class=\"line\">            put(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;SpringBoot&quot;</span>);</span><br><span class=\"line\">        &#125;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;testStr&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testGetStr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;OK&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这部分代码对于 <code>Map</code> 返回则是 <code>JSON String</code>，对于 <code>String</code> 则仍然是 <code>String</code>。</p>\n<p>当将 <code>@RestController</code> 换成 <code>@Controller</code> 之后，对于返回类型为 <code>Map</code> 的结果如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">Whitelabel Error Page</span><br><span class=\"line\">This application has no explicit mapping for /error, so you are seeing this as a fallback.</span><br><span class=\"line\"></span><br><span class=\"line\">Fri May 15 09:33:57 CST 2020</span><br><span class=\"line\">There was an unexpected error (type=Internal Server Error, status=500).</span><br><span class=\"line\">Circular view path [hello]: would dispatch back to the current handler URL [/hello] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.)</span><br></pre></td></tr></table></figure>\n<p>从报错可以看见，当 <code>@Controller</code> 修饰的时候，Spring 以为会返回一个 View（也就是 MVC 中的 C），但是返回的东西却是一个 Map。</p>\n<h3 id=\"RequestMapping\"><a href=\"#RequestMapping\" class=\"headerlink\" title=\"@RequestMapping\"></a>@RequestMapping</h3><h4 id=\"给类配置访问路径\"><a href=\"#给类配置访问路径\" class=\"headerlink\" title=\"给类配置访问路径\"></a>给类配置访问路径</h4><p><code>@RequestMapping(&quot;/hello&quot;)</code></p>\n<p>url 前缀，一般跟类名相似。</p>\n<h4 id=\"给方法配置多个访问路径\"><a href=\"#给方法配置多个访问路径\" class=\"headerlink\" title=\"给方法配置多个访问路径\"></a>给方法配置多个访问路径</h4><p>给 value 配置多个路径的集合</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &#123;&quot;/happy&quot;, &quot;/hi&quot;&#125;, method = RequestMethod.GET)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHi</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;happy or Hi&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问 <code>http://localhost:8080/hello/happy</code> 或 <code>http://localhost:8080/hello/hi</code> 均可进入方法 <code>sayHi()</code>。</p>\n<h3 id=\"PathVariable\"><a href=\"#PathVariable\" class=\"headerlink\" title=\"@PathVariable\"></a>@PathVariable</h3><p>用来获取 url 中的参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/go/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">go</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> String id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;id: &quot;</span> + id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问地址：<code>http://localhost:8080/hello/go/12</code></p>\n<p><code>id</code> 也可以放前面，效果一样。</p>\n<h3 id=\"RequstParam\"><a href=\"#RequstParam\" class=\"headerlink\" title=\"@RequstParam\"></a>@RequstParam</h3><p>获取请求参数的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/come&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRequestParam</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;id&quot;)</span> String id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;id: &quot;</span> + id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问地址：<code>http://localhost:8080/hello/come?id=123</code></p>\n<p>给参数加默认值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/come2&quot;, method = RequestMethod.GET)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getRequestParamDefValue</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;id&quot;, required = false, defaultValue = &quot;0&quot;)</span> String id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;id: &quot;</span> + id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当 <code>id</code> 不传时默认是 0。</p>\n<h3 id=\"GetMapping\"><a href=\"#GetMapping\" class=\"headerlink\" title=\"@GetMapping\"></a>@GetMapping</h3><p>简化 <code>@RequestMapping</code> 的写法，还有 <code>@PostMapping</code> 等。</p>\n<h2 id=\"数据库操作-JPA\"><a href=\"#数据库操作-JPA\" class=\"headerlink\" title=\"数据库操作 JPA\"></a>数据库操作 JPA</h2><p>JPA（Java Persistence API）定义了一系列的对象持久化的标准，目前实现这一规范的产品有 <code>Hibernate</code>、<code>TopLink</code> 等。</p>\n<h3 id=\"配置引入-MySQL-和-JPA\"><a href=\"#配置引入-MySQL-和-JPA\" class=\"headerlink\" title=\"配置引入 MySQL 和 JPA\"></a>配置引入 MySQL 和 JPA</h3><p>修改 <code>pom.xml</code> 文件添加 <code>JPA</code> 和 <code>MySQL</code> 依赖。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改 <code>application.yml</code> 文件，配置 <code>JPA</code> 和 <code>MySQL</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">spring:</span><br><span class=\"line\">  datasource:</span><br><span class=\"line\">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class=\"line\">    username: root</span><br><span class=\"line\">    password: 123456</span><br><span class=\"line\">    url: jdbc:mysql://localhost/db_name?characterEncoding=utf-8&amp;useSSL=false</span><br><span class=\"line\">  jpa:</span><br><span class=\"line\">    hibernate:</span><br><span class=\"line\">      ddl-auto: update</span><br><span class=\"line\">    show-sql: true</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：url 中最后的 db_name 是数据库名字</p>\n</blockquote>\n<p>ddl-auto 可选参数有五种：</p>\n<ul>\n<li>create 启动时删数据库中的表，然后创建，退出时不删除数据表。</li>\n<li>create-drop 启动时删数据库中的表，然后创建，退出时删除数据表。如果表不存在报错。</li>\n<li>update 如果启动时表格式不一致则更新表，原有数据保留。</li>\n<li>none 不进行配置</li>\n<li>validate 项目启动表结构进行校验。如果不一致则报错。</li>\n</ul>\n<h3 id=\"创建数据库和表\"><a href=\"#创建数据库和表\" class=\"headerlink\" title=\"创建数据库和表\"></a>创建数据库和表</h3><p>创建数据库，建数据库时编码应选用 <code>utf-8 utf8mb4</code>，以便能存储表情符号等。</p>\n<p>然后在项目中新建类 User：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@NoArgsConstructor</span>  <span class=\"comment\">// 需要有空参构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行项目，数据库会自动创建表 user。</p>\n<h3 id=\"增删改查\"><a href=\"#增删改查\" class=\"headerlink\" title=\"增删改查\"></a>增删改查</h3><p>创建 UserRepository</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">User</span>, <span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">findAllByAge</span><span class=\"params\">(Integer age)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建 Controller 类 UserController</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserRepository repository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查询所有用户</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/users&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">getAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repository.findAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加一个用户</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> age</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回新添加的对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(value = &quot;/add&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">add</span><span class=\"params\">(<span class=\"meta\">@RequestParam(&quot;name&quot;)</span> String name,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    <span class=\"meta\">@RequestParam(&quot;age&quot;)</span> Integer age)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        User User = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        User.setAge(age);</span><br><span class=\"line\">        User.setName(name);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> repository.save(User);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更新</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> age</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@PutMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">update</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"meta\">@RequestParam(&quot;name&quot;)</span> String name,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"meta\">@RequestParam(&quot;age&quot;)</span> Integer age)</span> </span>&#123;</span><br><span class=\"line\">        User User = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">        User.setId(id);</span><br><span class=\"line\">        User.setName(name);</span><br><span class=\"line\">        User.setAge(age);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> repository.save(User);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过 id 查询一个用户</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">findOne</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repository.findById(id).get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> id</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@DeleteMapping(value = &quot;/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class=\"line\">        repository.deleteById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过年龄查</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> age</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(value = &quot;/age/&#123;age&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">findByAge</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;age&quot;)</span> Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repository.findAllByAge(age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上通过 JPA 完成了增删改查。一般地，我们把业务逻辑放在 Service 中。</p>\n<h1 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h1><ul>\n<li>DAO 层设计与开发</li>\n<li>Service 层设计与开发</li>\n<li>Controller 层设计与开发</li>\n</ul>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><h4 id=\"1-设计数据库\"><a href=\"#1-设计数据库\" class=\"headerlink\" title=\"1. 设计数据库\"></a>1. 设计数据库</h4><h4 id=\"2-数据库对象：数据表映射对象\"><a href=\"#2-数据库对象：数据表映射对象\" class=\"headerlink\" title=\"2. 数据库对象：数据表映射对象\"></a>2. 数据库对象：数据表映射对象</h4><h5 id=\"2-1-Entity\"><a href=\"#2-1-Entity\" class=\"headerlink\" title=\"2.1 Entity\"></a>2.1 Entity</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table(name = &quot;tb_(name)_&quot;)</span>  <span class=\"comment\">// 数据库表和数据对象不同时加此注解</span></span><br><span class=\"line\"><span class=\"meta\">@DynamicUpdate</span>  <span class=\"comment\">// 更新日期</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CccEntity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Id</span>  <span class=\"comment\">// 主键</span></span><br><span class=\"line\">    <span class=\"meta\">@GeneratedValue</span>  <span class=\"comment\">// 自增</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer categoryId;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@Transient：忽略</p>\n<h5 id=\"2-2-DTO——数据传输对象\"><a href=\"#2-2-DTO——数据传输对象\" class=\"headerlink\" title=\"2.2 DTO——数据传输对象\"></a>2.2 DTO——数据传输对象</h5><p>各个层里传输用</p>\n<h4 id=\"3-DAO\"><a href=\"#3-DAO\" class=\"headerlink\" title=\"3. DAO\"></a>3. DAO</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">XxxRepository</span> <span class=\"keyword\">extends</span> <span class=\"title\">JpaRepository</span>&lt;<span class=\"title\">entity</span>, 主键&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-Service\"><a href=\"#4-Service\" class=\"headerlink\" title=\"4. Service\"></a>4. Service</h4><h5 id=\"4-1\"><a href=\"#4-1\" class=\"headerlink\" title=\"4.1\"></a>4.1</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SssService</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-2-实现\"><a href=\"#4-2-实现\" class=\"headerlink\" title=\"4.2 实现\"></a>4.2 实现</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SssServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">SssService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> XxxRepository repository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CccEntity <span class=\"title\">findOne</span><span class=\"params\">(Integer categoryId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repository.findOne(categoryId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;CccEntity&gt; <span class=\"title\">findAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> repository.findAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对象的属性拷贝：<code>BeanUtils.copyProperties(source, target);</code></p>\n<p>列表分页：Page，Pageable（接口），PageRequest</p>\n<p>可将分页列表数据进行封装和转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CountPageData</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long totalCount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;T&gt; items;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasMore;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CountPageData</span><span class=\"params\">(List&lt;T&gt; items, <span class=\"keyword\">boolean</span> hasMore, Number totalCount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = items;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hasMore = hasMore;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.totalCount = totalCount.longValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">CountPageData&lt;T&gt; <span class=\"title\">of</span><span class=\"params\">(Page&lt;T&gt; page)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CountPageData&lt;&gt;(page.getContent(), page.hasNext(), page.getTotalElements());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use</span></span><br><span class=\"line\">CountPageData cpd = CountPageData.of(Page 对象);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-Controller\"><a href=\"#5-Controller\" class=\"headerlink\" title=\"5. Controller\"></a>5. Controller</h4><h5 id=\"5-1-Controller\"><a href=\"#5-1-Controller\" class=\"headerlink\" title=\"5.1 Controller\"></a>5.1 Controller</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/buyer/order&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BuyerOrderController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/detail&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/cancel&quot;)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-2-Form\"><a href=\"#5-2-Form\" class=\"headerlink\" title=\"5.2 Form\"></a>5.2 Form</h5><p><strong>@JsonProperty(“name”)</strong>：返回给使用者（前端）时的对象名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonProperty(&quot;created_at&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@JsonSerialize(using = DateTimeSerializer.class)</span></span><br><span class=\"line\"><span class=\"meta\">@JsonDeserialize(using = DateTimeDeserializer.class)</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> LocalDateTime createdAt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-测试\"><a href=\"#6-测试\" class=\"headerlink\" title=\"6. 测试\"></a>6. 测试</h4><p>以上三步都需要单元测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 断言</span></span><br><span class=\"line\">Assert.asseretNotMull(result);</span><br><span class=\"line\">Assert.assertNotEquals(<span class=\"number\">0</span>, actual);</span><br><span class=\"line\">Assert.assertTrue(<span class=\"string\">&quot;message&quot;</span>, condition);</span><br></pre></td></tr></table></figure>\n","tags":["Java","SpringBoot"]},{"title":"NoHttpConnecter——基于 NoHttp 的封装","url":"/2018/03/13/android-NoHttpConnecter-use/","content":"<p>基于 NoHttp 的封装，主要包括字符串、Bitmap、JsonArray 等的 GET 和 POST 请求、文件上传下载方法的简单封装，以及五种缓存模式的使用。<br><span id=\"more\"></span></p>\n<p>首先对 NoHttp 网络框架做一个简介</p>\n<blockquote>\n<p>Nohttp 是一个 Android Http 标准框架，底层可动态切换 OkHttp、URLConnection，与 RxJava 完美结合，支持缓存数据到数据库或 SD 卡（缓存数据自动加密），支持请求 Restful 风格的接口，比 Retrofit 更简单易用。</p>\n</blockquote>\n<p><strong>Nohttp</strong> 框架特性</p>\n<ul>\n<li>动态配置底层框架为 <strong>OkHttp</strong>、HttpURLConnection</li>\n<li>支持异步请求、支持同步请求</li>\n<li>多文件上传，支持大文件上传，表单提交数据</li>\n<li>文件下载、上传下载、上传和下载的进度回调、错误回调</li>\n<li>支持 Json、xml、Map、List 的提交</li>\n<li>完美的 Http 缓存模式，可指定缓存到数据库、SD 卡，缓存数据已安全加密</li>\n<li>自定义 Request，直接请求 JsonObject、JavaBean 等</li>\n<li>Cookie 的自动维持，App 重启、关开机后还持续维持</li>\n<li>http 301 302 303 304 307 重定向，支持多层嵌套重定向</li>\n<li>Https、自签名网站 Https 的访问、支持双向验证</li>\n<li>失败重试机制，支持请求优先级</li>\n<li>GET、POST、PUT、PATCH、HEAD、DELETE、OPTIONS、TRACE 等请求协议</li>\n<li>用队列保存请求，平均分配多线程的资源，支持多个请求并发</li>\n<li>支持取消某个请求、取消指定多个请求、取消所有请求</li>\n</ul>\n<p>这么多好用的功能，难道你不想试试？</p>\n<p>NoHttp 开源框架地址：<a href=\"https://github.com/yanzhenjie/NoHttp\">https://github.com/yanzhenjie/NoHttp</a></p>\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><h4 id=\"1-Gradle添加依赖（推荐）\"><a href=\"#1-Gradle添加依赖（推荐）\" class=\"headerlink\" title=\"1. Gradle添加依赖（推荐）\"></a>1. Gradle添加依赖（推荐）</h4><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&#x27;com.yanzhenjie.nohttp:okhttp:1.1.2&#x27;</span> (可能非最新版)</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-需要的权限\"><a href=\"#2-需要的权限\" class=\"headerlink\" title=\"2. 需要的权限\"></a>2. 需要的权限</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-初始化\"><a href=\"#3-初始化\" class=\"headerlink\" title=\"3. 初始化\"></a>3. 初始化</h4><p>初始化 NoHttp，并设置 NoHttp 底层采用那种网络框架去请求，建议把初始化方法放到 <strong>Application</strong> 中 <em>onCreate</em> 生命周期方法里面。还有别忘了在<code>manifest.xml</code>中注册<code>Application</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化 NoHttp</span></span><br><span class=\"line\">NoHttp.initialize(<span class=\"keyword\">this</span>, <span class=\"keyword\">new</span> NoHttp.Config()</span><br><span class=\"line\">        .setConnectTimeout(<span class=\"number\">30</span> * <span class=\"number\">1000</span>)  <span class=\"comment\">// 设置全局连接超时时间，单位毫秒，默认10s。</span></span><br><span class=\"line\">        .setReadTimeout(<span class=\"number\">30</span> * <span class=\"number\">1000</span>)  <span class=\"comment\">// 设置全局服务器响应超时时间，单位毫秒，默认10s。</span></span><br><span class=\"line\">        <span class=\"comment\">// 配置缓存，默认保存数据库DBCacheStore，保存到SD卡使用DiskCacheStore。</span></span><br><span class=\"line\">        .setCacheStore(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> DBCacheStore(<span class=\"keyword\">this</span>).setEnable(<span class=\"keyword\">true</span>) <span class=\"comment\">// 如果不使用缓存，设置setEnable(false)禁用。</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\">// 配置Cookie，默认保存数据库DBCookieStore，开发者可以自己实现。</span></span><br><span class=\"line\">        .setCookieStore(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> DBCookieStore(<span class=\"keyword\">this</span>).setEnable(<span class=\"keyword\">true</span>) <span class=\"comment\">// 如果不维护cookie，设置false禁用。</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"comment\">// 配置网络层，默认使用URLConnection，如果想用OkHttp：OkHttpNetworkExecutor。</span></span><br><span class=\"line\">        .setNetworkExecutor(<span class=\"keyword\">new</span> OkHttpNetworkExecutor())</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-接下来，你就可以愉快的进行网络请求了：\"><a href=\"#4-接下来，你就可以愉快的进行网络请求了：\" class=\"headerlink\" title=\"4.接下来，你就可以愉快的进行网络请求了：\"></a>4.接下来，你就可以愉快的进行网络请求了：</h4><ul>\n<li><p>new 队列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">RequestQueue requestQueue = NoHttp.newRequestQueue();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>new 请求</p>\n<p>比如这样，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Request&lt;String&gt; request = NoHttp.createStringRequest(url, RequestMethod.GET);</span><br></pre></td></tr></table></figure>\n<p>或者这样，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Request&lt;JSONObject&gt; objRequest = NoHttp.createJsonObjectRequest(url, RequestMethod.POST);</span><br></pre></td></tr></table></figure>\n<p>…等等（支持更多，如 JsonArray、Bitmap、byte[] 或自定义请求类型）。然后把需要的请求参数添加进来：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">.add(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;name&quot;</span>) <span class=\"comment\">// String类型</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把请求添加到队列，完成请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">requestQueue.add(what, request, responseListener);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>回调对象，接受请求结果</p>\n<p>处理成功、失败等方法的回调，实现当前界面的业务和逻辑。</p>\n<blockquote>\n<ul>\n<li>添加请求到队列时有一个what，这个what会在<code>responseLisetener</code>响应时回调回来，所以可以用一个<code>responseLisetener</code>接受多个请求的响应，用 what 来区分结果。</li>\n<li><strong>强烈建议</strong>把生成队列写成懒汉单例模式，因为每新建队列就会 new 出相应个数的线程来，同时只有线程数固定了，队列的作用才会发挥到最大。</li>\n</ul>\n</blockquote>\n</li>\n<li><p>取消请求</p>\n<p>在组件销毁的时候（<em>onDestroy()</em>）调用队列的按照 sign 取消的方法即可取消</p>\n</li>\n</ul>\n<p>这时我们发现有很多重复的操作，每个 Activity 和 Fragment 都这么写就显得有点麻烦了，再加上上面的两条重要提示，所以我们这里把队列进行单例模式封装，并把这些操作封装在 <code>BaseActivity</code>、<code>BaseFragment</code> 中。</p>\n<p><strong>以下是 NoHttp 简单的封装，方便在项目中使用。</strong></p>\n<h5 id=\"1-NoHttp-请求\"><a href=\"#1-NoHttp-请求\" class=\"headerlink\" title=\"1. NoHttp 请求\"></a>1. NoHttp 请求</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpResponseListener</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">OnResponseListener</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Activity mActivity;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Dialog</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> WaitDialog mWaitDialog;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Request</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Request&lt;?&gt; mRequest;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 结果回调</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpListener&lt;T&gt; callback;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> activity     context用来实例化dialog</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request      请求对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> httpCallback 回调对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> canCancel    是否允许用户取消请求</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> isLoading    是否显示dialog</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpResponseListener</span><span class=\"params\">(Activity activity, Request&lt;?&gt; request, HttpListener&lt;T&gt; httpCallback,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                <span class=\"keyword\">boolean</span> canCancel, <span class=\"keyword\">boolean</span> isLoading)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mActivity = activity;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mRequest = request;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span> &amp;&amp; isLoading) &#123;</span><br><span class=\"line\">            mWaitDialog = <span class=\"keyword\">new</span> WaitDialog(activity);</span><br><span class=\"line\">            mWaitDialog.setCancelable(canCancel);</span><br><span class=\"line\">            mWaitDialog.setOnCancelListener(dialog -&gt; mRequest.cancel());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.callback = httpCallback;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 开始请求, 这里显示一个dialog</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">(<span class=\"keyword\">int</span> what)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mWaitDialog != <span class=\"keyword\">null</span> &amp;&amp; !mActivity.isFinishing() &amp;&amp; !mWaitDialog.isShowing())</span><br><span class=\"line\">            mWaitDialog.show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 结束请求, 这里关闭dialog</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinish</span><span class=\"params\">(<span class=\"keyword\">int</span> what)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mWaitDialog != <span class=\"keyword\">null</span> &amp;&amp; mWaitDialog.isShowing())</span><br><span class=\"line\">            mWaitDialog.dismiss();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 成功回调</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSucceed</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Response&lt;T&gt; response)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里判断一下http响应码，这个响应码问下你们的服务端你们的状态有几种，一般是200成功。</span></span><br><span class=\"line\">            <span class=\"comment\">// w3c标准http响应码：http://www.w3school.com.cn/tags/html_ref_httpmessages.asp</span></span><br><span class=\"line\"></span><br><span class=\"line\">            callback.onSucceed(what, response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 失败回调</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailed</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Response&lt;T&gt; response)</span> </span>&#123;</span><br><span class=\"line\">        Exception exception = response.getException();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> NetworkError) &#123;<span class=\"comment\">// 网络不好</span></span><br><span class=\"line\">            Toast.show(mActivity, R.string.error_please_check_network);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> TimeoutError) &#123;<span class=\"comment\">// 请求超时</span></span><br><span class=\"line\">            Toast.show(mActivity, R.string.error_timeout);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> UnKnownHostError) &#123;<span class=\"comment\">// 找不到服务器</span></span><br><span class=\"line\">            Toast.show(mActivity, R.string.error_not_found_server);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> URLError) &#123;<span class=\"comment\">// URL是错的</span></span><br><span class=\"line\">            Toast.show(mActivity, R.string.error_url_error);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (exception <span class=\"keyword\">instanceof</span> NotFoundCacheError) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这个异常只会在仅仅查找缓存时没有找到缓存时返回</span></span><br><span class=\"line\">            Toast.show(mActivity, R.string.error_not_found_cache);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Toast.show(mActivity, R.string.error_unknow);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Logger.e(<span class=\"string\">&quot;错误：&quot;</span> + exception.getMessage());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (callback != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            callback.onFailed(what, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-接受回调结果\"><a href=\"#2-接受回调结果\" class=\"headerlink\" title=\"2. 接受回调结果\"></a>2. 接受回调结果</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HttpListener</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onSucceed</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Response&lt;T&gt; response)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onFailed</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Response&lt;T&gt; response)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-队列的单例模式封装-–-提供外部调用进行网络请求\"><a href=\"#3-队列的单例模式封装-–-提供外部调用进行网络请求\" class=\"headerlink\" title=\"3. 队列的单例模式封装 – 提供外部调用进行网络请求\"></a>3. 队列的单例模式封装 – 提供外部调用进行网络请求</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CallServer instance;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求队列</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RequestQueue requestQueue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CallServer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化请求队列，传入的参数是请求并发值</span></span><br><span class=\"line\">        requestQueue = NoHttp.newRequestQueue(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 请求队列</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> CallServer <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (CallServer.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">                    instance = <span class=\"keyword\">new</span> CallServer();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加一个请求到请求队列</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> activity     Context</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> what         用来标志请求, 当多个请求使用同一个Listener时, 在回调方法中会返回这个what。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request      请求对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> httpCallback 回调函数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> canCancel    是否能被用户取消</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> isLoading    是否显示加载框</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Activity activity, <span class=\"keyword\">int</span> what, Request&lt;T&gt; request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                        HttpListener&lt;T&gt; httpCallback, <span class=\"keyword\">boolean</span> canCancel, <span class=\"keyword\">boolean</span> isLoading)</span> </span>&#123;</span><br><span class=\"line\">        requestQueue.add(what, request, <span class=\"keyword\">new</span> HttpResponseListener&lt;&gt;(activity, request, httpCallback,</span><br><span class=\"line\">                canCancel, isLoading));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取消这个sign标记的所有请求</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> sign 请求的取消标志</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cancelBySign</span><span class=\"params\">(Object sign)</span> </span>&#123;</span><br><span class=\"line\">        requestQueue.cancelBySign(sign);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取消队列中所有请求</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cancelAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        requestQueue.cancelAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 停止队列</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        requestQueue.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-在-BaseActivity、BaseFragment-中发起请求，并设置标记\"><a href=\"#4-在-BaseActivity、BaseFragment-中发起请求，并设置标记\" class=\"headerlink\" title=\"4. 在 BaseActivity、BaseFragment 中发起请求，并设置标记\"></a>4. 在 BaseActivity、BaseFragment 中发起请求，并设置标记</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用来标记取消</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object object = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发起请求</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> what      what.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request   请求对象。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> callback  回调函数。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> canCancel 是否能被用户取消。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> isLoading 实现显示加载框。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> &lt;T&gt;       想请求到的数据类型。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">request</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Request&lt;T&gt; request, HttpListener&lt;T&gt; callback,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">boolean</span> canCancel, <span class=\"keyword\">boolean</span> isLoading)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里设置一个sign给这个请求</span></span><br><span class=\"line\">        request.setCancelSign(object);</span><br><span class=\"line\">        CallServer.getInstance().add(context, what, request, callback, canCancel, isLoading);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 和声明周期绑定，退出时取消这个队列中的所有请求，当然可以在你想取消的时候取消也可以，不一定和声明周期绑定。</span></span><br><span class=\"line\">        CallServer.getInstance().cancelBySign(object);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-其它界面继承-BaseActivity-或-BaseFragment，请求网络的方式跟上面的类似，多了几个参数而已。\"><a href=\"#5-其它界面继承-BaseActivity-或-BaseFragment，请求网络的方式跟上面的类似，多了几个参数而已。\" class=\"headerlink\" title=\"5. 其它界面继承 BaseActivity 或 BaseFragment，请求网络的方式跟上面的类似，多了几个参数而已。\"></a>5. 其它界面继承 BaseActivity 或 BaseFragment，请求网络的方式跟上面的类似，多了几个参数而已。</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Request&lt;String&gt; request = NoHttp.createStringRequest(url, RequestMethod.GET);</span><br><span class=\"line\">request.add(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">request(<span class=\"number\">0</span>, request, httpListener, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n<h5 id=\"附-0-封装中使用到的自定义控件及引用文字\"><a href=\"#附-0-封装中使用到的自定义控件及引用文字\" class=\"headerlink\" title=\"附 0. 封装中使用到的自定义控件及引用文字\"></a>附 0. 封装中使用到的自定义控件及引用文字</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载框</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitDialog</span> <span class=\"keyword\">extends</span> <span class=\"title\">ProgressDialog</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WaitDialog</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class=\"line\">        setCanceledOnTouchOutside(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        setProgressStyle(STYLE_SPINNER);</span><br><span class=\"line\">        setMessage(context.getText(R.string.wait_dialog_title));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">//代码中的引用字符串</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;wait_dialog_title&quot;</span>&gt;</span>正在请求，请稍候…<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- error --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;error_please_check_network&quot;</span>&gt;</span>请检查网络<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;error_timeout&quot;</span>&gt;</span>请求超时，网络不好或者服务器不稳定<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;error_not_found_server&quot;</span>&gt;</span>未发现指定服务器，请切换网络后重试<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;error_url_error&quot;</span>&gt;</span>URL错误<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;error_not_found_cache&quot;</span>&gt;</span>没有找到缓存<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;error_unknow&quot;</span>&gt;</span>未知错误<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;error_response_code&quot;</span>&gt;</span>服务器响应码%1$d<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;error_response_code_dex&quot;</span>&gt;</span>服务器响应码%1$d，如果你们服务器在这种情况下也返回数据你可以处理<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>现已将此封装发布到 JitPack ，可以直接使用如下方式引入。</strong></p>\n<p><a href=\"https://jitpack.io/#lishide/NoHttpConnecter\"><img src=\"https://jitpack.io/v/lishide/NoHttpConnecter.svg\" alt=\"\"></a></p>\n<h4 id=\"JitPack-引入方法\"><a href=\"#JitPack-引入方法\" class=\"headerlink\" title=\"JitPack 引入方法\"></a>JitPack 引入方法</h4><h5 id=\"1-在-Project-下的-build-gradle-添加\"><a href=\"#1-在-Project-下的-build-gradle-添加\" class=\"headerlink\" title=\"1. 在 Project 下的 build.gradle 添加\"></a>1. 在 Project 下的 build.gradle 添加</h5><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">&#x27;https://jitpack.io&#x27;</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-在-Module-下的-build-gradle-添加\"><a href=\"#2-在-Module-下的-build-gradle-添加\" class=\"headerlink\" title=\"2. 在 Module 下的 build.gradle 添加\"></a>2. 在 Module 下的 build.gradle 添加</h5><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile <span class=\"string\">&#x27;com.github.lishide:NoHttpConnecter:v+latest version&#x27;</span></span><br><span class=\"line\">    <span class=\"comment\">//latest version 见上方 JitPack 图标所示，如：</span></span><br><span class=\"line\">    compile <span class=\"string\">&#x27;com.github.lishide:NoHttpConnecter:v1.0.2&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"五大缓存模式\"><a href=\"#五大缓存模式\" class=\"headerlink\" title=\"五大缓存模式\"></a>五大缓存模式</h3><ul>\n<li><p>1、Default 模式，实现 http304 重定向缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">request.setCacheMode(CacheMode.DEFAULT);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2、请求网络失败返回缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">request.setCacheMode(CacheMode.REQUEST_NETWORK_FAILED_READ_CACHE);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、没有缓存才去请求网络</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">request.setCacheMode(CacheMode.NONE_CACHE_REQUEST_NETWORK);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>4、仅仅请求网络</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">request.setCacheMode(CacheMode.ONLY_REQUEST_NETWORK);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>5、仅仅读取缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">request.setCacheMode(CacheMode.ONLY_READ_CACHE);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3><ul>\n<li>1、单个文件下载</li>\n<li>2、多个文件下载</li>\n</ul>\n<p>文件下载也是队列，队列和开头所说的请求的队列是一样的。</p>\n<ul>\n<li><p>发起下载请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">mDownloadRequest = NoHttp.createDownloadRequest(url, path, filename, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">downloadQueue.add(<span class=\"number\">0</span>, mDownloadRequest, downloadListener);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>暂停或者停止下载</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">mDownloadRequest.cancel();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>监听下载过程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">private</span> DownloadListener downloadListener = <span class=\"keyword\">new</span> DownloadListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 下载开始</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">(<span class=\"keyword\">int</span> what, <span class=\"keyword\">boolean</span> isResume, <span class=\"keyword\">long</span> beforeLength, Headers headers, <span class=\"keyword\">long</span> allCount)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 下载发生错误</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDownloadError</span><span class=\"params\">(<span class=\"keyword\">int</span> what, Exception exception)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 更新下载进度和下载网速</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgress</span><span class=\"params\">(<span class=\"keyword\">int</span> what, <span class=\"keyword\">int</span> progress, <span class=\"keyword\">long</span> fileCount, <span class=\"keyword\">long</span> speed)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 下载完成</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFinish</span><span class=\"params\">(<span class=\"keyword\">int</span> what, String filePath)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 下载被取消或者暂停</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCancel</span><span class=\"params\">(<span class=\"keyword\">int</span> what)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>关于文件下载，具体的请参考 Demo。</p>\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><ul>\n<li><p>1、单个文件上传</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Request&lt;String&gt; request = NoHttp.createStringRequest(url, RequestMethod.POST);</span><br><span class=\"line\">request.add(<span class=\"string\">&quot;file&quot;</span>, <span class=\"keyword\">new</span> FileBinary(file));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2、多个文件上传（这里可以添加各种形式的文件，File、Bitmap、InputStream、ByteArray。）</p>\n<ul>\n<li><p><strong>多个Key多个文件形式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Request&lt;String&gt; request = ...</span><br><span class=\"line\">request.add(<span class=\"string\">&quot;file1&quot;</span>, <span class=\"keyword\">new</span> FileBinary(File));</span><br><span class=\"line\">request.add(<span class=\"string\">&quot;file2&quot;</span>, <span class=\"keyword\">new</span> FileBinary(File));</span><br><span class=\"line\">request.add(<span class=\"string\">&quot;file3&quot;</span>, <span class=\"keyword\">new</span> InputStreamBinary(InputStream));</span><br><span class=\"line\">request.add(<span class=\"string\">&quot;file4&quot;</span>, <span class=\"keyword\">new</span> ByteArrayBinary(<span class=\"keyword\">byte</span>[]));</span><br><span class=\"line\">request.add(<span class=\"string\">&quot;file5&quot;</span>, <span class=\"keyword\">new</span> BitmapBinary(Bitmap));</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>一个Key多个文件形式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Request&lt;String&gt; request = ...</span><br><span class=\"line\">fileList.add(<span class=\"string\">&quot;image&quot;</span>, <span class=\"keyword\">new</span> FileBinary(File));</span><br><span class=\"line\">fileList.add(<span class=\"string\">&quot;image&quot;</span>, <span class=\"keyword\">new</span> InputStreamBinary(InputStream));</span><br><span class=\"line\">fileList.add(<span class=\"string\">&quot;image&quot;</span>, <span class=\"keyword\">new</span> ByteArrayBinary(<span class=\"keyword\">byte</span>[]));</span><br><span class=\"line\">fileList.add(<span class=\"string\">&quot;image&quot;</span>, <span class=\"keyword\">new</span> BitmapBinary(Bitmap));</span><br></pre></td></tr></table></figure>\n<p>或者：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Request&lt;String&gt; request = ...</span><br><span class=\"line\">List&lt;Binary&gt; fileList = ...</span><br><span class=\"line\">fileList.add(<span class=\"keyword\">new</span> FileBinary(File));</span><br><span class=\"line\">fileList.add(<span class=\"keyword\">new</span> InputStreamBinary(InputStream));</span><br><span class=\"line\">fileList.add(<span class=\"keyword\">new</span> ByteArrayBinary(<span class=\"keyword\">byte</span>[]));</span><br><span class=\"line\">fileList.add(<span class=\"keyword\">new</span> BitmapStreamBinary(Bitmap));</span><br><span class=\"line\">request.add(<span class=\"string\">&quot;file_list&quot;</span>, fileList);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>……</p>\n<hr>\n<p>本人仅是简单地对 NoHttp 网络请求框架进行轻量级的封装，后期还会进行持续维护，更多关于 NoHttp 的使用可直接查看原作。</p>\n<p><strong>NoHttp —— 一个有情怀的网络框架 ，让你的网络请求更简单。</strong></p>\n<p>像上面说的一样，NoHttp 真的很强大、很好用，嗯，没错。</p>\n<p><strong>Demo 源码请看 GitHub： <a href=\"https://github.com/lishide/NoHttpConnecter\">NoHttpConnecter</a>。</strong></p>\n","tags":["Android","NoHttp","Http"]},{"title":"高德地图开发：点击 Marker（或气泡）跳转到其它地图，以及开发中问题解决","url":"/2018/02/24/android-amap-dev/","content":"<p>高德地图，在点击 Marker 上的气泡可以跳转到手机中的地图进行导航。<br><span id=\"more\"></span></p>\n<ol>\n<li>设置地图 InfoWindow 点击事件监听，并实现<code>AMap.OnInfoWindowClickListener</code>。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">aMap?.setOnInfoWindowClickListener(<span class=\"keyword\">this</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>处理点击事件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 对InfoWindow点击响应事件</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\">override fun <span class=\"title\">onInfoWindowClick</span><span class=\"params\">(p0: Marker?)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        val uri = Uri.parse(<span class=\"string\">&quot;geo:$lat,$lng?q=$address&quot;</span>)</span><br><span class=\"line\">        val intent = Intent(Intent.ACTION_VIEW, uri)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.startActivity(intent)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">        Toast.makeText(getApplication(), <span class=\"string\">&quot;沒有地图应用&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>其实，为什么要在点击 marker 或 InfoWindow 的时候才响应事件呢？任何地方都行啊，好吧，真尴尬￣□￣｜｜</p>\n<p>在高德地图开发中遇到一个坑是：进入地图时奔溃，检查了所有的<code>.so</code>文件，都没问题也没解决，最后发现是混淆代码的问题。这里要吐槽一下，高德地图没有提供他们的代码混淆规则！！！</p>\n<p>分享出我自己添加的<strong>Amap ProGuard rules</strong>，不确定是否完全，暂未发现问题。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">################# 高德相关混淆文件 #################</span></span><br><span class=\"line\">-dontwarn com.amap.api.**</span><br><span class=\"line\">-dontwarn com.autonavi.**</span><br><span class=\"line\">-dontwarn com.a.a.**</span><br><span class=\"line\">-keep class com.amap.api.**  &#123;*;&#125;</span><br><span class=\"line\">-keep class com.autonavi.**  &#123;*;&#125;</span><br><span class=\"line\">-keep class com.a.a.**  &#123;*;&#125;</span><br><span class=\"line\">-keep class com.amap.api.services.**&#123;*;&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的版本是<code>com.amap.api:3dmap:5.6.0</code>，于 2017-12 开发。</p>\n","tags":["Android","AMap"]},{"title":"ScrollRecyclerView——RecyclerView 横向 / 纵向滚动网格布局","url":"/2018/03/23/android-view-ScrollRecyclerView/","content":"<p>【来自本人2017年简书文章，将其同步至个人博客】</p>\n<p>今天分享一个自己封装的 RecyclerView 横向 / 纵向滚动网格布局，先来水一水它产生的背景吧 ~ 也许看完下面简单的介绍，你才能大致了解 <strong>ScrollRecyclerView</strong> 是做什么的，要不然只知道是 RecyclerView 的封装的话，你肯定不会往下看了，因为已经有太多好用的 RecyclerView  封装了……给个机会吧，往下再瞅瞅(⊙o⊙) ~~<br><span id=\"more\"></span></p>\n<p>由于公司的产品是针对某种特制的 Android 系统设备（14 吋）的定制化研发，前段时间，工厂那边提供了新设备，话说是很多性能方面都有了较大的提升，遥控器也更新了。(⊙o⊙)哦，对了，忘了说，设备是不支持触摸操作的，使用遥控器控制。之前的那款遥控器是内置陀螺仪的，可以模拟用户手指操作，就是说能像操作手机触摸屏那样操作屏幕，而这款遥控器却没有了这项功能，只有普通遥控器的功能了，像电视机遥控器一样，操作起来特别费劲，产品中很多界面操作不便，体验很差。遂今天的主角——<strong>ScrollRecyclerView</strong> 产生了，希望通过它能改善遥控器操作的使用体验。</p>\n<p><strong>ScrollRecyclerView——RecyclerView 横向 / 纵向滚动网格布局，适用于 Android 平板、Android TV 或其他定制化 Android 设备等，使用遥控器方向导航键控制列表滑动及 item 选择状态。</strong></p>\n<h2 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h2><p><img src=\"https://github.com/lishide/ScrollRecyclerView/raw/master/art/ScrollRecyclerView_art.gif\" alt=\"ScrollRecyclerView 效果演示\"></p>\n<hr>\n<p><a href=\"https://jitpack.io/#lishide/ScrollRecyclerView\"><img src=\"https://jitpack.io/v/lishide/ScrollRecyclerView.svg\" alt=\"\"></a></p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><h4 id=\"JitPack-引入方法\"><a href=\"#JitPack-引入方法\" class=\"headerlink\" title=\"JitPack 引入方法\"></a>JitPack 引入方法</h4><h5 id=\"1-在-Project-下的-build-gradle-添加\"><a href=\"#1-在-Project-下的-build-gradle-添加\" class=\"headerlink\" title=\"1. 在 Project 下的 build.gradle 添加\"></a>1. 在 Project 下的 build.gradle 添加</h5><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">&#x27;https://jitpack.io&#x27;</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-在-Module-下的-build-gradle-添加\"><a href=\"#2-在-Module-下的-build-gradle-添加\" class=\"headerlink\" title=\"2. 在 Module 下的 build.gradle 添加\"></a>2. 在 Module 下的 build.gradle 添加</h5><figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile <span class=\"string\">&#x27;com.github.lishide:ScrollRecyclerView:v1.0.0&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li><strong>在 xml 中引用 ScrollRecyclerView</strong></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;com.lishide.recyclerview.scroll.ScrollRecyclerView</span><br><span class=\"line\">    android:id=&quot;@+id/scroll_recycler_view&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;match_parent&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>初始化 ScrollRecyclerView，设置布局管理器、间距、适配器、数据等</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化 ScrollRecyclerView</span></span><br><span class=\"line\">mScrollRecyclerView = (ScrollRecyclerView) findViewById(R.id.scroll_recycler_view);</span><br><span class=\"line\"><span class=\"comment\">// 设置动画</span></span><br><span class=\"line\">mScrollRecyclerView.setItemAnimator(<span class=\"keyword\">new</span> DefaultItemAnimator());</span><br><span class=\"line\"><span class=\"comment\">// 设置布局管理器：瀑布流式</span></span><br><span class=\"line\">mScrollRecyclerView.setLayoutManager(<span class=\"keyword\">new</span> StaggeredGridLayoutManager(<span class=\"number\">3</span>,</span><br><span class=\"line\">        StaggeredGridLayoutManager.HORIZONTAL));</span><br><span class=\"line\"><span class=\"comment\">// 根据需要设置间距等</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> right = (<span class=\"keyword\">int</span>) getResources().getDimension(R.dimen.dp_20);</span><br><span class=\"line\"><span class=\"keyword\">int</span> bottom = (<span class=\"keyword\">int</span>) getResources().getDimension(R.dimen.dp_20);</span><br><span class=\"line\">RecyclerView.ItemDecoration spacingInPixel = <span class=\"keyword\">new</span> SpaceItemDecoration(right, bottom);</span><br><span class=\"line\">mScrollRecyclerView.addItemDecoration(spacingInPixel);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>适配器中初始化控件并设置数据</strong></li>\n</ul>\n<p>使用的 Adapter 就是正常的 Adapter。为了简单明了，在示例中用的是最普通的一种。当然了，你完全可以使用你常用的或是被封装过的高级 Adapter。</p>\n<p>Adapter 中<strong>比较重要的是</strong>设置 itemView 可以获得焦点，并监听焦点变化。还有要设置 Tag，用来标记 item 的 position，后面有用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">holder.itemView.setFocusable(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">holder.itemView.setTag(position);</span><br><span class=\"line\">holder.itemView.setOnFocusChangeListener(<span class=\"keyword\">new</span> View.OnFocusChangeListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFocusChange</span><span class=\"params\">(View v, <span class=\"keyword\">boolean</span> hasFocus)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>会发现在 Adapter 中设置了许多监听器，目前有这四个：</p>\n<ul>\n<li><strong>item 选定监听（OnItemSelectedListener）</strong></li>\n<li><strong>item 点击监听（OnItemClickListener）</strong></li>\n<li><strong>item 长按监听（OnItemLongClickListener）</strong></li>\n<li><strong>遥控器其他按键监听（OnItemKeyListener）</strong></li>\n</ul>\n<p>已将这四个 <strong>Listener</strong> 放在 lib 中，开发者根据需要直接设置和调用即可。</p>\n<p><strong>要想实现咱们今天主要实现的功能——使用遥控器方向导航键控制列表滑动及 item 选择状态，下面的步骤很重要。</strong></p>\n<ul>\n<li>在焦点监听器中，判断获得焦点时调用 <code>mOnItemSelectedListener.OnItemSelected(v, currentPosition);</code>，传入 view 和当前 position。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (hasFocus) &#123;</span><br><span class=\"line\">    currentPosition = (<span class=\"keyword\">int</span>) holder.itemView.getTag();</span><br><span class=\"line\"></span><br><span class=\"line\">    mOnItemSelectedListener.OnItemSelected(v, currentPosition);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>滑动列表</strong></li>\n</ul>\n<p>设置 item 选定监听器，然后在监听器中实现列表滑动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">adapter.setOnItemSelectedListener(mOnItemSelectedListener);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">OnItemSelectedListener mOnItemSelectedListener = <span class=\"keyword\">new</span> OnItemSelectedListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnItemSelected</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        mScrollRecyclerView.smoothHorizontalScrollToNext(position);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>实现滑动的功能就是这个<code>smoothHorizontalScrollToNext</code>方法了。</p>\n<blockquote>\n<p><strong>小结：</strong><br>通常情况，遥控器的上下左右按键的监听系统都处理好了，但是有时候按键处理会出现一下问题：<br>比如，焦点现在在最后一列的某个 item 上，但这个 item 后面还有很多列，只是此时屏幕上没显示出来，需要向左滚动，才能看到后面的 item，但是此时系统的监听不会自己滚动，并且按下遥控右键不会有反应。这里就需要我们想办法解决一下。</p>\n</blockquote>\n<blockquote>\n<p>我的思路是这样：<br>1、由于系统的遥控器方向键监听是需要在当前屏幕上知晓是否后面还有 item 才可以继续按右键的。所以设计一个算法在 ScrollRecyclerView 中，使得焦点到达最右边时，父控件向左边滚出一定距离；而焦点到达最左边时，父控件向右边滚动一定距离。<br>2.此时再按下方向键，系统又可以使得下一个Item获得焦点了。</p>\n</blockquote>\n<blockquote>\n<p>具体的实现过程推荐下载 demo 看代码，demo 里面的注释非常全了。</p>\n</blockquote>\n<p>好了，至此 <strong>使用遥控器方向导航键控制列表滑动及 item 选择状态</strong> 的功能大概完成了。顺便解释一下其他几个 Listener 的作用，OnItemClickListener、OnItemLongClickListener 这两个好理解，在其他的列表点击监听也会遇到过，就不过多说了。需要注意一点的是，item 长按监听要对 view 的点击事件返回值根据需要处理一下，比如 <code>return false</code> 会在长按事件结束后再触发一次点击事件，<code>return true</code>则只会触发长按事件。如果有特定需要，比如焦点在列表的某个 item 上时，按下了 OK 键，需要跳转到一个新的界面；或者按下 Menu 键做其他业务逻辑处理等等，此时应该设置监听——OnItemKeyListener（遥控器其他按键监听）。</p>\n<p><strong>ScrollRecyclerView 的用处有一些局限性，手机端应该是用不到（我感觉，因为有触摸屏~），主要适用于 Android 平板、Android TV 或其他定制化 Android 设备等……这里，仍期待得到您的支持！</strong></p>\n<p><strong>代码已经开源到 Github：<a href=\"https://github.com/lishide/ScrollRecyclerView\">https://github.com/lishide/ScrollRecyclerView</a></strong></p>\n<p><strong>您在使用过程中，发现 bug 或有好的建议欢迎 issue、email (<a href=\"mailto:lishidezy@gmail.com\">lishidezy@gmail.com</a>)，如果感觉对你有帮助也欢迎点个 star，留下点印记吧。</strong></p>\n","tags":["Android","RecyclerView","自定义 View"]},{"title":"ImgCoverFlow——CoverFlow 列表的实现","url":"/2018/03/23/android-view-ImgCoverFlow/","content":"<p>参考 <a href=\"https://github.com/dolphinwang/ImageCoverFlow\">ImageCoverFlow-master</a> 修改的，使用 ImageView 来实现，可加载本地图片和网络图片等，使用方法与 LIST 一样，设置相应的控件、修改 imageCoverFlow 布局的参数即可。<br><span id=\"more\"></span></p>\n<h2 id=\"效果预览\"><a href=\"#效果预览\" class=\"headerlink\" title=\"效果预览\"></a>效果预览</h2><h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><image src=\"https://github.com/lishide/ImgCoverFlow/raw/master/art/ImgCoverFlow_screen1.jpg\" width=\"280px\"/>\n\n<h4 id=\"效果预览-GIF\"><a href=\"#效果预览-GIF\" class=\"headerlink\" title=\"效果预览 GIF\"></a>效果预览 GIF</h4><image src=\"https://github.com/lishide/ImgCoverFlow/raw/master/art/ImgCoverFlow_art.gif?raw=true\" width=\"280px\"/>\n\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p><a href=\"https://jitpack.io/#lishide/ImgCoverFlow\"><img src=\"https://jitpack.io/v/lishide/ImgCoverFlow.svg\" alt=\"\"></a></p>\n<h4 id=\"JitPack-引入方法\"><a href=\"#JitPack-引入方法\" class=\"headerlink\" title=\"JitPack 引入方法\"></a>JitPack 引入方法</h4><h5 id=\"1-在-Project-下的-build-gradle-添加\"><a href=\"#1-在-Project-下的-build-gradle-添加\" class=\"headerlink\" title=\"1. 在 Project 下的 build.gradle 添加\"></a>1. 在 Project 下的 build.gradle 添加</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">&#x27;https://jitpack.io&#x27;</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-在-Module-下的-build-gradle-添加\"><a href=\"#2-在-Module-下的-build-gradle-添加\" class=\"headerlink\" title=\"2. 在 Module 下的 build.gradle 添加\"></a>2. 在 Module 下的 build.gradle 添加</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile <span class=\"string\">&#x27;com.github.lishide:ImgCoverFlow:v1.0.1&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li><strong>在 xml 中引用 CoverFlowView</strong></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;com.img.coverflow.widget.CoverFlowView</span><br><span class=\"line\">    android:id=&quot;@+id/coverflow&quot;</span><br><span class=\"line\">    android:layout_width=&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height=&quot;0dp&quot;</span><br><span class=\"line\">    android:layout_weight=&quot;1&quot;</span><br><span class=\"line\">    android:paddingLeft=&quot;10dp&quot;</span><br><span class=\"line\">    android:paddingRight=&quot;10dp&quot;</span><br><span class=\"line\">    imageCoverFlow:coverflowGravity=&quot;center_vertical&quot;</span><br><span class=\"line\">    imageCoverFlow:coverflowLayoutMode=&quot;wrap_content&quot;</span><br><span class=\"line\">    imageCoverFlow:reflectionGap=&quot;10dp&quot;</span><br><span class=\"line\">    imageCoverFlow:reflectionHeight=&quot;30%&quot;</span><br><span class=\"line\">    imageCoverFlow:visibleImage=&quot;3&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>属性说明</strong><br>CoverFlow 的 Gravity：imageCoverFlow:coverflowGravity=”center_vertical”<br>CoverFlow 的模式：imageCoverFlow:coverflowLayoutMode=”wrap_content”<br>倒影间隙：imageCoverFlow:reflectionGap=”10dp”<br>倒影高度：imageCoverFlow:reflectionHeight=”30%”<br>设置可见个数：imageCoverFlow:visibleImage=”3”<br>…</p>\n</blockquote>\n<ul>\n<li><strong>初始化 CoverFlowView，设置适配器、数据、监听器等</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">coverFlowView = (CoverFlowView) findViewById(R.id.coverflow);</span><br><span class=\"line\"></span><br><span class=\"line\">coverFlowView.setAdapter(coverFlowAdapter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给coverFlowView的TOPView添加点击事件监听</span></span><br><span class=\"line\">coverFlowView.setOnTopViewClickListener(mOnTopViewClickListener);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>创建 Adapter，实现（implements）ICoverFlowAdapter，和正常的 Adapter 一样使用</strong></li>\n</ul>\n<p>在 <code>getData</code> 方法中设置 item 的数据即可。</p>\n<ul>\n<li><strong>更多</strong><ul>\n<li>向前一页<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">coverFlowView.gotoPrevious();</span><br></pre></td></tr></table></figure></li>\n<li>向后一页<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">coverFlowView.gotoForward();</span><br></pre></td></tr></table></figure></li>\n<li>获取最上面 Item 的 position<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> position = coverFlowView.getTopViewPosition();</span><br></pre></td></tr></table></figure></li>\n<li>获取最上面 Item 的 View<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">CoverFlowAdapter.Holder holder = (CoverFlowAdapter.Holder) coverFlowView.getTopView().getTag();</span><br></pre></td></tr></table></figure>\n……</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>就到这里，更多的细节，请参考 demo 和源码，<a href=\"https://github.com/lishide/ImgCoverFlow\">传送门</a> 。</strong></p>\n","tags":["Android","自定义 View","CoverFlow"]},{"title":"VSCode 国内的下载地址","url":"/2021/05/06/dev-tools-vscode-download/","content":"<p>VSCode 国内的下载地址（windows64位）：<br><a href=\"http://vscode.cdn.azure.cn/stable/78a4c91400152c0f27ba4d363eb56d2835f9903a/VSCodeUserSetup-x64-1.43.0.exe\">http://vscode.cdn.azure.cn/stable/78a4c91400152c0f27ba4d363eb56d2835f9903a/VSCodeUserSetup-x64-1.43.0.exe</a></p>\n<p>官网一直下载失败，可通过此地址下载安装。非最新版本，安装后通过软件内部进行更新。</p>\n<span id=\"more\"></span>\n","tags":["dev-tools"]},{"title":"个人 IDEA（Android Studio）生产工具个性化配置","url":"/2018/09/05/dev-ide-as-personal-settings/","content":"<p>记录个人 IDEA（Android Studio）生产工具个性化配置，常用插件等。<br><span id=\"more\"></span></p>\n<h1 id=\"个性化配置\"><a href=\"#个性化配置\" class=\"headerlink\" title=\"个性化配置\"></a>个性化配置</h1><h2 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2><p>字体、字号、行号、导包等相关的配置。</p>\n<h2 id=\"代码配色主题下载\"><a href=\"#代码配色主题下载\" class=\"headerlink\" title=\"代码配色主题下载\"></a>代码配色主题下载</h2><h3 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h3><p>在 <a href=\"http://color-themes.com\">Color Themes</a> 有很多的代码配色主题，应该能找到自己喜欢的。</p>\n<p>步骤：</p>\n<ol>\n<li>下载主题—xxx.jar（Ps：如果我们下载下来的 jar 名字如果有空格，一定要把空格去掉，同时文件路径中不要含有中文）；</li>\n<li>选择 File—&gt;Import Settings—&gt;选择 jar 包导入；</li>\n<li>重启 IDEA（Android Studio）；</li>\n<li>修改个别不喜欢的地方（比如字体、某种类型字体颜色）</li>\n</ol>\n<p>希望大家都找到自己喜欢的配色方案。其实，自带的 Darcula 主题就很棒了，官方出品，适配很好。</p>\n<p>试用了很多款主题，个人比较喜欢 <strong>Ladies Night 2</strong> 和 <strong>Sublime Text 2</strong>。 Ladies Night 2 主题在 Color Themes 上下载量最多，Sublime Text 2 也有很多人推荐。目前在用的是：<strong>Sublime Text 2</strong>，当然，每一款主题都并非完美的，并不一定适合所有人的口味，自己喜欢才好。针对几处不完美的地方（某些关键词色值或背景色值不合适导致的关键词看不清楚）做了一些修改，以备后用。结合 <strong>Darcula</strong> 主题比较有用的提示功能，配置最适合自己的、赏心悦目的 Color Scheme。</p>\n<p>详见：<a href=\"https://lishide.github.io/2018/10/30/dev-ide-custom-color-scheme/\">自定义 IDE 配色主题</a></p>\n<h2 id=\"Logcat-配色\"><a href=\"#Logcat-配色\" class=\"headerlink\" title=\"Logcat 配色\"></a>Logcat 配色</h2><p>Android Logcat 默认主题（或导入的其他 Color Scheme）的配色只有红白两种颜色，不太便于我们区分 Log 的类型。<br>建议采用鲜明的配色，按照下面的色值修改配置。</p>\n<table>\n<thead>\n<tr>\n<th>Log 级别</th>\n<th>颜色</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Assert</td>\n<td>AA66CC</td>\n</tr>\n<tr>\n<td>Debug</td>\n<td>33B5E5</td>\n</tr>\n<tr>\n<td>Error</td>\n<td>FF4444</td>\n</tr>\n<tr>\n<td>Info</td>\n<td>99CC00</td>\n</tr>\n<tr>\n<td>Verbose</td>\n<td>FFFFFF</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>FFBB33</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"AS-插件\"><a href=\"#AS-插件\" class=\"headerlink\" title=\"AS 插件\"></a>AS 插件</h2><ol>\n<li><strong>GsonFormat</strong>：快速将 json 字符串转换成一个 Java Bean。</li>\n<li><strong>Android ButterKnife Zelezny</strong>：自动生成 butterknife 注解。</li>\n<li><strong>ADB WIFI</strong>：使用 wifi 无线调试你的 app，无需 root 权限。</li>\n<li><strong>Android WiFi ADB</strong>：无线调试应用</li>\n<li><strong>WakaTime</strong>：记录你在 IDE 上的工作时间（推荐）。</li>\n<li><strong>String Manipulation</strong>：一个为文本操作提供操作的插件。</li>\n<li><strong>Android Postfix Completion</strong>：此插件可以快速进行 Log、Toast、isEmpty 的代码书写。</li>\n<li><strong>Alibaba Java Coding Guidelines</strong>：《阿里巴巴Java开发规约》的扫描插件。</li>\n<li><strong>IconViewer</strong>：图标预览</li>\n<li><strong>Statistic</strong>：统计代码量</li>\n<li><strong>.ignore</strong>：过滤 git 忽略文件</li>\n<li><strong>Translation</strong>：翻译插件</li>\n<li><strong>Exynap</strong>：一个帮助开发者自动生成样板代码的 AndroidStudio 插件。</li>\n<li><strong>Lombok</strong>：在项目中使用 Lombok 可以减少很多重复代码的书写。比如说 getter/setter/toString 等方法的编写。</li>\n<li><strong>TinyPic</strong>：压缩图片资源</li>\n<li><strong>AndroidProguard Pro</strong>：一键生成项目混淆代码插件</li>\n<li><strong>ADB Idea</strong>：适用于 Android Studio 和 Intellij IDEA 的 ADB 命令插件</li>\n<li><strong>Gradle View</strong>：查看 gradle 依赖树</li>\n<li><strong>JSON To Kotlin Class</strong>：将 Json String 快速转换为 Kotlin 数据类代码</li>\n<li><strong>ARouter Helper</strong>：ARouter 导航到目标类</li>\n</ol>\n<h2 id=\"万能注释模板\"><a href=\"#万能注释模板\" class=\"headerlink\" title=\"万能注释模板\"></a>万能注释模板</h2><p><a href=\"https://blog.csdn.net/simon_crystin/article/details/67638513\">https://blog.csdn.net/simon_crystin/article/details/67638513</a></p>\n<h1 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h1><h2 id=\"AS-3-x-版本的-Terminal-中文乱码\"><a href=\"#AS-3-x-版本的-Terminal-中文乱码\" class=\"headerlink\" title=\"AS 3.x 版本的 Terminal 中文乱码\"></a>AS 3.x 版本的 Terminal 中文乱码</h2><ul>\n<li>（Windows）改变全局编码格式为C.UTF8，即修改系统环境变量。<ol>\n<li>“此电脑”上点击鼠标右键-&gt;属性-&gt;高级系统设置-&gt;环境变量</li>\n<li>在<strong>系统变量</strong>中点击新建，填入如下变量：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">变量名：LC_ALL</span><br><span class=\"line\">变量值：C.UTF-8</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n","tags":["IDE","Android Studio"]},{"title":"Volley 的使用及其工具类的封装","url":"/2018/03/13/android-volley-use/","content":"<p>Volley 的使用及其工具类的封装<br>【来自本人2016年简书文章，将其同步至个人博客】</p>\n<pre><code>August 26, 2016 1:10 PM Power By lishide\n</code></pre><span id=\"more\"></span>\n<h2 id=\"一-Volley-简介\"><a href=\"#一-Volley-简介\" class=\"headerlink\" title=\"一. Volley 简介\"></a>一. Volley 简介</h2><blockquote>\n<p>Volley 的中文翻译为“齐射、并发”，是在 2013 年的 Google 大会上发布的一款 Android 平台网络通信库，具有网络请求的处理、小图片的异步加载和缓存等功能，能够帮助 Android App 更方便地执行网络操作，而且更快速高效。<br>    在 Google IO 的演讲上，其配图是一幅发射火弓箭的图，有点类似流星。这表示，Volley 特别适合数据量不大但是通信频繁的场景。</p>\n</blockquote>\n<h3 id=\"Volley-有如下的优点：\"><a href=\"#Volley-有如下的优点：\" class=\"headerlink\" title=\"Volley 有如下的优点：\"></a>Volley 有如下的优点：</h3><ul>\n<li>自动调度网络请求；</li>\n<li>高并发网络连接；</li>\n<li>通过标准的 HTTP cache coherence（高速缓存一致性）缓存磁盘和内存透明的响应；</li>\n<li>支持指定请求的优先级；</li>\n<li>网络请求 cancel 机制。我们可以取消单个请求，或者指定取消请求队列中的一个区域；</li>\n<li>框架容易被定制，例如，定制重试或者回退功能；</li>\n<li>包含了调试与追踪工具；</li>\n</ul>\n<blockquote>\n<ul>\n<li>Volley 不适合用来下载大的数据文件。因为 Volley 会保持在解析的过程中所有的响应。对于下载大量的数据操作，请考虑使用 DownloadManager 。</li>\n<li>在 volley 推出之前我们一般会选择比较成熟的第三方网络通信库，如：android-async-http、retrofit、okhttp 等。他们各有优劣，可有所斟酌地选择选择更适合项目的类库。</li>\n<li>附：<br>Volley 的 GitHub 地址：<a href=\"https://github.com/mcxiaoke/android-volley\">https://github.com/mcxiaoke/android-volley</a></li>\n</ul>\n</blockquote>\n<h2 id=\"二、使用\"><a href=\"#二、使用\" class=\"headerlink\" title=\"二、使用\"></a>二、使用</h2><ul>\n<li>Eclipse</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">把 Volley 添加到项目中最简便的方法是 Clone 仓库，然后把它设置为一个 library project。</span><br><span class=\"line\">（1）<span class=\"built_in\">clone</span> 代码：</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://android.googlesource.com/platform/frameworks/volley</span><br><span class=\"line\"></span><br><span class=\"line\">（2）将代码编译成 jar 包：</span><br><span class=\"line\">android update project -p . ant jar</span><br><span class=\"line\"></span><br><span class=\"line\">如无意外，将获得 volley.jar 包。</span><br><span class=\"line\"></span><br><span class=\"line\">（3）添加 volley.jar 到你的项目中</span><br></pre></td></tr></table></figure>\n<ul>\n<li>AndroidStudio using Gradle build add dependent (recommended)</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"code\"><pre><span class=\"line\">compile <span class=\"string\">&#x27;com.mcxiaoke.volley:library:1.0.19&#x27;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"使用-Volley-框架实现网络数据请求主要有以下三个步骤：\"><a href=\"#使用-Volley-框架实现网络数据请求主要有以下三个步骤：\" class=\"headerlink\" title=\"使用 Volley 框架实现网络数据请求主要有以下三个步骤：\"></a>使用 Volley 框架实现网络数据请求主要有以下三个步骤：</h4><ol>\n<li>创建 RequestQueue 对象，定义网络请求队列；</li>\n<li>创建 XXXRequest 对象( XXX 代表 String，JSON，Image 等等)，定义网络数据请求的详细过程；</li>\n<li>把 XXXRequest 对象添加到 RequestQueue 中，开始执行网络请求。</li>\n</ol>\n<h3 id=\"2-1-创建-RequestQueue-对象\"><a href=\"#2-1-创建-RequestQueue-对象\" class=\"headerlink\" title=\"2.1 创建 RequestQueue 对象\"></a>2.1 创建 RequestQueue 对象</h3><p>一般而言，网络请求队列都是整个 App 内使用的全局性对象，因此最好写入 Application 类中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 建立请求队列</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RequestQueue queue;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">       queue = Volley.newRequestQueue(getApplicationContext());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RequestQueue <span class=\"title\">getHttpQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> queue;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改 AndroidManifest.xml 文件，使 App 的 Application 对象为我们刚定义的 MyApplication，并添加 INTERNET 权限：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class=\"line\">&lt;application</span><br><span class=\"line\">    android:name=&quot;.MyApplication&quot;</span><br><span class=\"line\">    android:allowBackup=&quot;true&quot;</span><br><span class=\"line\">    android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class=\"line\">    android:label=&quot;@string/app_name&quot;</span><br><span class=\"line\">    android:supportsRtl=&quot;true&quot;</span><br><span class=\"line\">    android:theme=&quot;@style/AppTheme&quot; &gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">application</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-创建-XXXRequest-对象并添加到请求队列中\"><a href=\"#2-2-创建-XXXRequest-对象并添加到请求队列中\" class=\"headerlink\" title=\"2.2 创建 XXXRequest 对象并添加到请求队列中\"></a>2.2 创建 XXXRequest 对象并添加到请求队列中</h3><p>Volley 提供了<code>JsonObjectRequest</code>、<code>JsonArrayRequest</code>、<code>StringRequest</code>等 Request 形式</p>\n<h3 id=\"2-3-把-XXXRequest-对象添加到-RequestQueue-中，开始执行网络请求。\"><a href=\"#2-3-把-XXXRequest-对象添加到-RequestQueue-中，开始执行网络请求。\" class=\"headerlink\" title=\"2.3 把 XXXRequest 对象添加到 RequestQueue 中，开始执行网络请求。\"></a>2.3 把 XXXRequest 对象添加到 RequestQueue 中，开始执行网络请求。</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置该请求的标签</span></span><br><span class=\"line\">request.setTag(<span class=\"string\">&quot;listGet&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将请求添加到队列中</span></span><br><span class=\"line\">MyApplication.getHttpQueue().add(request);</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-4-关闭请求\"><a href=\"#2-4-关闭请求\" class=\"headerlink\" title=\"2.4 关闭请求\"></a>2.4 关闭请求</h3><h4 id=\"关闭特定标签的网络请求：\"><a href=\"#关闭特定标签的网络请求：\" class=\"headerlink\" title=\"关闭特定标签的网络请求：\"></a>关闭特定标签的网络请求：</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 网络请求标签为&quot;listGet&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">    MyApplication.getHttpQueues.cancelAll(<span class=\"string\">&quot;listGet&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"取消这个队列里的所有请求：\"><a href=\"#取消这个队列里的所有请求：\" class=\"headerlink\" title=\"取消这个队列里的所有请求：\"></a>取消这个队列里的所有请求：</h4><p>在 activity 的 onStop() 方法里面，取消所有的包含这个 tag 的请求任务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">    mRequestQueue.cancelAll(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对 Volley 的 GET 和 POST 请求进行了封装，见 <code>VolleyRequestUtil.java</code> 和 <code>VolleyListenerInterface.java</code> 。你在使用过程中也可以添加相应的参数，完成自己所要实现的功能。</p>\n<h2 id=\"三、Volley-的-GET-和-POST-请求工具类的封装\"><a href=\"#三、Volley-的-GET-和-POST-请求工具类的封装\" class=\"headerlink\" title=\"三、Volley 的 GET 和 POST 请求工具类的封装\"></a>三、Volley 的 GET 和 POST 请求工具类的封装</h2><h3 id=\"3-1-GET-和-POST-请求的封装\"><a href=\"#3-1-GET-和-POST-请求的封装\" class=\"headerlink\" title=\"3.1 GET 和 POST 请求的封装\"></a>3.1 GET 和 POST 请求的封装</h3><p>目前，VolleyRequestUtil 工具类只包含了两个函数，分别获取 GET 和 POST 请求。<br>VolleyRequestUtil.java：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolleyRequestUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringRequest stringRequest;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Context context;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> sTimeOut = <span class=\"number\">30000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取GET请求内容</span></span><br><span class=\"line\"><span class=\"comment\">    * 参数：</span></span><br><span class=\"line\"><span class=\"comment\">    * context：当前上下文；</span></span><br><span class=\"line\"><span class=\"comment\">    * url：请求的url地址；</span></span><br><span class=\"line\"><span class=\"comment\">    * tag：当前请求的标签；</span></span><br><span class=\"line\"><span class=\"comment\">    * volleyListenerInterface：VolleyListenerInterface接口；</span></span><br><span class=\"line\"><span class=\"comment\">    * timeOutDefaultFlg：是否使用Volley默认连接超时；</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">RequestGet</span><span class=\"params\">(Context context, String url, String tag,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  VolleyListenerInterface volleyListenerInterface,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  <span class=\"keyword\">boolean</span> timeOutDefaultFlg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 清除请求队列中的tag标记请求</span></span><br><span class=\"line\">        MyApplication.getQueue().cancelAll(tag);</span><br><span class=\"line\">        <span class=\"comment\">// 创建当前的请求，获取字符串内容</span></span><br><span class=\"line\">        stringRequest = <span class=\"keyword\">new</span> StringRequest(Request.Method.GET, ConstUtils.BASEURL + url,</span><br><span class=\"line\">                volleyListenerInterface.responseListener(), volleyListenerInterface.errorListener());</span><br><span class=\"line\">        <span class=\"comment\">// 为当前请求添加标记</span></span><br><span class=\"line\">        stringRequest.setTag(tag);</span><br><span class=\"line\">        <span class=\"comment\">// 默认超时时间以及重连次数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> myTimeOut = timeOutDefaultFlg ? DefaultRetryPolicy.DEFAULT_TIMEOUT_MS : sTimeOut;</span><br><span class=\"line\">        stringRequest.setRetryPolicy(<span class=\"keyword\">new</span> DefaultRetryPolicy(myTimeOut,</span><br><span class=\"line\">                DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));</span><br><span class=\"line\">        <span class=\"comment\">// 将当前请求添加到请求队列中</span></span><br><span class=\"line\">        MyApplication.getQueue().add(stringRequest);</span><br><span class=\"line\">        <span class=\"comment\">// 重启当前请求队列</span></span><br><span class=\"line\">        MyApplication.getQueue().start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取POST请求内容（请求的代码为Map）</span></span><br><span class=\"line\"><span class=\"comment\">    * 参数：</span></span><br><span class=\"line\"><span class=\"comment\">    * context：当前上下文；</span></span><br><span class=\"line\"><span class=\"comment\">    * url：请求的url地址；</span></span><br><span class=\"line\"><span class=\"comment\">    * tag：当前请求的标签；</span></span><br><span class=\"line\"><span class=\"comment\">    * params：POST请求内容；</span></span><br><span class=\"line\"><span class=\"comment\">    * volleyListenerInterface：VolleyListenerInterface接口；</span></span><br><span class=\"line\"><span class=\"comment\">    * timeOutDefaultFlg：是否使用Volley默认连接超时；</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">RequestPost</span><span class=\"params\">(Context context, String url, String tag,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                   <span class=\"keyword\">final</span> Map&lt;String, String&gt; params,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                   VolleyListenerInterface volleyListenerInterface,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                   <span class=\"keyword\">boolean</span> timeOutDefaultFlg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 清除请求队列中的tag标记请求</span></span><br><span class=\"line\">        MyApplication.getQueue().cancelAll(tag);</span><br><span class=\"line\">        <span class=\"comment\">// 创建当前的POST请求，并将请求内容写入Map中</span></span><br><span class=\"line\">        stringRequest = <span class=\"keyword\">new</span> StringRequest(Request.Method.POST, ConstUtils.BASEURL + url,</span><br><span class=\"line\">                volleyListenerInterface.responseListener(), volleyListenerInterface.errorListener()) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> Map&lt;String, String&gt; <span class=\"title\">getParams</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> AuthFailureError </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> params;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 为当前请求添加标记</span></span><br><span class=\"line\">        stringRequest.setTag(tag);</span><br><span class=\"line\">        <span class=\"comment\">// 默认超时时间以及重连次数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> myTimeOut = timeOutDefaultFlg ? DefaultRetryPolicy.DEFAULT_TIMEOUT_MS : sTimeOut;</span><br><span class=\"line\">        stringRequest.setRetryPolicy(<span class=\"keyword\">new</span> DefaultRetryPolicy(myTimeOut,</span><br><span class=\"line\">                DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));</span><br><span class=\"line\">        <span class=\"comment\">// 将当前请求添加到请求队列中</span></span><br><span class=\"line\">        MyApplication.getQueue().add(stringRequest);</span><br><span class=\"line\">        <span class=\"comment\">// 重启当前请求队列</span></span><br><span class=\"line\">        MyApplication.getQueue().start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-Volley-请求（成功或失败）的监听事件封装\"><a href=\"#3-2-Volley-请求（成功或失败）的监听事件封装\" class=\"headerlink\" title=\"3.2 Volley 请求（成功或失败）的监听事件封装\"></a>3.2 Volley 请求（成功或失败）的监听事件封装</h3><p>封装 Volley 请求（成功或失败）的监听事件。<br>VolleyListenerInterface.java：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VolleyListenerInterface</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Context mContext;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Response.Listener&lt;String&gt; mListener;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Response.ErrorListener mErrorListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">VolleyListenerInterface</span><span class=\"params\">(Context context, Response.Listener&lt;String&gt; listener,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                   Response.ErrorListener errorListener)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mErrorListener = errorListener;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mListener = listener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 请求成功时的回调函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onMySuccess</span><span class=\"params\">(String result)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 请求失败时的回调函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">onMyError</span><span class=\"params\">(VolleyError error)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建请求的事件监听</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Response.<span class=\"function\">Listener&lt;String&gt; <span class=\"title\">responseListener</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mListener = <span class=\"keyword\">new</span> Response.Listener&lt;String&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">                Log.e(<span class=\"string\">&quot;Volley Response&quot;</span>, <span class=\"string\">&quot;response == &quot;</span> + s);</span><br><span class=\"line\">                onMySuccess(s);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mListener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建请求失败的事件监听</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Response.<span class=\"function\">ErrorListener <span class=\"title\">errorListener</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mErrorListener = <span class=\"keyword\">new</span> Response.ErrorListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onErrorResponse</span><span class=\"params\">(VolleyError volleyError)</span> </span>&#123;</span><br><span class=\"line\">                onMyError(volleyError);</span><br><span class=\"line\">                Toast.makeText(mContext,</span><br><span class=\"line\">                        mContext.getString(R.string.toast_networkError), Toast.LENGTH_LONG).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mErrorListener;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-Volley-文件上传类的封装\"><a href=\"#3-3-Volley-文件上传类的封装\" class=\"headerlink\" title=\"3.3 Volley 文件上传类的封装\"></a>3.3 Volley 文件上传类的封装</h3><p>封装文件上传至服务器的工具类。<br>PostUploadRequest.java：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostUploadRequest</span> <span class=\"keyword\">extends</span> <span class=\"title\">Request</span>&lt;<span class=\"title\">JSONObject</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String prefix = <span class=\"string\">&quot;--&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String end = <span class=\"string\">&quot;\\r\\n&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String boundary = <span class=\"string\">&quot;--------------&quot;</span> + System.currentTimeMillis();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String mimeType = <span class=\"string\">&quot;multipart/form-data;boundary=&quot;</span> + boundary;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Response.Listener&lt;JSONObject&gt; mListener;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String[]&gt; fileMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PostUploadRequest</span><span class=\"params\">(String url, Map&lt;String, String[]&gt; fileMap,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Response.Listener&lt;JSONObject&gt; mListener,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             Response.ErrorListener listener)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(Method.POST, url, listener);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mListener = mListener;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fileMap = fileMap;</span><br><span class=\"line\">        setShouldCache(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        setRetryPolicy(<span class=\"keyword\">new</span> DefaultRetryPolicy(<span class=\"number\">5000</span>, </span><br><span class=\"line\">                DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Response&lt;JSONObject&gt; <span class=\"title\">parseNetworkResponse</span><span class=\"params\">(NetworkResponse response)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String je = <span class=\"keyword\">new</span> String(response.data, HttpHeaderParser.parseCharset(response.headers));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response.success(<span class=\"keyword\">new</span> JSONObject(je), HttpHeaderParser.parseCacheHeaders(response));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (UnsupportedEncodingException var3) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response.error(<span class=\"keyword\">new</span> ParseError(var3));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (JSONException var4) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Response.error(<span class=\"keyword\">new</span> ParseError(var4));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">deliverResponse</span><span class=\"params\">(JSONObject jsonObject)</span> </span>&#123;</span><br><span class=\"line\">        mListener.onResponse(jsonObject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getBodyContentType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mimeType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] getBody() <span class=\"keyword\">throws</span> AuthFailureError &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ByteArrayOutputStream bos = <span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">            DataOutputStream ds = <span class=\"keyword\">new</span> DataOutputStream(bos);</span><br><span class=\"line\">            buildTextPart(ds);</span><br><span class=\"line\">            buildFilePart(ds);</span><br><span class=\"line\">            ds.write((prefix + boundary + prefix + end).getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">            ds.flush();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bos.toByteArray();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buildFilePart</span><span class=\"params\">(DataOutputStream ds)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        Object[] key_arr = fileMap.keySet().toArray();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object name : key_arr) &#123;</span><br><span class=\"line\">            String[] val = fileMap.get(name.toString());</span><br><span class=\"line\">            String path = val[<span class=\"number\">0</span>];</span><br><span class=\"line\">            String filename = val[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                sb.append(prefix);</span><br><span class=\"line\">                sb.append(boundary);</span><br><span class=\"line\">                sb.append(end);</span><br><span class=\"line\">                sb.append(<span class=\"string\">&quot;Content-Disposition: form-data;name=\\&quot;&quot;</span>);</span><br><span class=\"line\">                sb.append(name.toString());</span><br><span class=\"line\">                sb.append(<span class=\"string\">&quot;\\&quot;;filename=\\&quot;&quot;</span>);</span><br><span class=\"line\">                sb.append(filename);</span><br><span class=\"line\">                sb.append(<span class=\"string\">&quot;\\&quot;&quot;</span> + end);<span class=\"comment\">//filename是文件名，如xxx.jpg，file是服务器传递参数的名字</span></span><br><span class=\"line\">                sb.append(<span class=\"string\">&quot;Content-Type: application/octet-stream;charset=UTF-8&quot;</span> + end);</span><br><span class=\"line\">                sb.append(end);</span><br><span class=\"line\">                ds.write(sb.toString().getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">                <span class=\"comment\">/* 取得文件的FileInputStream */</span></span><br><span class=\"line\">                FileInputStream fStream = <span class=\"keyword\">new</span> FileInputStream(path);<span class=\"comment\">//path是文件本地地址</span></span><br><span class=\"line\">                <span class=\"comment\">/* 设置每次写入1024bytes */</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> bufferSize = <span class=\"number\">1024</span>;</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[bufferSize];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">                <span class=\"comment\">/* 从文件读取数据至缓冲区 */</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((length = fStream.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/* 将资料写入DataOutputStream中 */</span></span><br><span class=\"line\">                    ds.write(buffer, <span class=\"number\">0</span>, length);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ds.write(end.getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">buildTextPart</span><span class=\"params\">(DataOutputStream ds)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Map&lt;String, String&gt; map = getParams();</span><br><span class=\"line\">            Object[] key_arr = map.keySet().toArray();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Object name : key_arr) &#123;</span><br><span class=\"line\">                String val = map.get(name.toString());</span><br><span class=\"line\">                ds.write((prefix + boundary + end).getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">                ds.write((<span class=\"string\">&quot;Content-Disposition: form-data;name=\\&quot;&quot;</span> + name.toString() + <span class=\"string\">&quot;\\&quot;&quot;</span> + end).getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">                ds.write((<span class=\"string\">&quot;Content-Type: text/plain;charset=UTF-8&quot;</span> + end).getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">                ds.write((end).getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">                ds.write((val + end).getBytes(<span class=\"string\">&quot;UTF-8&quot;</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | AuthFailureError e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、VolleyRequestUtil-的使用\"><a href=\"#四、VolleyRequestUtil-的使用\" class=\"headerlink\" title=\"四、VolleyRequestUtil 的使用\"></a>四、VolleyRequestUtil 的使用</h2><ul>\n<li><strong>用 GET 方式请求网络资源：</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">VolleyRequestUtil.RequestGet(<span class=\"keyword\">this</span>, url, <span class=\"string\">&quot;tag&quot;</span>, </span><br><span class=\"line\">    <span class=\"keyword\">new</span> VolleyListenerInterface(<span class=\"keyword\">this</span>, VolleyListenerInterface.mListener,</span><br><span class=\"line\">            VolleyListenerInterface.mErrorListener) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Volley请求成功时调用的函数</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMySuccess</span><span class=\"params\">(String result)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, s, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Volley请求失败时调用的函数</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMyError</span><span class=\"params\">(VolleyError error)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>用 POST 方式请求网络资源：</strong></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">VolleyRequestUtil.RequestPOST(<span class=\"keyword\">this</span>, url, <span class=\"string\">&quot;tag&quot;</span>, </span><br><span class=\"line\">    <span class=\"keyword\">new</span> VolleyListenerInterface(<span class=\"keyword\">this</span>, VolleyListenerInterface.mListener,</span><br><span class=\"line\">            VolleyListenerInterface.mErrorListener) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Volley请求成功时调用的函数</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMySuccess</span><span class=\"params\">(String result)</span> </span>&#123;</span><br><span class=\"line\">        Toast.makeText(MainActivity.<span class=\"keyword\">this</span>, result, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Volley请求失败时调用的函数</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMyError</span><span class=\"params\">(VolleyError error)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、PostUploadRequest-的使用\"><a href=\"#五、PostUploadRequest-的使用\" class=\"headerlink\" title=\"五、PostUploadRequest 的使用\"></a>五、PostUploadRequest 的使用</h2><p>用于上传文件的框架，封装于 Volley。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 上传文件分两步：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.调用此工具类，将文件传输到服务器（从本地选择文件的过程未列出）</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.调用修改文件名的接口，修改数据库中相应的字段，完成上传文件操作</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadFile</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String upLoadServerUri = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    HashMap&lt;String, String[]&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;uploadedfile&quot;</span>, <span class=\"keyword\">new</span> String[]&#123;filename, cutnameString&#125;);</span><br><span class=\"line\">    MyApplication.getQueue().add(<span class=\"keyword\">new</span> PostUploadRequest(upLoadServerUri,</span><br><span class=\"line\">            map, <span class=\"keyword\">new</span> Response.Listener&lt;JSONObject&gt;() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(JSONObject jsonObject)</span> </span>&#123;</span><br><span class=\"line\">            updatePic();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">new</span> Response.ErrorListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onErrorResponse</span><span class=\"params\">(VolleyError volleyError)</span> </span>&#123;</span><br><span class=\"line\">            Toast.makeText(mContext, <span class=\"string\">&quot;文件上传失败&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;) &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Map&lt;String, String&gt; <span class=\"title\">getParams</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> AuthFailureError </span>&#123;</span><br><span class=\"line\">            HashMap&lt;String, String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">                <span class=\"comment\">//map.put(&quot;token&quot;, &quot;&quot;);</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updatePic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Map&lt;String, String&gt; params = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    params.put(<span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    params.put(<span class=\"string\">&quot;pic&quot;</span>, cutnameString);</span><br><span class=\"line\">    VolleyRequestUtil.RequestPost(<span class=\"keyword\">this</span>, url, <span class=\"string\">&quot;tag&quot;</span>, params,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> VolleyListenerInterface(<span class=\"keyword\">this</span>, VolleyListenerInterface.mListener,</span><br><span class=\"line\">                    VolleyListenerInterface.mErrorListener) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Volley请求成功时调用的函数</span></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMySuccess</span><span class=\"params\">(String response)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// Volley请求失败时调用的函数</span></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMyError</span><span class=\"params\">(VolleyError error)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Volley 也提供了图片的缓存和优化，（ <code>com.android.volley.toolbox.NetworkImageView</code>） 自定义图片控件，本人在开发中未使用。该 Volley 的封装中，暂未考虑到图片和数据缓存。有一些地方封装得仍不够抽象，有待完善。非常欢迎各位能提出修改建议，一起进步！</strong><br><strong>Demo 源码请看 GitHub： <a href=\"https://github.com/lishide/MyVolley\">MyVolley</a>。</strong></p>\n","tags":["Android","Volley"]},{"title":"Flutter 初尝：搭建 Flutter 开发环境","url":"/2020/04/25/flutter-0-build-dev-env/","content":"<h1 id=\"Flutter-初尝：搭建-Flutter-开发环境\"><a href=\"#Flutter-初尝：搭建-Flutter-开发环境\" class=\"headerlink\" title=\"Flutter 初尝：搭建 Flutter 开发环境\"></a>Flutter 初尝：搭建 Flutter 开发环境</h1><p><a href=\"https://book.flutterchina.club/\">《Flutter实战》</a><br><a href=\"https://flutterchina.club/\">Flutter中文网</a></p>\n<span id=\"more\"></span>\n<h2 id=\"获取-Flutter-SDK\"><a href=\"#获取-Flutter-SDK\" class=\"headerlink\" title=\"获取 Flutter SDK\"></a>获取 Flutter SDK</h2><p>学习和使用可按照 <a href=\"https://book.flutterchina.club/\">Flutter 中文网</a> 教程进行，但是在安装过程中发现，使用 flutter 项目下载的 release 包安装后会报以下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Error: The Flutter directory is not a <span class=\"built_in\">clone</span> of the GitHub project.</span><br><span class=\"line\">The flutter tool requires Git <span class=\"keyword\">in</span> order to operate properly;</span><br><span class=\"line\">to <span class=\"built_in\">set</span> up Flutter, run the following <span class=\"built_in\">command</span>:</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> -b beta https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure>\n<p>解决方案：</p>\n<ol>\n<li>在 flutter 目录执行 <code>git init</code>。<strong>不推荐</strong></li>\n<li>按官方推荐 <code>git clone -b beta https://github.com/flutter/flutter.git</code> 使用 beta 分支。<blockquote>\n<p>这个仓库的拉取真的「看命」，有时候下载超慢，刚开始下载了 N 多次都失败了，今早来下载速度非常快。祝你好运！</p>\n</blockquote>\n</li>\n</ol>\n<p>以上仅是我遇到的情况，不代表官网的步骤有问题。主要步骤还是按照官网介绍进行哦。</p>\n<p>总结一下安装流程（macOS）。</p>\n<ul>\n<li><p>下载 SDK<br>终端路径切换至 <code>Applications</code>，运行：<br><code>git clone -b beta https://github.com/flutter/flutter.git</code> 。</p>\n</li>\n<li><p>配置 flutter</p>\n<p>终端输入：<code>open ~/.bash_profile</code>，配置 Flutter 路径</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">export PUB_HOSTED_URL=https://pub.flutter-io.cnexport</span><br><span class=\"line\">FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cnexport</span><br><span class=\"line\">PATH=$PATH:/Applications/flutter/bin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新配置的环境变量 <code>source ~/.bash_profile</code></p>\n</li>\n<li><p>验证</p>\n<p>终端输入 <code>flutter -h</code>，没有提示该命令找不到，则配置成功。会自动安装一些 Flutter 依赖等。也有可能需要重启系统，那就重启后再试。</p>\n</li>\n<li><p>运行 <code>flutter doctor</code> 命令</p>\n<p>命令行输入 <code>flutter doctor</code>，安装 Futter 剩余依赖项。</p>\n<p>有报红的，按照提示一个一个的解决。</p>\n<p>在 Windows 上运行出现 <code>Unkonwn operating system. Cannot install Dart SDK.</code></p>\n<p>解决办法：到 flutter/bin 目录，打开命令行，运行 <code>flutter.bat doctor</code>，而非 <code>flutter doctor</code> 则会出现下载相关依赖的操作，以后就可以用 <code>flutter doctor</code> 了。</p>\n</li>\n</ul>\n<h2 id=\"IDE-配置与使用\"><a href=\"#IDE-配置与使用\" class=\"headerlink\" title=\"IDE 配置与使用\"></a>IDE 配置与使用</h2><p>接下来再进行 IDE 的安装与配置，安装 Android Studio、安装 Xcode、安装 Flutter 插件，这些过程就不赘述了，相信它们已经存在于你的电脑上了。也可以使用 VS Code 编辑器进行开发和调试，同样安装 Flutter 插件即可。</p>\n<p>创建 Flutter 应用，连接真机或模拟器设备，就可以运行和调试 Flutter 应用了。<strong>热重载</strong>是超棒的体验！</p>\n","tags":["Android Studio","Flutter"]},{"title":"自定义 IDE 配色主题","url":"/2018/10/31/dev-ide-custom-color-scheme/","content":"<p>试用了很多款主题，个人比较喜欢 <strong>Ladies Night 2</strong> 和 <strong>Sublime Text 2</strong>。 Ladies Night 2 主题在 Color Themes 上下载量最多，Sublime Text 2 也有很多人推荐。目前在用的是：<strong>Sublime Text 2</strong>，当然，每一款主题都并非完美的，并不一定适合所有人的口味，自己喜欢才好。针对几处不完美的地方（某些关键词色值或背景色值不合适导致的关键词看不清楚）做了一些修改，以备后用。结合 <strong>Darcula</strong> 主题比较有用的提示功能，配置最适合自己的、赏心悦目的 Color Scheme。</p>\n<span id=\"more\"></span>\n<h3 id=\"Ladies-Night-2-个人修改\"><a href=\"#Ladies-Night-2-个人修改\" class=\"headerlink\" title=\"Ladies Night 2 个人修改\"></a>Ladies Night 2 个人修改</h3><h4 id=\"字体字号\"><a href=\"#字体字号\" class=\"headerlink\" title=\"字体字号\"></a>字体字号</h4><p>Color Scheme Font，选择合适的字体字号。</p>\n<h4 id=\"General\"><a href=\"#General\" class=\"headerlink\" title=\"General\"></a>General</h4><ul>\n<li>Errors and Warnings<ul>\n<li>Warning<br>  B：<strong>[ ] -&gt; 52503A</strong><br>  Error：<strong>E3BF20 -&gt; BE9117</strong><br>  Effects：<strong>（取消勾选）</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Language-Defaults\"><a href=\"#Language-Defaults\" class=\"headerlink\" title=\"Language Defaults\"></a>Language Defaults</h4><ul>\n<li><p>Inline Parameter hints</p>\n<ul>\n<li>Default<br>  F：<strong>7A7A7A -&gt; 787878</strong><br>  B：<strong>EDEDED -&gt; 3B3B3B</strong></li>\n<li>Current：<br>   F：<strong>5B5B5B -&gt; ACACAC</strong><br>   B：<strong>BCDAF7 -&gt; 305D78</strong></li>\n<li>Highlighted<br>   F：<strong>5B5B5B -&gt; ACACAC</strong><br>   B：<strong>CCCCCC -&gt; 4D4D4D</strong></li>\n</ul>\n</li>\n<li><p>Braces and Operators</p>\n<ul>\n<li>Semicolon&amp;Comma<br>  F：<strong>E8E2B7 -&gt; CC7832</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h4><ul>\n<li><p>Comments</p>\n<ul>\n<li>JavaDoc<ul>\n<li>Tag： <strong>E0E2E4 -&gt; 629755</strong></li>\n<li>Tag value： <strong>[ ? ] -&gt; 8A653B</strong></li>\n<li>Text： <strong>7D8C93 -&gt; 629755</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Parameters</p>\n<ul>\n<li>Type parameter： <strong>E0E2E4 -&gt; 507874</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Kotlin\"><a href=\"#Kotlin\" class=\"headerlink\" title=\"Kotlin\"></a>Kotlin</h4><ul>\n<li><p>Smart-casts</p>\n<ul>\n<li>Smart-cast implicit receiver(B)： <strong>DBFFDB -&gt; 223C23</strong></li>\n<li>Smart-cast value(B)： <strong>DBFFDB -&gt; 223C23</strong></li>\n<li>Smart constant(B)： <strong>DBFFDB -&gt; 223C23</strong></li>\n</ul>\n</li>\n<li><p>KDoc</p>\n<ul>\n<li>KDoc comment： <strong>[ ? ] -&gt; 629755</strong></li>\n<li>tag： <strong>E0E2E4 -&gt; 629755</strong></li>\n<li>KDoc Link in KDoc tag： <strong>3D3D3D -&gt; 8A653B</strong></li>\n</ul>\n</li>\n<li><p>Properties and Variables</p>\n<ul>\n<li>Instance property： <strong>FEFFFB -&gt; 9876AA</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Groovy\"><a href=\"#Groovy\" class=\"headerlink\" title=\"Groovy\"></a>Groovy</h4><ul>\n<li>Keyword： <strong>000043 -&gt; CC7832</strong></li>\n</ul>\n<h4 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h4><ul>\n<li>Namespace prefix： <strong>FEFFFB -&gt; 9876AA</strong></li>\n</ul>\n<h4 id=\"VCS\"><a href=\"#VCS\" class=\"headerlink\" title=\"VCS\"></a>VCS</h4><ul>\n<li>VCS Annotations<ul>\n<li>F： <strong>000080 -&gt; 8B999F</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Sublime-Text-2-个人修改\"><a href=\"#Sublime-Text-2-个人修改\" class=\"headerlink\" title=\"Sublime Text 2 个人修改\"></a>Sublime Text 2 个人修改</h3><h4 id=\"General-1\"><a href=\"#General-1\" class=\"headerlink\" title=\"General\"></a>General</h4><ul>\n<li>Text<ul>\n<li>Default text<br>  F：<strong>CFBFAD -&gt; A9B7C6</strong><br>  B：<strong>272822 -&gt; 2B2B2B</strong></li>\n<li>Folded text<br>  F：<strong>404040 -&gt; 8C8C8C</strong><br>  B：<strong>CC9900 -&gt; 3A3A3A</strong></li>\n<li>Deleted text<br>  F：<strong>272822 -&gt; BBBBBB</strong><br>  B：<strong>CFBFAD -&gt; 450505</strong><br>  Effects：<strong>[ ] -&gt; C3C3C3</strong></li>\n</ul>\n</li>\n<li><p>Hyperlinks</p>\n<ul>\n<li>Reference<br>  F：<strong>0000FF -&gt; 589DF6</strong><br>  Effects：<strong>0000FF -&gt; 589DF6 （Underscored）</strong></li>\n<li>Followed<br>  Effects：<strong>同 F （Underscored）</strong></li>\n<li>Unfollowed<br>  Effects：<strong>同 F （Underscored）</strong></li>\n</ul>\n</li>\n<li><p>Errors and Warnings</p>\n<ul>\n<li>Deprecated symbol<br>  Foreground <strong>（关）</strong><br>  Effects：<strong>[ ] -&gt; C3C3C3</strong></li>\n<li>Error（这个较有用，提示错误）<br>  E：<strong>BC3F3C -&gt; 9E2927</strong><br>  Effects：<strong>3C3F3C -&gt; BC3F3C （Underwaved）</strong></li>\n<li>Unsed symbol<br>  Effects：<strong>3C3F3C -&gt; 808080 （Underwaved）</strong></li>\n<li>Typo<br>  Effects：<strong>3C3F3C -&gt; 659C6B （Underwaved）</strong></li>\n<li>Problem from server<br>  E：<strong>F49810 -&gt; B06100</strong><br>  Effects：<strong>3C3F3C -&gt; F49810 （Underscored）</strong></li>\n<li>Weak warning<br>  E：<strong>AEAE80 -&gt; 756D56</strong><br>  Effects：<strong>[ ] -&gt; AEAE80 （Underwaved）</strong></li>\n</ul>\n</li>\n<li><p>Search Results</p>\n<ul>\n<li>Search result<br>  B：<strong>000000 -&gt; 155221</strong><br>  E：<strong>000000 -&gt; 00530D</strong></li>\n<li>Search result(write access)<br>  B：<strong>000000 -&gt; 532B2E</strong><br>  E：<strong>000000 -&gt; 8D4457</strong></li>\n<li>Text search result<br>  B：<strong>D8D8D8 -&gt; 32593D</strong><br>  E：<strong>D8D8D8 -&gt; 61936F</strong><br>  Effects：<strong>[ ] -&gt; 3C704B （Bordered）</strong></li>\n</ul>\n</li>\n<li>Code<ul>\n<li>Identifier under caret<br>  B：<strong>000000 -&gt; 344134</strong><br>  E：<strong>000000 -&gt; 036B13</strong></li>\n<li>Identifier under caret(write)<br>  B：<strong>000000 -&gt; 40332B</strong><br>  E：<strong>000000 -&gt; B56277</strong></li>\n</ul>\n</li>\n<li>Editor<ul>\n<li>Gutter background（编码区左侧信息区域背景）<br> B：<strong>272822 -&gt; 313335</strong><ul>\n<li>Caret row（光标所在行）<br>B：<strong>5B5A4E -&gt; 323232(383341)</strong></li>\n<li>Selection background（选中行背景）<br>B：<strong>CC9900 -&gt; 214283</strong></li>\n<li>Selection foreground（选中行前景）<br>F：<strong>关闭，即显示原代码颜色</strong></li>\n<li>Notification background（通知背景）<br>F：<strong>FFFFCC -&gt; 5C5C42</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Language-Defaults-1\"><a href=\"#Language-Defaults-1\" class=\"headerlink\" title=\"Language Defaults\"></a>Language Defaults</h4><ul>\n<li><p>Inline hints-&gt;Parameters</p>\n<ul>\n<li>Default<br>  F：<strong>7A7A7A -&gt; 787878</strong><br>  B：<strong>EDEDED -&gt; 3B3B3B</strong></li>\n<li>Current：<br>  F：<strong>5B5B5B -&gt; ACACAC</strong><br>  B：<strong>BCDAF7 -&gt; 305D78</strong></li>\n<li>Highlighted<br>  F：<strong>5B5B5B -&gt; ACACAC</strong><br>  B：<strong>CCCCCC -&gt; 4D4D4D</strong></li>\n</ul>\n</li>\n<li><p>Comments</p>\n<ul>\n<li>Doc Comment<ul>\n<li>Tag： <strong>8A826B -&gt; 629755</strong></li>\n<li>Tag value： <strong>3D3D3D -&gt; 8A653B</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>String<ul>\n<li>Escape Sequence<ul>\n<li>Invalid<br>  F：<strong>FF0000 -&gt; ECE47E</strong><br>  Effects：<strong>[ ] -&gt; FF0000 （Underwaved）</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Bad character<br>  F：<strong>（关）</strong><br>  Effects：<strong>[ ] -&gt; FF0000 （Underwaved）</strong></li>\n<li>Template language<br>  F：<strong>（关）</strong><br>  B：<strong>[ ] -&gt; 232525</strong></li>\n<li>Number<br>  F：<strong>C48CFF -&gt; 6897BB</strong></li>\n</ul>\n<h4 id=\"Java-1\"><a href=\"#Java-1\" class=\"headerlink\" title=\"Java\"></a>Java</h4><ul>\n<li>Class Fields<ul>\n<li>Constant(static final field)： <strong>660E7A -&gt; 9876AA</strong></li>\n<li>Instance field<br>  F：<strong>CFBFAD -&gt; 9876AA</strong></li>\n<li>Static field<br>  F：<strong>CFBFAD-&gt;9876AA（Italic）</strong></li>\n</ul>\n</li>\n<li>Parameters<ul>\n<li>Implicit anonymous class parameter<br>  Effects：<strong>[ ] -&gt; 52E3F6 （Underscored）</strong></li>\n<li>Type parameter<br>  F：<strong>BFA4A4-&gt;507874</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Kotlin-1\"><a href=\"#Kotlin-1\" class=\"headerlink\" title=\"Kotlin\"></a>Kotlin</h4><ul>\n<li>Smart-casts<ul>\n<li>Smart-cast implicit receiver(B)： <strong>DBFFDB -&gt; 223C23</strong></li>\n<li>Smart-cast value(B)： <strong>DBFFDB -&gt; 223C23</strong></li>\n<li>Smart constant(B)： <strong>DBFFDB -&gt; 223C23</strong></li>\n</ul>\n</li>\n<li>Annotation： <strong>000080 -&gt; CC7832</strong></li>\n<li>Parameters<ul>\n<li>Type parameter： <strong>BFA4A4 -&gt; 20999D</strong></li>\n</ul>\n</li>\n<li>Properties and Variables<ul>\n<li>Instance property： <strong>FEFFFB -&gt; 9876AA</strong></li>\n<li>Extension property： <strong>CFBFAD -&gt; 9876AA(Italic)</strong></li>\n<li>Package-level property： <strong>CFBFAD -&gt; 9876AA(Italic)</strong></li>\n<li>Synthetic extension property： <strong>CFBFAD -&gt; 9876AA</strong></li>\n<li>Var(Effects)： <strong>000000 -&gt; BCA5C4</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Groovy-1\"><a href=\"#Groovy-1\" class=\"headerlink\" title=\"Groovy\"></a>Groovy</h4><ul>\n<li>Keyword： <strong>000043 -&gt; CC7832</strong></li>\n<li>Bad character<br>  F：<strong>（关）</strong><br>  Effects：<strong>[ ] -&gt; FF0000 （Underwaved）</strong></li>\n<li>References<ul>\n<li>Unresolved reference<br>  F：<strong>000080 -&gt; 808080</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"XML-1\"><a href=\"#XML-1\" class=\"headerlink\" title=\"XML\"></a>XML</h4><ul>\n<li>Namespace prefix： <strong>CFBFAD -&gt; 9876AA</strong></li>\n<li>Attribute name： <strong>BFA4A4 -&gt; 9876AA</strong></li>\n<li>Attribute value： <strong>ECE47E -&gt; 4CD656</strong></li>\n</ul>\n<h4 id=\"VCS-1\"><a href=\"#VCS-1\" class=\"headerlink\" title=\"VCS\"></a>VCS</h4><ul>\n<li>VCS Annotations<ul>\n<li>Foreground(F)： <strong>000080 -&gt; 8B999F</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Console-Colors\"><a href=\"#Console-Colors\" class=\"headerlink\" title=\"Console Colors\"></a>Console Colors</h4><ul>\n<li>Terminal<ul>\n<li>Command to run using IDE(B)： <strong>CFEFC6 -&gt; 40503C</strong></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>备份很重要！！！记得把自己配置好的 Color Scheme 导出 jar，云盘备份保存。</p>\n</blockquote>\n","tags":["IDE","Color Scheme"]},{"title":"Hello World","url":"/2021/11/19/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"hexo 的主题切换为 NexT 后的若干个性化配置","url":"/2018/03/27/hexo-NexT-deploy/","content":"<p>刚使用 hexo 搭建个人博客的时候，看到推荐使用相对较多的主题是 yilia，便安装了，讲真，yilia 主题是一个简洁优雅的主题，后期也做了一些个人配置，体验上还算不错。用过一段时间后，个人对代码块的黑色背景配色有点不喜欢，而且无法自己定制，另外不支持某些鼠标手势……于是想换一款更适合自己的主题，昨天换上了 <strong>NexT</strong>，很清新简洁，风格是我喜欢的，哈哈~。网上有很多大佬分享了针对 <strong>NexT</strong> 主题的一些配置，根据个人需求，做了部分配置，本文记录将 hexo 的主题切换为 NexT 后的若干个性化配置，具体的操作就不详细描述了，主要参考了<a href=\"https://www.jianshu.com/p/f054333ac9e6\">hexo的next主题个性化教程:打造炫酷网站</a>，尊重原作，我把自己修改的地方只做序号记录即可（简称 N），以后在主题更新后方便找回自己的配置。</p>\n<span id=\"more\"></span>\n<h1 id=\"使用主题\"><a href=\"#使用主题\" class=\"headerlink\" title=\"使用主题\"></a>使用主题</h1><p>使用的 版本是<code>v6.0.x</code>，GitHub 地址：<a href=\"https://github.com/theme-next/hexo-theme-next\">hexo-theme-next</a>。</p>\n<p>v6.x -&gt; v7.x</p>\n<h1 id=\"个性化配置\"><a href=\"#个性化配置\" class=\"headerlink\" title=\"个性化配置\"></a>个性化配置</h1><h2 id=\"选择-scheme\"><a href=\"#选择-scheme\" class=\"headerlink\" title=\"选择 scheme\"></a>选择 scheme</h2><p><strong>主题配置文件</strong> 中，设置 <code>scheme: Gemini</code>。</p>\n<h2 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h2><p><strong>站点配置文件</strong> 中，设置 <code>language: zh-CN</code>。</p>\n<h2 id=\"设置社交账号\"><a href=\"#设置社交账号\" class=\"headerlink\" title=\"设置社交账号\"></a>设置社交账号</h2><p><strong>主题配置文件</strong> 中，<strong>social</strong> 节点下配置你的 GitHub、weibo 等账号，<code>||</code> 后面是其对应的图标。</p>\n<h2 id=\"修改文章内链接文本样式\"><a href=\"#修改文章内链接文本样式\" class=\"headerlink\" title=\"修改文章内链接文本样式\"></a>修改文章内链接文本样式</h2><p>参考 N5</p>\n<h2 id=\"修改文章底部的那个带-号的标签\"><a href=\"#修改文章底部的那个带-号的标签\" class=\"headerlink\" title=\"修改文章底部的那个带#号的标签\"></a>修改文章底部的那个带#号的标签</h2><p><del>参考 N6</del></p>\n<p><strong>更新-2019.09.01</strong><br>NexT 新版本已加入了此功能，升级新版本，在 <strong>主题配置文件</strong> 中，设置 <code>tag_icon: true</code>。</p>\n<h2 id=\"在网站底部加上访问量\"><a href=\"#在网站底部加上访问量\" class=\"headerlink\" title=\"在网站底部加上访问量\"></a><del>在网站底部加上访问量</del></h2><p>参考 N13</p>\n<p>步骤：</p>\n<ul>\n<li>打开<code>\\themes\\next\\layout\\_partials\\footer.swig</code>文件</li>\n<li>在 <code>copyright</code> 的 div 前添加：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>在合适位置添加显示统计的代码，如下是我添加的：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;powered-by&quot;</span>&gt;</span><br><span class=\"line\">&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;fa fa-eye&quot;</span>&gt;&lt;/i&gt;</span><br><span class=\"line\">&lt;span id=<span class=\"string\">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><br><span class=\"line\">  访问量：&lt;span id=<span class=\"string\">&quot;busuanzi_value_site_pv&quot;</span>&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/span&gt;</span><br><span class=\"line\">&lt;span <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class=\"line\">&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;fa fa-user-md&quot;</span>&gt;&lt;/i&gt;</span><br><span class=\"line\">&lt;span id=<span class=\"string\">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span><br><span class=\"line\">  访客数：&lt;span id=<span class=\"string\">&quot;busuanzi_value_site_uv&quot;</span>&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;span <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n有两种统计方式：<strong>pv</strong> 和 <strong>uv</strong>，根据个人需要选择。</li>\n</ul>\n<p>添加之后进行部署，成功后刷新页面就能看到效果了。</p>\n<h2 id=\"网站底部字数统计\"><a href=\"#网站底部字数统计\" class=\"headerlink\" title=\"网站底部字数统计\"></a>网站底部字数统计</h2><p><del>参考 N15</del></p>\n<h2 id=\"添加字数统计、阅读时长\"><a href=\"#添加字数统计、阅读时长\" class=\"headerlink\" title=\"添加字数统计、阅读时长\"></a>添加字数统计、阅读时长</h2><p><del>参考 N18</del><br><del>参考 <a href=\"https://sessionch.com/hexo/hexo-common-plug.html\">Hexo 添加字数统计、阅读时长</a></del><br><del>参考 <a href=\"https://toxufe.github.io/posts/41943/\">给hexo博客,next主题,文章添加字数和阅读时长</a></del><br><del>参考 <a href=\"https://eason-yang.com/2016/11/05/add-word-count-to-hexo-next/\">为Hexo NexT主题添加字数统计功能</a></del></p>\n<p>步骤：</p>\n<ul>\n<li>打开<code>\\themes\\next\\layout\\_macro/post.swig</code>文件</li>\n<li>在 class 为 <code>post-mata</code> 的 <strong>div</strong> 中的添加如下内容：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> theme.post_wordcount.wordcount %&#125;</span><br><span class=\"line\">&lt;span <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;post-letters-count&quot;</span>&gt;</span><br><span class=\"line\">  &lt;span <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class=\"line\">  &lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;fa fa-file-word-o&quot;</span>&gt;&lt;/i&gt;</span><br><span class=\"line\">  &lt;span&gt;</span><br><span class=\"line\">      &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class=\"line\">  &lt;/span&gt;</span><br><span class=\"line\">  &lt;span <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class=\"line\">  &lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;fa fa-clock-o&quot;</span>&gt;&lt;/i&gt;</span><br><span class=\"line\">  &lt;span&gt;</span><br><span class=\"line\">      &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class=\"line\">  &lt;/span&gt;</span><br><span class=\"line\">&lt;/span&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>设置了 <code>title</code> 但未显示，已移除。</p>\n</blockquote>\n</li>\n</ul>\n<p><strong>更新-2019.09.01</strong><br>NexT 新版本（v7.x）加入了字数统计插件——hexo-symbols-count-time，比 hexo-worcount 更快。GitHub 地址：<a href=\"https://github.com/theme-next/hexo-symbols-count-time\">hexo-symbols-count-time</a></p>\n<p><strong>站点配置文件</strong> 中，设置：<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  symbols: <span class=\"literal\">true</span></span><br><span class=\"line\">  time: <span class=\"literal\">true</span></span><br><span class=\"line\">  total_symbols: <span class=\"literal\">true</span></span><br><span class=\"line\">  total_time: <span class=\"literal\">true</span></span><br><span class=\"line\">  exclude_codeblock: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></p>\n<p><strong>主题配置文件</strong> 中，设置：（默认已设置）<br><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  separated_meta: <span class=\"literal\">true</span></span><br><span class=\"line\">  item_text_post: <span class=\"literal\">true</span></span><br><span class=\"line\">  item_text_total: <span class=\"literal\">false</span></span><br><span class=\"line\">  awl: <span class=\"number\">4</span></span><br><span class=\"line\">  wpm: <span class=\"number\">275</span></span><br></pre></td></tr></table></figure><br>打开 <strong>站点配置文件</strong> 中的统计功能即可，几项配置参数在项目介绍中有说明，根据需要进行调整。</p>\n<h2 id=\"添加本地搜索功能\"><a href=\"#添加本地搜索功能\" class=\"headerlink\" title=\"添加本地搜索功能\"></a>添加本地搜索功能</h2><ul>\n<li><p>安装本地搜索插件 hexo-generator-search</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>\n<p>安装之后，会在站点目录的 public 文件夹下创建一个 search.json 文件。</p>\n</li>\n<li><p>修改站点配置文件<br><strong>站点配置文件</strong> 中添加搜索配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">search:</span><br><span class=\"line\">    path: search.json</span><br><span class=\"line\">    field: all</span><br><span class=\"line\">    format: html</span><br><span class=\"line\">    limit: <span class=\"number\">10000</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>path：索引文件的路径，相对于站点根目录</li>\n<li>field：搜索范围，默认是 post，还可以选择 page、all，设置成 all 表示搜索所有页面</li>\n<li>limit：限制搜索的条目数</li>\n</ul>\n</blockquote>\n<ul>\n<li>打开搜索功能<br><strong>主题配置文件</strong> 中，设置：<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">local_search:</span><br><span class=\"line\">    enable: <span class=\"literal\">true</span></span><br><span class=\"line\">    trigger: auto</span><br><span class=\"line\">    top_n_per_article: <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">unescape</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    preload: <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n确保 enable 设成 true。</li>\n</ul>\n<blockquote>\n<ul>\n<li>top_n_per_article 字段表示在每篇文章中显示的搜索结果数量，设成 -1 会显示每篇文章的所有搜索结果数量。</li>\n</ul>\n</blockquote>\n<p>重新部署网站即可使用本地搜索功能了。</p>\n<h2 id=\"添加百度统计\"><a href=\"#添加百度统计\" class=\"headerlink\" title=\"添加百度统计\"></a>添加百度统计</h2><p><a href=\"http://theme-next.iissnan.com/getting-started.html\">http://theme-next.iissnan.com/getting-started.html</a></p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>不断折腾中，不定期更新~</p>\n","tags":["hexo","NexT"]},{"title":"firstBlog","url":"/2018/02/12/firstBlog/","content":"<p>Hello Hexo, I’m Li Shide.</p>\n","tags":["随笔"]},{"title":"使用 hexo 搭建部署 GitHub 博客","url":"/2018/02/12/hexo-blog-create/","content":"<p>使用 hexo 搭建一个自己的独立博客/个人网站。</p>\n<span id=\"more\"></span>\n<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><ul>\n<li>Node.js</li>\n<li>Git</li>\n<li>Hexo</li>\n</ul>\n<h2 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h2><p>进入<a href=\"https://nodejs.org/en/\">Node.js 官网</a>，下载对应版本，一路安装即可。</p>\n<h2 id=\"安装-Git\"><a href=\"#安装-Git\" class=\"headerlink\" title=\"安装 Git\"></a>安装 Git</h2><p><a href=\"https://git-scm.com/download\">Git</a>，下载后直接安装即可。</p>\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>当 Node.js 和 git 安装好，下面就需要安装 Hexo 了，终端执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo-安装测试\"><a href=\"#Hexo-安装测试\" class=\"headerlink\" title=\"Hexo 安装测试\"></a>Hexo 安装测试</h2><p>测试一下，输入命令，显示版本号即表明安装成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure><br>以上软件安装好，就已经生成了一个博客系统，只不过这是最基础也是最简洁的博客系统。</p>\n<h2 id=\"Hexo-初始化\"><a href=\"#Hexo-初始化\" class=\"headerlink\" title=\"Hexo 初始化\"></a>Hexo 初始化</h2><p>创建一个 <strong>hexo（或 blog）</strong> 文件夹，终端 cd 到该文件夹下，执行命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure></p>\n<p>开启 hexo 服务器<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure></p>\n<p>此时，浏览器中打开网址：<a href=\"http://localhost:4000\">http://localhost:4000</a>，能看到 Hexo 默认的星空主题的网页。</p>\n<h1 id=\"关联-GitHub\"><a href=\"#关联-GitHub\" class=\"headerlink\" title=\"关联 GitHub\"></a>关联 GitHub</h1><h2 id=\"创建-GitHub-账号并新建项目\"><a href=\"#创建-GitHub-账号并新建项目\" class=\"headerlink\" title=\"创建 GitHub 账号并新建项目\"></a>创建 GitHub 账号并新建项目</h2><p>项目名称为<code>用户名.github.io</code>的固定写法，如下图所示</p>\n<blockquote>\n<p>注意：<code>用户名</code>就是以后博客地址的一部分，所以起一个自己喜欢的有个性的名字。</p>\n</blockquote>\n<h2 id=\"配置-Hexo-生成的配置文件\"><a href=\"#配置-Hexo-生成的配置文件\" class=\"headerlink\" title=\"配置 Hexo 生成的配置文件\"></a>配置 Hexo 生成的配置文件</h2><p>拷贝 GitHub 项目地址链接，终端 cd 到本地 hexo 文件夹下，打开文件夹下 <code>_config.yml</code> 文件，在最后增加如下配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">    repository: https://github.com/用户名/用户名.github.io.git</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：在编辑所有的 <code>_config.yml</code> 文件时（包括主题 theme 里的 <code>_config.yml</code> 文件）在所有的冒号<code>:</code>后边都要加一个空格，否则执行 hexo 命令会报错。</p>\n</blockquote>\n<p>在 <strong>hexo</strong> 文件夹目录下执行生成静态页面命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>此时若出现如下报错：<br>ERROR Local hexo not found in ~/hexo<br>ERROR Try runing: ‘npm install hexo –save’<br>则执行命令：<br>npm install hexo –save<br>若无报错，自行忽略此步骤。</p>\n</blockquote>\n<p>再执行配置命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n<p>若你未关联 GitHub，则执行 hexo deploy 命令时终端会提示你输入 GitHub 的用户名和密码，即<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Username <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://github.com&#x27;</span>:</span><br><span class=\"line\">Password <span class=\"keyword\">for</span> <span class=\"string\">&#x27;https://github.com&#x27;</span>:</span><br></pre></td></tr></table></figure><br>按照提示输入用户名和密码。</p>\n<p>hexo deploy 命令执行成功后，浏览器中打开网址 <a href=\"http://你的用户名.github.io\">http://你的用户名.github.io</a> 能看到和打开 <a href=\"http://localhost:4000\">http://localhost:4000</a> 时一样的页面，这时别人也可以访问了。</p>\n<h1 id=\"日常更新博客（以后每次部署文章的步骤）\"><a href=\"#日常更新博客（以后每次部署文章的步骤）\" class=\"headerlink\" title=\"日常更新博客（以后每次部署文章的步骤）\"></a>日常更新博客（以后每次部署文章的步骤）</h1><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">//新建文章</span><br><span class=\"line\">$ hexo new ”postName”</span><br><span class=\"line\">//清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class=\"line\">$ hexo clean</span><br><span class=\"line\">//生成缓存和静态文件</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">//重新部署到服务器（可以先执行 hexo s 命令，打开本地 hexo 服务器，在本地预览修改完之后在执行 hexo d 部署到服务器）</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<h1 id=\"安装主题-theme\"><a href=\"#安装主题-theme\" class=\"headerlink\" title=\"安装主题 theme\"></a>安装主题 theme</h1><p>可以到<a href=\"https://hexo.io/themes/\">Hexo官网主题</a>页去搜寻自己喜欢的 theme。目前我跟着别人的教程，安装的是<strong>yilia</strong>，以后可能会换。</p>\n<p>终端 cd 到 hexo 文件夹下，执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>\n<p>打开 <strong>hexo</strong> 文件夹下的 theme，发现 <code>yilia</code> 就在该目录下了。我们默认使用的是 <code>landscape</code>。<br>修改 <strong>hexo</strong> 文件夹下的 <code>_config.yml</code> 文件。将 theme 的名称 <code>landscape</code> 修改为 <code>yilia</code>。</p>\n<p>终端 cd 到 hexo 目录下执行日常更新博客用的命令，即：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></p>\n<p>至于更改 theme 内容，比如名称、描述、头像等去修改<strong>hexo/_config.yml</strong>文件和<strong>hexo/themes/yilia/_config.yml</strong>文件中对应的属性名称即可，不要忘记冒号:后加空格。</p>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>以上便是我搭建我的个人博客的全过程，希望对大家有所帮助。本文也参考了多位前辈的经验，作为自己的一个理解和操作过程，分享了出来，这里希望大神不要介意，感谢前辈的分享。</p>\n<p>Have a nice day.</p>\n","tags":["hexo"]},{"title":"hexo 博客搭建——多设备同步 hexo 搭建的 GitHub 博客","url":"/2018/02/12/hexo-blog-multi-sync/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在公司的 Mac 上使用 hexo 搭建了 GitHub 博客，然而我在自己的电脑上也想要同步 GitHub 博客到本地并发布更新，或者以后更换电脑了也希望最快的同步到最新的博客，不必重新搭建一遍。查询了一些网上的资料，现在记录一下，也给遇到同样问题的小伙伴们一个参考。<br><span id=\"more\"></span></p>\n<h1 id=\"多设备同步\"><a href=\"#多设备同步\" class=\"headerlink\" title=\"多设备同步\"></a>多设备同步</h1><p>同步思路与 GitHub 推拉源码思路相同，使用 git 指令，保持本地的<strong>博客文件</strong>与 GitHub 上的<strong>博客文件</strong>相同即可，其步骤如下：</p>\n<h2 id=\"上传博客工程\"><a href=\"#上传博客工程\" class=\"headerlink\" title=\"上传博客工程\"></a>上传博客工程</h2><p>部署博客到 GitHub 以后，我们可以在 GitHub 仓库的 master 分支上看到我们上传的博客文件。</p>\n<blockquote>\n<p>「使用 hexo 搭建部署 GitHub 博客」步骤请移步另一篇<a href=\"https://lishide.github.io/2018/02/12/hexo-blog-create/\">博文</a>查看更多。</p>\n</blockquote>\n<p>但是这个博客文件是不包含 hexo 配置的，所以我们需要新建分支，使用 git 指令将带 hexo 配置的 GitHub 工程文件上传到新建的分支上。</p>\n<p>（1）删除根目录和主题目录下面的隐藏 .git 文件夹</p>\n<p>（2）在本地博客根目录下使用 git 指令上传项目到 GitHub<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// git 初始化</span><br><span class=\"line\">git init</span><br><span class=\"line\">// 添加仓库地址</span><br><span class=\"line\">git remote add origin https://github.com/用户名/仓库名.git</span><br><span class=\"line\">// 新建分支并切换到新建的分支</span><br><span class=\"line\">git checkout -b 分支名</span><br><span class=\"line\">// 添加所有本地文件到 git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">// git 提交</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">// 文件推送到 hexo 分支</span><br><span class=\"line\">git push origin hexo</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他设备上-clone-下-GitHub-上新建的分支的文件到本地\"><a href=\"#其他设备上-clone-下-GitHub-上新建的分支的文件到本地\" class=\"headerlink\" title=\"其他设备上 clone 下 GitHub 上新建的分支的文件到本地\"></a>其他设备上 clone 下 GitHub 上新建的分支的文件到本地</h2><p>在另一台设备上使用 git 指令下载 GitHub 新建分支上的文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 克隆文件到本地</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> -b 分支名 https://github.com/用户名/仓库名.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地写文章\"><a href=\"#本地写文章\" class=\"headerlink\" title=\"本地写文章\"></a>本地写文章</h2><p>在 <code>source</code> -&gt; <code>_posts</code> 文件夹下新建 md 文件，编辑并保存。</p>\n<h2 id=\"部署到-GitHub\"><a href=\"#部署到-GitHub\" class=\"headerlink\" title=\"部署到 GitHub\"></a>部署到 GitHub</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 安装 hexo</span><br><span class=\"line\">npm install -g hexo</span><br><span class=\"line\">// 注意这里不需要 hexo 初始化：hexo init；否则之前的 hexo 配置参数会重置</span><br><span class=\"line\">// 安装依赖库</span><br><span class=\"line\">npm install</span><br><span class=\"line\">// 安装部署相关配置</span><br><span class=\"line\">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>\n<h2 id=\"同步项目源文件到-GitHub\"><a href=\"#同步项目源文件到-GitHub\" class=\"headerlink\" title=\"同步项目源文件到 GitHub\"></a>同步项目源文件到 GitHub</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 添加源文件</span><br><span class=\"line\">git add .</span><br><span class=\"line\">// git 提交</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">// 先拉原来 GitHub 分支上的源文件到本地，进行合并</span><br><span class=\"line\">// 分支名后面的“--allow-unrelated-histories”是为了弹出“fatal: refusing to merge unrelated histories.”的错误</span><br><span class=\"line\">git pull origin 分支名 --allow-unrelated-histories</span><br><span class=\"line\">// 比较解决前后版本冲突后，push 源文件到 GitHub 的分支</span><br><span class=\"line\">git push origin 分支名</span><br></pre></td></tr></table></figure>\n<h2 id=\"更新博客\"><a href=\"#更新博客\" class=\"headerlink\" title=\"更新博客\"></a>更新博客</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n<p>至此多设备同步到此为止。多设备环境都搭建成功，以后的更新博文操作<strong>3、5、6</strong>步骤即可。</p>\n","tags":["hexo"]},{"title":"hexo 博客搭建后的几点实用技巧和修改","url":"/2018/03/19/hexo-blog-customize/","content":"<p>总结 hexo 博客搭建后的几点实用技巧和修改，记录下来，同时分享给遇到同样问题的人。<br><span id=\"more\"></span></p>\n<h1 id=\"博文中添加图片\"><a href=\"#博文中添加图片\" class=\"headerlink\" title=\"博文中添加图片\"></a>博文中添加图片</h1><h2 id=\"方式一：本地调用\"><a href=\"#方式一：本地调用\" class=\"headerlink\" title=\"方式一：本地调用\"></a>方式一：本地调用</h2><ol>\n<li><p>修改 Hexo 的配置文件 <code>_config.yml</code> 中的 post_asset_folder 为 true</p>\n</li>\n<li><p>安装可以上传本地图片的插件，命令为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这样在以后创建博文时，即可同时生成一个同名的文件夹。将资源文件放入此文件夹，按照 markdown 的格式引入图片： <code>![提示文字](图片名.jpg)</code>，类似引用相对路径。</p>\n<h2 id=\"方式二：外链\"><a href=\"#方式二：外链\" class=\"headerlink\" title=\"方式二：外链\"></a>方式二：外链</h2><p>上面使用本地调用的方式比较简单，但在写了十几篇文章后，我换成了外链的方式。外链的优点是统一管理，本地调用管理比较混乱，外链可以被用在多个地方，不必再做多余修改，本地的 markdown 编辑器也能直接看到使用的资源。<br>使用的是<strong>七牛云</strong>做资源托管，有免费空间，足够了。使用方法也比较简单，可以参考<a href=\"https://www.jianshu.com/p/ec2c8acf63cd\">Hexo文章图片存储选七牛</a>。</p>\n<h1 id=\"多标签（tag）添加\"><a href=\"#多标签（tag）添加\" class=\"headerlink\" title=\"多标签（tag）添加\"></a>多标签（tag）添加</h1><p>格式为：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tags: [tag1, tag2]]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Ps：冒号和逗号后面要有一个空格。</p>\n</blockquote>\n<p>或者：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tags:</span><br><span class=\"line\">- tag1</span><br><span class=\"line\">- tag2</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"文章太长，截断文字，只显示一部分\"><a href=\"#文章太长，截断文字，只显示一部分\" class=\"headerlink\" title=\"文章太长，截断文字，只显示一部分\"></a>文章太长，截断文字，只显示一部分</h1><p>在配置文件中看到有一条设置是<strong><em>文章太长，截断按钮文字</em></strong>，以为自动会截断文字呢，结果前几天发现自己的博客主页的文章每篇都是全文显示的，而别人的只显示部分简洁的描述，查资料才发现，原来是要在文章中需要截断的地方加上 <code>&lt;!--more--&gt;</code> 标记。<br>这样每次添加这个标记有点麻烦，有网友分享了自动添加 read more 标记的方法，但可能会导致某些问题，喜欢折腾的可以参考一下，<a href=\"https://twiceyuan.com/2014/05/25/hexo%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0readmore%E6%A0%87%E8%AE%B0/\">Hexo 自动添加 Read More 标记</a>。</p>\n<p>如果你想因此 “more”按钮，做法很简单，修改 <code>excerpt_link</code> 参数，将单词 more 换成空格。</p>\n<h1 id=\"Hexo-博客网址使用全英文路径\"><a href=\"#Hexo-博客网址使用全英文路径\" class=\"headerlink\" title=\"Hexo 博客网址使用全英文路径\"></a><del>Hexo 博客网址使用全英文路径</del></h1><p>参考自：<a href=\"https://blog.csdn.net/likianta/article/details/79343427\">如何让你的Hexo博客网址使用全英文路径</a></p>\n<ol>\n<li><strong>站点配置文件</strong>中，设置 <code>permalink: :year/:id/</code>。</li>\n<li><p><code>.\\scaffolds\\post.md</code>中增加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">id:</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在博文中，设置该博文的 id 即可，可使用<strong>任意字符串</strong>。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">id: abc-123456</span><br></pre></td></tr></table></figure>\n<p>以自己喜欢的方式为博文命名，<strong>强烈建议</strong>不要使用纯数字作为 id。</p>\n</li>\n</ol>\n<blockquote>\n<p>为了博客网址是全英文路径，已将所有博文的<code>文件名</code>改为<strong>英文</strong>的了，简单粗暴，其实也是一种进步吧，尽量使用英文来命名标题（博客文章的标题是由里面的<code>title</code>决定的）。</p>\n</blockquote>\n<h1 id=\"Hexo-不渲染-html\"><a href=\"#Hexo-不渲染-html\" class=\"headerlink\" title=\"Hexo 不渲染 .html\"></a>Hexo 不渲染 .html</h1><p>终于找到解决方法了。<br>在添加 Google 站长验证的时候，需要把一个 <code>html</code> 放到 source 目录下，然后部署到服务器上。但每次都会把这个验证文件渲染成带有边框样式的文件，导致 Google 站长工具验证失败，无法统计数据。<br>在不想被渲染的 <code>html</code> 文件最上面添加如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: <span class=\"literal\">false</span></span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>参考自：<a href=\"https://blog.csdn.net/ganzhilin520/article/details/79057774\">Hexo不渲染.md或者.html</a></p>\n","tags":["hexo","theme"]},{"title":"一只小白的 Linux 之旅|Ubuntu 安装配置及软件安装（持续更新）","url":"/2018/04/08/ubuntu-install-config-soft-2017/","content":"<p>记录 Ubuntu 系统安装配置及其软件安装的整个过程，同时分享给有需要的人。</p>\n<p><img src=\"https://s2.ax1x.com/2019/03/13/Akw9DU.png\" alt=\"Ubuntu\"><br><span id=\"more\"></span></p>\n<h2 id=\"1-U-盘安装-Ubuntu-和-Windows-双系统\"><a href=\"#1-U-盘安装-Ubuntu-和-Windows-双系统\" class=\"headerlink\" title=\"1. U 盘安装 Ubuntu 和 Windows 双系统\"></a>1. U 盘安装 Ubuntu 和 Windows 双系统</h2><h3 id=\"1-1-下载-Ubuntu-的-iso-文件\"><a href=\"#1-1-下载-Ubuntu-的-iso-文件\" class=\"headerlink\" title=\"1.1 下载 Ubuntu 的 .iso 文件\"></a>1.1 下载 Ubuntu 的 <code>.iso</code> 文件</h3><p>可以在 <a href=\"https://www.ubuntu.com/download\">Ubuntu 官网</a>或者 <a href=\"https://cn.ubuntu.com/\">Ubuntu 中文官网</a>上下载系统镜像文件。</p>\n<h3 id=\"1-2-制作-U-盘启动盘\"><a href=\"#1-2-制作-U-盘启动盘\" class=\"headerlink\" title=\"1.2 制作 U 盘启动盘\"></a>1.2 制作 U 盘启动盘</h3><ul>\n<li>在电脑中插入一个空白的 U 盘（大小至少 2GB）</li>\n<li>使用 <strong>Universal USB Installer</strong> 烧写入 U 盘<br>官方网站是 <a href=\"http://www.pendrivelinux.com/\">http://www.pendrivelinux.com/</a><br>我们下载它：<a href=\"http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/\">http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/</a> 并且安装。</li>\n</ul>\n<h3 id=\"1-3-安装位置准备\"><a href=\"#1-3-安装位置准备\" class=\"headerlink\" title=\"1.3 安装位置准备\"></a>1.3 安装位置准备</h3><ul>\n<li>打开硬盘管理器，在想要用来安装 Ubuntu 的盘符上右击选择“压缩卷”</li>\n<li>输入压缩空间量（建议 40 G 以上，这里的单位是 M，自己换算），之后点击“压缩”</li>\n<li>完成之后可以看到刚点击压缩后得来的硬盘分区已经处于了<strong>未分配</strong>的状态，这样安装位置的准备工作就完成了。<blockquote>\n<p>特别提醒：如果你的电脑是多硬盘，如固态硬盘和机械硬盘的组合，请一定在 BIOS 所在的磁盘上分配出 200~300 M 的空间，用于在后面的 Linux 分区时作为引导分区，否则会出现无法启动 Linux 系统的问题。<br>一般地，固态硬盘都用作了 Windows 系统的安装盘，则 BIOS 也在此，当然并不绝对，根据你电脑的实际情况确定。<br>当然了，若 BIOS 所在的磁盘容量足够大，并想将 Linux 系统安装到此磁盘，则不存在上面说的问题了，按照步骤设置分区大小即可。<br>而如果将系统安装在剩余空间较大却并非有 BIOS 的另一块磁盘上时，就要注意一下这个问题了。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"1-4-重启电脑，选择-U-盘启动\"><a href=\"#1-4-重启电脑，选择-U-盘启动\" class=\"headerlink\" title=\"1.4 重启电脑，选择 U 盘启动\"></a>1.4 重启电脑，选择 U 盘启动</h3><p>一般都是按 F1 ~ F12 里面的一个键，具体是哪一个键请自行百度对应自己电脑牌子型号的按键。</p>\n<h3 id=\"1-5-正式安装-Ubuntu\"><a href=\"#1-5-正式安装-Ubuntu\" class=\"headerlink\" title=\"1.5 正式安装 Ubuntu\"></a>1.5 正式安装 Ubuntu</h3><ul>\n<li>双击桌面上的“安装Ubuntu”图标，就进入了安装界面。</li>\n<li>在左边的栏目里选择安装语言，可以选择简体中文，点击下一步。</li>\n<li>选择安装 Ubuntu 过程中是否下载更新，可以不选；选择是否安装第三方软件，可以选择不安装，点击下一步。<blockquote>\n<p>我基本都选择的是安装，导致安装过程特别长。</p>\n</blockquote>\n</li>\n<li><p>这个页面选择在哪里安装 Ubuntu，<strong>我们要安装双系统，所以选择“其他”</strong>，点击下一步按钮。</p>\n<blockquote>\n<p>居然提示我，我的电脑没有安装任何操作系统，mdzz，于是选择“其他”。</p>\n</blockquote>\n</li>\n<li><p>接下来进行分区，这一步很关键，决定了 Ubuntu 是否能成功启动。<br>首先我们看到有一个空闲分区（白色的那条），这个就是一开始我们在 Windows 下面给 Ubuntu 分出来的空间。操作这个“空闲”分区，鼠标选中它，点击下面的“+”号，会弹出对话框，按照下表中的挂载点名称、大小及格式进行分区。分区大小只是建议，可根据实际情况进行调整。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>挂载点</th>\n<th style=\"text-align:right\">分区大小</th>\n<th style=\"text-align:center\">格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>swap</td>\n<td style=\"text-align:right\">内存大小（8 G）</td>\n<td style=\"text-align:center\">交换空间</td>\n</tr>\n<tr>\n<td><del>/boot</del></td>\n<td style=\"text-align:right\"><del>300 M</del></td>\n<td style=\"text-align:center\"><del>引导分区</del></td>\n</tr>\n<tr>\n<td>/</td>\n<td style=\"text-align:right\">20 - 30 G</td>\n<td style=\"text-align:center\">逻辑分区 ext4</td>\n</tr>\n<tr>\n<td>/home</td>\n<td style=\"text-align:right\">60 - 80 G</td>\n<td style=\"text-align:center\">逻辑分区 ext4</td>\n</tr>\n</tbody>\n</table>\n<p><del>将“安装启动引导器的设备”选择为之前分配<code>/boot</code>的那个分区名。如下图中，是<code>sda5</code>，选择你的电脑对应的分区名。</del></p>\n<p><img src=\"https://s2.ax1x.com/2019/03/13/AkwCbF.png\" alt=\"我的 Ubuntu 分区大小设置\"></p>\n<p>==更新==<br>在分区过程中，建议不划分 <code>/boot</code>分区，在使用中发现，在更新几次内核之后，就会提示空间不足，因此划分上面表格中其他三个分区即可，“安装启动引导器的设备”保持默认不变。<br>系统安装完成后，电脑使用 Linux 的引导，有 Linux 和 Windows 的引导选项，如需修改启动项，详见下文中“4.4 双系统引导项设置”。如此分区后，下面的在 Windows 中使用 EasyBCD 修改引导的步骤不用再做了。</p>\n<blockquote>\n<p>分区操作参考下面教程：<br><a href=\"http://www.jianshu.com/p/53b8b76439d0\">http://www.jianshu.com/p/53b8b76439d0</a></p>\n</blockquote>\n<ul>\n<li>接下来根据提示选择时区，然后点击下一步。</li>\n<li>选择键盘布局，我们选择汉语，当然你也可以选择其他语言，点击继续，下一步</li>\n<li>设置用户名、计算机名、密码等。点击”继续”，下一步。</li>\n</ul>\n<p>开始安装，请耐心等待。</p>\n<p>安装完成，点击重启。</p>\n<p>—————分割线—————</p>\n<blockquote>\n<p>如果为 Ubuntu 系统划分了 <code>/boot</code> 分区，重启之后发现启动选项没有 Ubuntu，而是直接进了 Windows 系统，那就需要在 Windows 中，用 EasyBCD 软件来添加启动引导项了。</p>\n</blockquote>\n<p>在 Windows 中安装 EasyBCD 后打开，点击“添加新条目（Add New Entry）” ，选择 <code>Linux/BSD</code>，具体设置如下图。类型（Type）选择 GRUB(Legacy)；名称（Name）自己随便写，小编写的是 Ubuntu 作为标识；驱动器（Drive）选取我们设置的 /boot 分区，有 Linux 标记。设置完成后点击“添加条目（Add Entry）”。</p>\n<p><img src=\"https://s2.ax1x.com/2019/03/13/AkwiE4.jpg\" alt=\"EeayBCD\"></p>\n<p>电脑再次启动时，就可以看到多了 Ubuntu 的启动选项了。</p>\n<h2 id=\"2-系统更新与美化\"><a href=\"#2-系统更新与美化\" class=\"headerlink\" title=\"2. 系统更新与美化\"></a>2. 系统更新与美化</h2><h3 id=\"2-1-系统更新\"><a href=\"#2-1-系统更新\" class=\"headerlink\" title=\"2.1 系统更新\"></a>2.1 系统更新</h3><p>安装完系统之后，需要更新一些补丁。CTRL+ALT+T 打开终端，输入下面代码<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-系统美化\"><a href=\"#2-2-系统美化\" class=\"headerlink\" title=\"2.2 系统美化\"></a>2.2 系统美化</h3><h4 id=\"2-2-1-调整-Unity-桌面环境：Unity-Tweak-Tool\"><a href=\"#2-2-1-调整-Unity-桌面环境：Unity-Tweak-Tool\" class=\"headerlink\" title=\"2.2.1 调整 Unity 桌面环境：Unity Tweak Tool\"></a>2.2.1 调整 Unity 桌面环境：Unity Tweak Tool</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install unity-tweak-tool</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-2-主题-amp-图标\"><a href=\"#2-2-2-主题-amp-图标\" class=\"headerlink\" title=\"2.2.2 主题 &amp; 图标\"></a>2.2.2 主题 &amp; 图标</h4><p>Flatabulous 主题（扁平化主题）<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/themes</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install flatabulous-theme</span><br></pre></td></tr></table></figure><br>该主题有配套的图标，安装方式如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:noobslab/icons</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install ultra-flat-icons</span><br></pre></td></tr></table></figure><br>安装完成后，打开 unity-tweak-tool 软件，修改主题和图标。</p>\n<blockquote>\n<p>主题 Recommend：Flatabulous<br>图标 Recommend：Ultra-flat</p>\n</blockquote>\n<h4 id=\"2-2-3-字体：文泉译微米黑字体\"><a href=\"#2-2-3-字体：文泉译微米黑字体\" class=\"headerlink\" title=\"2.2.3 字体：文泉译微米黑字体\"></a>2.2.3 字体：文泉译微米黑字体</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install fonts-wqy-microhei</span><br></pre></td></tr></table></figure>\n<p>然后通过 unity-tweak-tool 来更换字体，按照自己的喜好选择字体和字号。</p>\n<blockquote>\n<p>字体 Recommend：文泉驿等宽微米黑 Regular 11</p>\n</blockquote>\n<p>…<br>主题美化参考自：<a href=\"http://www.jianshu.com/p/71b60921972b\">http://www.jianshu.com/p/71b60921972b</a></p>\n<h2 id=\"3-软件安装\"><a href=\"#3-软件安装\" class=\"headerlink\" title=\"3. 软件安装\"></a>3. 软件安装</h2><h3 id=\"3-0-软件中心\"><a href=\"#3-0-软件中心\" class=\"headerlink\" title=\"3.0 软件中心\"></a>3.0 软件中心</h3><p>3.0.1 gdebi——deb 安装器（<code>*.deb</code>文件右键选择打开方式）<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install gdebi</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这个软件是我安装搜狗输入法的时候发现的，刚上手不会装软件，系统总是提示不支持第三方balabala，在网上找到解决方法是安装此软件。</p>\n</blockquote>\n<p>3.0.2 ubuntukylin 软件中心<br>3.0.3 ubuntu 软件中心</p>\n<h3 id=\"3-1-chrome-浏览器\"><a href=\"#3-1-chrome-浏览器\" class=\"headerlink\" title=\"3.1 chrome 浏览器\"></a>3.1 chrome 浏览器</h3><p>谷歌浏览器，官网下载安装包。</p>\n<h3 id=\"3-2-搜狗输入法\"><a href=\"#3-2-搜狗输入法\" class=\"headerlink\" title=\"3.2 搜狗输入法\"></a>3.2 搜狗输入法</h3><p>首先去<a href=\"http://pinyin.sogou.com/linux/?r=pinyin\">搜狗拼音输入法官网</a>下载。<br>安装命令如下：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i sogoupinyin_2.1.0.0082_amd64.deb</span><br></pre></td></tr></table></figure><br>如果提示依赖有问题，执行下面命令后重新安装：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -f</span><br></pre></td></tr></table></figure><br>或者右键安装包，<em>打开方式</em> 选择 <strong>GDebi 软件包安装程序</strong> 打开</p>\n<h3 id=\"3-3-科学上网\"><a href=\"#3-3-科学上网\" class=\"headerlink\" title=\"3.3 科学上网\"></a>3.3 科学上网</h3><h4 id=\"3-3-1-lantern\"><a href=\"#3-3-1-lantern\" class=\"headerlink\" title=\"3.3.1 lantern\"></a>3.3.1 lantern</h4><p>蓝灯，<a href=\"https://github.com/getlantern/lantern\">GitHub repo 地址</a>。</p>\n<h4 id=\"3-3-2-shadowsocks\"><a href=\"#3-3-2-shadowsocks\" class=\"headerlink\" title=\"3.3.2 shadowsocks\"></a>3.3.2 shadowsocks</h4><p>Shadowsocks-qt5 是一款支持 Windows 和 Linux 的 Shadowsocks 客户端，通过 PPA 源安装，仅支持 Ubuntu 14.04 或更高版本。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure><br>安装完之后查找 shadowsocks 软件，点击运行，然后配置你的信息即可。</p>\n<h3 id=\"3-4-Git\"><a href=\"#3-4-Git\" class=\"headerlink\" title=\"3.4 Git\"></a>3.4 Git</h3><p>Git，程序员必备软件，安装：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure><br>配置用户名和邮箱：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;Your Name&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure><br>配置SSH<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -C <span class=\"string\">&#x27;you email address@gmail.com&#x27;</span> -t rsa</span><br></pre></td></tr></table></figure><br>此时在 <strong>目录：~/.ssh/</strong> 下面会建立相应的密钥文件。<br>创建完公钥后，需要上传到 GitHub、码云或者自己配置的 GitLab 上。<br>使用命令进入 <strong>~/.ssh</strong> 文件夹：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure><br>打开 <strong>id_rsa.pub</strong> 文件：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gedit id_rsa.pub</span><br></pre></td></tr></table></figure><br>，复制其中所有内容，配置到相应的 SSH 配置中。</p>\n<p>测试连接是否畅通：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// GitHub</span><br><span class=\"line\">ssh -T git@github.com</span><br><span class=\"line\">// 码云</span><br><span class=\"line\">ssh -T git@gitee.com</span><br><span class=\"line\">// ...</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-5-JDK\"><a href=\"#3-5-JDK\" class=\"headerlink\" title=\"3.5 JDK\"></a>3.5 JDK</h3><p><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">JDK 官网</a> 下载 Linux 的 JDK 版本。</p>\n<ul>\n<li><p>在 <code>/usr/lib</code> 目录下创建一个文件夹 <strong>jvm</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir /usr/lib/jvm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入默认的下载目录下 <code>home/下载/</code> 进行解压文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo tar -zxvf jdk-8u112-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将解压后的 jdk 移动到 <code>/usr/lib/jvm</code>目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mv jdk1.8.0_121/ /usr/lib/jvm/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接下来配置系统环境变量，这里是将环境变量配置在 <code>etc/profile</code>，即为所有用户配置 JDK 环境，使用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在文件末尾追加：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#set java environment</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/jdk1.8.0_121</span><br><span class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib:<span class=\"variable\">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行下面命令使当前 bash 环境生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看是否安装成功<br>运行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>显示版本信息，则说明安装和配置成功。</p>\n</li>\n</ul>\n<h3 id=\"3-6-Android-Studio\"><a href=\"#3-6-Android-Studio\" class=\"headerlink\" title=\"3.6 Android Studio\"></a>3.6 Android Studio</h3><p>下载地址：<a href=\"https://developer.android.google.cn/studio/index.html\">Android Studio Linux版</a></p>\n<ul>\n<li><p>安装及运行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">unzip android-studio-ide-145.3360264-linux.zip  //解压</span><br><span class=\"line\">sudo mv android-studio /opt/  //移动</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/android-studio/bin  //切换文件夹</span><br><span class=\"line\">sh studio.h（sudo ./studio.sh）  //运行</span><br></pre></td></tr></table></figure>\n<p>按照提示进行安装。</p>\n</li>\n<li><p>如果运行的是 64 位版本 Ubuntu，则需要使用以下命令安装一些 32 位库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>部分说明来自于官网，更多安装过程细节可参考<a href=\"https://developer.android.google.cn/studio/install.html\">官方安装 Android Studio 说明</a>。</p>\n</blockquote>\n<ul>\n<li>创建 AS 在 Ubuntu 中的快捷方式：<br>点击<code>Tools--&gt;create Desktop entry</code> 创建</li>\n</ul>\n<h3 id=\"3-7-VScode\"><a href=\"#3-7-VScode\" class=\"headerlink\" title=\"3.7 VScode\"></a>3.7 VScode</h3><p>下载地址：<a href=\"https://code.visualstudio.com/Download\">Visual Studio Code</a></p>\n<h3 id=\"3-8-CPU、内存、网速监控\"><a href=\"#3-8-CPU、内存、网速监控\" class=\"headerlink\" title=\"3.8 CPU、内存、网速监控\"></a>3.8 CPU、内存、网速监控</h3><p>GitHub 地址：<a href=\"https://github.com/fossfreedom/indicator-sysmonitor\">https://github.com/fossfreedom/indicator-sysmonitor</a></p>\n<ul>\n<li>安装<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install indicator-sysmonitor</span><br></pre></td></tr></table></figure>\n安装完成之后输入<code>indicator-sysmonitor &amp;</code>回车，之后按<code>Ctrl+C</code><br>，继续输入<code>exit</code>退出控制台，这时此工具就在后台运行了。</li>\n<li>开机启动<br>鼠标左击标题栏该工具图标，弹出下拉菜单选择<code>Preferences</code>，勾选上<code>Run on startup</code>，此时该工具就会开机自动启动了。</li>\n<li>配置<br>切换到<code>Advanced</code>选项，可以对要显示的信息的格式进行设置，如：我想知道当前网络的上下行速度，就加上<code>网速:&#123;net&#125;</code>即可。</li>\n</ul>\n<h3 id=\"3-9-RapidSVN\"><a href=\"#3-9-RapidSVN\" class=\"headerlink\" title=\"3.9 RapidSVN\"></a>3.9 RapidSVN</h3><p>SVN 客户端<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-get install rapidsvn</span><br></pre></td></tr></table></figure><br>使用教程，<a href=\"http://jingyan.baidu.com/article/647f01159232ee7f2048a85d.html\">点我</a>。</p>\n<h3 id=\"3-10-Shutter\"><a href=\"#3-10-Shutter\" class=\"headerlink\" title=\"3.10 Shutter\"></a>3.10 Shutter</h3><p>Ubuntu下很强大的一款截图软件。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install shutter</span><br></pre></td></tr></table></figure><br><strong>设置 Shutter 快捷键：</strong><br>打开系统设置–&gt;键盘–&gt;快捷键–&gt;自定义快捷键：</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th style=\"text-align:right\">命令</th>\n<th style=\"text-align:center\">我的快捷键组合</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>选中区域截取图片（Shutter Select）</td>\n<td style=\"text-align:right\">shutter -s</td>\n<td style=\"text-align:center\">Shift + Alt + s</td>\n</tr>\n<tr>\n<td>截取活动窗口（Shutter Active）</td>\n<td style=\"text-align:right\">shutter -a</td>\n<td style=\"text-align:center\">Shift + Alt + a</td>\n</tr>\n<tr>\n<td>截取整个屏幕（Shutter Full）</td>\n<td style=\"text-align:right\">shutter -f</td>\n<td style=\"text-align:center\">Shift + Alt + f</td>\n</tr>\n<tr>\n<td>选择要捕获的窗口（Shutter Window）</td>\n<td style=\"text-align:right\">shutter -w</td>\n<td style=\"text-align:center\">Shift + Alt + w</td>\n</tr>\n</tbody>\n</table>\n<p>更多功能请运行 <code>shutter -h</code> 查看帮助。</p>\n<h3 id=\"3-11-WPS\"><a href=\"#3-11-WPS\" class=\"headerlink\" title=\"3.11 WPS\"></a>3.11 WPS</h3><p>WPS，办公套件。</p>\n<h4 id=\"3-11-1-下载安装软件\"><a href=\"#3-11-1-下载安装软件\" class=\"headerlink\" title=\"3.11.1 下载安装软件\"></a>3.11.1 下载安装软件</h4><p>软件中心下载或去<a href=\"http://www.wps.cn/\">官网</a>下载 <code>.deb</code> 安装包进行安装。</p>\n<h4 id=\"3-11-2-安装字体\"><a href=\"#3-11-2-安装字体\" class=\"headerlink\" title=\"3.11.2 安装字体\"></a>3.11.2 安装字体</h4><p>第一次启动的时候会报错，说你有很多字体没有安装，这时，你可以去网上自己找或者下面这个链接<a href=\"http://download.csdn.net/detail/wl1524520/6333049\">必备字体库</a>下载安装字体。</p>\n<p>字体安装方法：</p>\n<ul>\n<li><p>创建目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mkdir /usr/share/fonts/wps-office</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将下载的字体复制到创建的目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo cp -r wps_symbol_fonts.zip /usr/share/fonts/wps-office</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压字体包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo unzip wps_symbol_fonts.zip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压后删除字体包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo rm -r wps_symbol_fonts.zip</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-12-Haroopad\"><a href=\"#3-12-Haroopad\" class=\"headerlink\" title=\"3.12 Haroopad\"></a>3.12 Haroopad</h3><p>Markdown 编辑器，<a href=\"http://pad.haroopress.com/user.html\">官网</a>下载 <code>.deb</code> 安装包，右键安装。</p>\n<h3 id=\"3-13-Beyond-Compare\"><a href=\"#3-13-Beyond-Compare\" class=\"headerlink\" title=\"3.13 Beyond Compare\"></a>3.13 Beyond Compare</h3><p>文件及文件夹（目录）对比工具，<a href=\"http://scootersoftware.com/\">官网</a>下载 <code>.deb</code> 安装包，右键安装。</p>\n<h3 id=\"3-14-PhpStorm\"><a href=\"#3-14-PhpStorm\" class=\"headerlink\" title=\"3.14 PhpStorm\"></a>3.14 PhpStorm</h3><p>PHP 开发工具，<a href=\"http://www.jetbrains.com/phpstorm/\">官网</a>下载 <code>.tar.gz</code> 压缩包，按照如下步骤安装。</p>\n<ul>\n<li>从官网下载压缩包后，进入下载的文件夹，并解压 PhpStorm<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -xvf PhpStorm-2017.2.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li>移动到目标文件夹（我将其移到了  <code>opt</code> 文件夹里）<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mv PhpStorm-172.3317.83/ /opt/</span><br></pre></td></tr></table></figure></li>\n<li>进入文件夹并打开软件<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/PhpStorm-172.3317.83/bin/</span><br><span class=\"line\">./phpstorm.sh</span><br></pre></td></tr></table></figure>\n按照提示进行安装。</li>\n</ul>\n<p>更多 Linux 安装 PhpStorm 的步骤请参考：<a href=\"http://www.linuxidc.com/Linux/2016-05/131373.htm\">http://www.linuxidc.com/Linux/2016-05/131373.htm</a></p>\n<h3 id=\"3-15-搭建-LAMP-环境\"><a href=\"#3-15-搭建-LAMP-环境\" class=\"headerlink\" title=\"3.15 搭建 LAMP 环境\"></a>3.15 搭建 LAMP 环境</h3><p>最简单的安装方式，注：别忘了最后这个脱字符号<code>^</code>，否则终端会报无法定位软件包的错误提示。<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install lamp-server^</span><br></pre></td></tr></table></figure><br>安装 phpMyAdmin<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get phpmyadmin</span><br></pre></td></tr></table></figure><br>更多关于测试是否安装成功及修改一些配置的地方，参考这两篇文章：<br>1、<a href=\"http://www.jianshu.com/p/48c1a892f90b\">在Ubuntu上安装LAMP服务器系统的方法</a><br>2、<a href=\"https://blog.luckyw.cn/2016/08/21/ubuntu-lamp/\">Ubuntu16.04搭建LAMP环境</a></p>\n<h3 id=\"3-16-福昕-PDF-阅读器\"><a href=\"#3-16-福昕-PDF-阅读器\" class=\"headerlink\" title=\"3.16 福昕 PDF 阅读器\"></a>3.16 福昕 PDF 阅读器</h3><p>PDF 阅读器，<a href=\"https://www.foxitsoftware.cn/downloads/\">下载地址</a>。</p>\n<ul>\n<li><p>下载完成后，切换到文件所在目录</p>\n</li>\n<li><p>解压可执行文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gzip -d <span class=\"string\">&#x27;FoxitReader2.4.1.0609_Server_x64_enu_Setup.run.tar.gz&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>对<code>.tar</code>文件进行解包<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar xvf <span class=\"string\">&#x27;FoxitReader2.4.1.0609_Server_x64_enu_Setup.run.tar&#x27;</span></span><br></pre></td></tr></table></figure></li>\n<li>移动到目标文件夹（可选，我将其移到了 <code>opt</code> 文件夹里）<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mv FoxitReader.enu.setup.2.4.1.0609\\(r08f07f8\\).x64.run /opt/</span><br></pre></td></tr></table></figure></li>\n<li>切换到 root 用户<br>比官方给的多这一步，为了有权限将软件安装到<code>opt/</code> 目录，否则直接进行下一步只能安装到用户目录下了。<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">su root</span><br></pre></td></tr></table></figure></li>\n<li>运行安装程序<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./<span class=\"string\">&#x27;FoxitReader.enu.setup.2.4.1.0609(r08f07f8).x64.run&#x27;</span></span><br></pre></td></tr></table></figure>\n根据屏幕提示完成安装，同 Windows 系统安装软件过程。<blockquote>\n<p>具体的版本号，以下载的实际情况为准。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"3-17-Postman\"><a href=\"#3-17-Postman\" class=\"headerlink\" title=\"3.17 Postman\"></a>3.17 Postman</h3><p>API 调试工具，<a href=\"https://www.getpostman.com/postman\">官网</a>下载 <code>.tar.gz</code> 压缩包，按照如下步骤安装。</p>\n<ul>\n<li>从官网下载压缩包后，进入下载的文件夹，并解压 Postman<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -xvf Postman-linux-x64-5.3.2.tar.gz</span><br></pre></td></tr></table></figure></li>\n<li>移动到目标文件夹（我将其移到了 <code>opt</code> 文件夹里）<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mv Postman/ /opt/</span><br></pre></td></tr></table></figure></li>\n<li><p>进入文件夹并打开软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/Postman/</span><br><span class=\"line\">./Postman</span><br></pre></td></tr></table></figure>\n<p>到此软件就安装完成了，但是 Postman 没有为用户生成启动项，这样每次都要进入这个目录，且启动器没有该应用。</p>\n</li>\n<li><p>创建全局变量，也就是在任何地方都可以执行 postman，不用去到安装目录，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ln -s /opt/Postman/Postman /usr/bin/postman</span><br></pre></td></tr></table></figure></li>\n<li>添加启动器应用图标，也就是可以从启动器快速启动，执行<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gedit /usr/share/applications/postman.desktop</span><br></pre></td></tr></table></figure>\n添加如下内容：<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Encoding=UTF-8</span><br><span class=\"line\">Name=Postman</span><br><span class=\"line\">Exec=postman</span><br><span class=\"line\">Icon=/opt/Postman/resources/app/assets/icon.png</span><br><span class=\"line\">Terminal=<span class=\"literal\">false</span></span><br><span class=\"line\">Type=Application</span><br><span class=\"line\">Categories=Development;</span><br></pre></td></tr></table></figure>\n到启动器搜索，应该可以找到该应用了。</li>\n</ul>\n<h3 id=\"3-18-Rambox-免费和开源的消息和电子邮件应用程序\"><a href=\"#3-18-Rambox-免费和开源的消息和电子邮件应用程序\" class=\"headerlink\" title=\"3.18 Rambox - 免费和开源的消息和电子邮件应用程序\"></a>3.18 Rambox - 免费和开源的消息和电子邮件应用程序</h3><p>一个聊天聚合应用：<a href=\"https://rambox.pro/\">Rambox</a>，添加微信、钉钉以及更多国外通讯服务，可通过系统原生通知接收消息提醒。</p>\n<hr>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><h4 id=\"软件安装与卸载命令\"><a href=\"#软件安装与卸载命令\" class=\"headerlink\" title=\"软件安装与卸载命令\"></a>软件安装与卸载命令</h4><ul>\n<li><p>apt-get 安装方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~$ sudo apt-get install 软件名</span><br></pre></td></tr></table></figure>\n<p>如果出现依赖问题只需要键入命令更新一下依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~$ sudo apt-get -f install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>dpkg -i 安装方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">~$ sudo dpkg -i xxx.deb</span><br></pre></td></tr></table></figure>\n<p>xxx 是具体的 deb 软件包的包名。<br>或者右键安装包，<em>打开方式</em> 选择 <strong>GDebi 软件包安装程序</strong> 打开。</p>\n</li>\n<li><p>卸载软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get autoremove --purge xxx</span><br></pre></td></tr></table></figure>\n<p>sudo：获取 root 权限；<br>apt-get：执行安装卸载功能的软件；<br>autoremove：告诉 apt-get 我们所要做的操作是移除软件；<br>–purge：注意这前面是两个短划线，这个参数是告诉他们要完整的干净的彻底的移除；<br>不清楚软件的具体包名，可以在输入开头几个字母之后按 Tab 键提示。</p>\n</li>\n</ul>\n<h2 id=\"4-问题解决\"><a href=\"#4-问题解决\" class=\"headerlink\" title=\"4. 问题解决\"></a>4. 问题解决</h2><h3 id=\"4-1-双系统时间修正\"><a href=\"#4-1-双系统时间修正\" class=\"headerlink\" title=\"4.1 双系统时间修正\"></a>4.1 双系统时间修正</h3><p>在 Ubuntu16.04 之前的版本中，可以在终端中输入<code>sudo gedit /etc/default/rcS</code>，将<code>UTC=yes</code> 改为 <code>UTC=no</code><br>而在 Ubuntu16.04 和 16.10 版本中，在终端中输入<code>timedatectl set-local-rtc 1 --adjust-system-clock</code>即可关闭 UTC。</p>\n<h3 id=\"4-2-开机开启数字小键盘\"><a href=\"#4-2-开机开启数字小键盘\" class=\"headerlink\" title=\"4.2 开机开启数字小键盘\"></a>4.2 开机开启数字小键盘</h3><ul>\n<li>安装 numlockx<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install numlockx</span><br></pre></td></tr></table></figure></li>\n<li>完成后修改<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/rc.local</span><br></pre></td></tr></table></figure>\n在最后一行 <code>exit 0</code> 前增加如下内容<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [-x /usr/bin/numlockx ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"></span><br><span class=\"line\">numlockx on</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n重启或者注销即可。</li>\n</ul>\n<h3 id=\"4-3-Ubuntu-设置-root-密码\"><a href=\"#4-3-Ubuntu-设置-root-密码\" class=\"headerlink\" title=\"4.3 Ubuntu 设置 root 密码\"></a>4.3 Ubuntu 设置 root 密码</h3><p>设置 root 密码<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo passwd</span><br></pre></td></tr></table></figure><br>输入两次密码。<br>切换root用户<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">su root</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-4-双系统引导项设置\"><a href=\"#4-4-双系统引导项设置\" class=\"headerlink\" title=\"4.4 双系统引导项设置\"></a>4.4 双系统引导项设置</h3><p>默认情况是 Linux 系统在引导的第一个条目，Windows 系统在最后一个，默认启动项停留在第一个。如果你想设置不用手动选择的情况下默认进入的系统，则可以进行如下的修改。</p>\n<ul>\n<li><p>打开配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改默认启动项<br>GRUB_DEFAULT=0 设置成 GRUB_DEFAULT=4。</p>\n<blockquote>\n<p>索引值是从 0 开始的，第一个是 Ubuntu，第 5 个是 Windows，这样就可以设置开机默认启动 Windows。</p>\n</blockquote>\n</li>\n<li><p>修改开机默认等待时间<br>GRUB_HIDDEN_TIMEOUT= 秒数</p>\n</li>\n<li><p>更新设置，使其有效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"5-结尾\"><a href=\"#5-结尾\" class=\"headerlink\" title=\"5. 结尾\"></a>5. 结尾</h2><p>文章持续更新中，遇到好的应用或美化相关的，会更新上来；文章中有不完美的地方，也请大佬指点出来，将做出修改和优化。希望这篇文章能帮到有需要的人，点滴积累，点滴分享。</p>\n","tags":["Ubuntu","OS"]},{"url":"/google40b54ecf613a4326.html","content":"google-site-verification: google40b54ecf613a4326.html"}]